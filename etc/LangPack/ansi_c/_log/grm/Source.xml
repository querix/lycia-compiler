<Content>
    <Rule value="abstract_declarator" uses="direct_abstract_declarator,pointer" usedBy=",parameter_declaration,type_name,direct_abstract_declarator," recursiveUses="direct_abstract_declarator" recursiveUsedBy="parameter_declaration">
        <Expression>
            <OrInclusive>
                <Recursive_Rule value="direct_abstract_declarator" />
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="pointer" />
                        <Recursive_Rule value="direct_abstract_declarator" />
                    </Sequence>
                </Sub>
                <Terminating_Rule value="pointer" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="pointer" />
            <Uses_Recursive value="direct_abstract_declarator" />
            <UsedBy_Terminated value="type_name" />
            <UsedBy_Terminated value="direct_abstract_declarator" />
            <UsedBy_Recursive value="parameter_declaration" />
        </Properties>
        <Called>
            <C v="pointer">
                <C v="type_qualifier_list" c="3">
                    <T v="type_qualifier" c="5" />
                </C>
                <R v="pointer" c="4" />
            </C>
            <C v="direct_abstract_declarator">
                <C v="constant_expression" c="6">
                    <C v="conditional_expression" c="9">
                        <C v="logical_or_expression" c="10">
                            <X v="logical_and_expression" c="13" />
                        </C>
                        <R v="conditional_expression" c="11" />
                        <C v="expression" c="12">
                            <X v="assignment_expression" c="14" />
                        </C>
                    </C>
                </C>
                <C v="parameter_type_list" c="7">
                    <C v="parameter_list" c="15">
                        <C v="parameter_declaration" c="16">
                            <T v="assignment_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="declaration_specifier" c="19" />
                            <X v="declarator" c="20" />
                            <X v="parameter_function" c="21" />
                            <X v="unary_expression" c="22" />
                            <X v="abstract_declarator" c="23" />
                        </C>
                    </C>
                </C>
                <R v="abstract_declarator" c="8" />
            </C>
        </Called>
        <Caller>
            <C v="type_name">
                <C v="cast_expression" c="4">
                    <C v="assignment_expression" c="6">
                        <C v="initializer" c="11">
                            <X v="init_declarator" c="14" />
                            <X v="initializer_list" c="15" />
                        </C>
                        <C v="argument_expression_list" c="12">
                            <X v="postfix_expression_second" c="16" />
                        </C>
                        <R v="assignment_expression" c="13" />
                    </C>
                    <C v="parameter_declaration" c="7">
                        <C v="parameter_list" c="17">
                            <X v="parameter_type_list" c="18" />
                        </C>
                    </C>
                    <C v="unary_expression" c="8">
                        <C v="element_initializer" c="19">
                            <X v="function_definition" c="24" />
                        </C>
                        <R v="unary_expression" c="20" />
                        <R v="cast_expression" c="21" />
                        <R v="assignment_expression" c="22" />
                        <R v="parameter_declaration" c="23" />
                    </C>
                    <R v="cast_expression" c="9" />
                    <C v="multiplicative_expression" c="10">
                        <C v="additive_expression" c="25">
                            <X v="shift_expression" c="26" />
                        </C>
                    </C>
                </C>
                <R v="unary_expression" c="5" />
            </C>
            <C v="direct_abstract_declarator">
                <R v="abstract_declarator" c="27" />
            </C>
            <C v="parameter_declaration" />
        </Caller>
    </Rule>
    <Rule value="additive_expression" uses="multiplicative_expression" usedBy=",shift_expression," recursiveUses="multiplicative_expression" recursiveUsedBy="shift_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="multiplicative_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <String value="+" />
                                    <String value="-" />
                                </OrInclusive>
                            </Sub>
                            <Recursive_Rule value="multiplicative_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="multiplicative_expression" />
            <UsedBy_Recursive value="shift_expression" />
        </Properties>
        <Called>
            <C v="multiplicative_expression">
                <C v="cast_expression" c="2">
                    <R v="cast_expression" c="3" />
                    <C v="type_name" c="4">
                        <C v="USER_TYPE" c="6">
                            <X v="ID" c="9" />
                        </C>
                        <C v="abstract_declarator" c="7">
                            <X v="pointer" c="10" />
                            <X v="direct_abstract_declarator" c="11" />
                        </C>
                        <C v="specifier_qualifier_list" c="8">
                            <X v="USER_TYPE" c="12" />
                            <T v="type_qualifier" c="13" />
                            <X v="specifier_qualifier_list" c="14" />
                            <X v="type_specifier" c="15" />
                        </C>
                    </C>
                    <C v="unary_expression" c="5">
                        <R v="type_name" c="16" />
                        <T v="unary_operator" c="17" />
                        <R v="cast_expression" c="18" />
                        <C v="postfix_expression" c="19">
                            <X v="primary_expression" c="21" />
                            <X v="postfix_expression_second" c="22" />
                        </C>
                        <R v="unary_expression" c="20" />
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="shift_expression">
                <C v="relational_expression" c="2">
                    <C v="equality_expression" c="3">
                        <C v="and_expression" c="4">
                            <X v="exclusive_or_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="and_expression" uses="equality_expression" usedBy=",exclusive_or_expression," recursiveUses="equality_expression" recursiveUsedBy="exclusive_or_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="equality_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <Exclusion>
                                    <First>
                                        <Character_Single value="&amp;" />
                                    </First>
                                    <Second>
                                        <Sub>
                                            <OrInclusive>
                                                <String value="&amp;&amp;" />
                                                <String value="&amp;=" />
                                            </OrInclusive>
                                        </Sub>
                                    </Second>
                                </Exclusion>
                            </Sub>
                            <Recursive_Rule value="equality_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="equality_expression" />
            <UsedBy_Recursive value="exclusive_or_expression" />
        </Properties>
        <Called>
            <C v="equality_expression">
                <C v="relational_expression" c="2">
                    <C v="shift_expression" c="3">
                        <C v="additive_expression" c="4">
                            <X v="multiplicative_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="exclusive_or_expression">
                <C v="inclusive_or_expression" c="2">
                    <C v="logical_and_expression" c="3">
                        <C v="logical_or_expression" c="4">
                            <X v="conditional_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="argument_expression_list" uses="assignment_expression" usedBy=",postfix_expression_second," recursiveUses="assignment_expression" recursiveUsedBy="postfix_expression_second">
        <Expression>
            <Sequence>
                <Recursive_Rule value="assignment_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <String value="," />
                            </Sub>
                            <Recursive_Rule value="assignment_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="assignment_expression" />
            <UsedBy_Recursive value="postfix_expression_second" />
        </Properties>
        <Called>
            <C v="assignment_expression">
                <T v="assignment_operator" c="2" />
                <C v="conditional_expression" c="3">
                    <C v="logical_or_expression" c="7">
                        <C v="logical_and_expression" c="10">
                            <X v="inclusive_or_expression" c="11" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="8" />
                    <C v="expression" c="9">
                        <R v="assignment_expression" c="12" />
                    </C>
                </C>
                <R v="assignment_expression" c="4" />
                <C v="cast_expression" c="5">
                    <R v="cast_expression" c="13" />
                    <C v="type_name" c="14">
                        <C v="USER_TYPE" c="16">
                            <X v="ID" c="19" />
                        </C>
                        <C v="abstract_declarator" c="17">
                            <X v="pointer" c="20" />
                            <X v="direct_abstract_declarator" c="21" />
                        </C>
                        <C v="specifier_qualifier_list" c="18">
                            <X v="USER_TYPE" c="22" />
                            <T v="type_qualifier" c="23" />
                            <X v="specifier_qualifier_list" c="24" />
                            <X v="type_specifier" c="25" />
                        </C>
                    </C>
                    <C v="unary_expression" c="15">
                        <X v="type_name" c="26" />
                        <T v="unary_operator" c="27" />
                        <X v="cast_expression" c="28" />
                        <X v="postfix_expression" c="29" />
                        <X v="unary_expression" c="30" />
                    </C>
                </C>
                <X v="unary_expression" c="6" />
            </C>
        </Called>
        <Caller>
            <C v="postfix_expression_second">
                <C v="postfix_expression" c="2">
                    <C v="unary_expression" c="3">
                        <C v="element_initializer" c="4">
                            <X v="function_definition" c="9" />
                        </C>
                        <R v="unary_expression" c="5" />
                        <C v="cast_expression" c="6">
                            <X v="assignment_expression" c="10" />
                            <X v="parameter_declaration" c="11" />
                            <X v="unary_expression" c="12" />
                            <X v="cast_expression" c="13" />
                            <X v="multiplicative_expression" c="14" />
                        </C>
                        <C v="assignment_expression" c="7">
                            <X v="initializer" c="15" />
                            <X v="argument_expression_list" c="16" />
                            <X v="assignment_expression" c="17" />
                        </C>
                        <C v="parameter_declaration" c="8">
                            <X v="parameter_list" c="18" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="assignment_expression" uses="assignment_expression,assignment_operator,cast_expression,conditional_expression,unary_expression" usedBy=",argument_expression_list,assignment_expression,initializer," recursiveUses="assignment_expression,cast_expression,unary_expression" recursiveUsedBy="argument_expression_list,assignment_expression">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Sub>
                            <OrInclusive>
                                <Recursive_Rule value="unary_expression" />
                                <Recursive_Rule value="cast_expression" />
                            </OrInclusive>
                        </Sub>
                        <Terminating_Rule value="assignment_operator" />
                        <Recursive_Rule value="assignment_expression" />
                    </Sequence>
                </Sub>
                <Terminating_Rule value="conditional_expression" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="assignment_operator" />
            <Uses_Terminated value="conditional_expression" />
            <Uses_Recursive value="assignment_expression" />
            <Uses_Recursive value="cast_expression" />
            <Uses_Recursive value="unary_expression" />
            <UsedBy_Terminated value="initializer" />
            <UsedBy_Recursive value="argument_expression_list" />
            <UsedBy_Recursive value="assignment_expression" />
        </Properties>
        <Called>
            <T v="assignment_operator" />
            <C v="conditional_expression">
                <C v="logical_or_expression" c="6">
                    <C v="logical_and_expression" c="9">
                        <C v="inclusive_or_expression" c="10">
                            <X v="exclusive_or_expression" c="11" />
                        </C>
                    </C>
                </C>
                <R v="conditional_expression" c="7" />
                <C v="expression" c="8">
                    <R v="assignment_expression" c="12" />
                </C>
            </C>
            <C v="assignment_expression" />
            <C v="cast_expression">
                <R v="cast_expression" c="13" />
                <C v="type_name" c="14">
                    <C v="USER_TYPE" c="16">
                        <C v="ID" c="19">
                            <X v="NON_ID" c="20" />
                        </C>
                    </C>
                    <C v="abstract_declarator" c="17">
                        <C v="pointer" c="21">
                            <X v="type_qualifier_list" c="23" />
                            <X v="pointer" c="24" />
                        </C>
                        <C v="direct_abstract_declarator" c="22">
                            <X v="constant_expression" c="25" />
                            <X v="parameter_type_list" c="26" />
                            <X v="abstract_declarator" c="27" />
                        </C>
                    </C>
                    <C v="specifier_qualifier_list" c="18">
                        <X v="USER_TYPE" c="28" />
                        <T v="type_qualifier" c="29" />
                        <X v="specifier_qualifier_list" c="30" />
                        <X v="type_specifier" c="31" />
                    </C>
                </C>
                <X v="unary_expression" c="15" />
            </C>
            <C v="unary_expression">
                <X v="type_name" c="32" />
                <T v="unary_operator" c="33" />
                <X v="cast_expression" c="34" />
                <X v="postfix_expression" c="35" />
                <X v="unary_expression" c="36" />
            </C>
        </Called>
        <Caller>
            <C v="initializer">
                <C v="init_declarator" c="4">
                    <C v="declaration" c="6">
                        <C v="union_specifier" c="8">
                            <X v="type_specifier" c="18" />
                        </C>
                        <C v="compound_statement" c="9">
                            <X v="methode_definition" c="19" />
                            <X v="statement" c="20" />
                            <X v="function_definition" c="21" />
                        </C>
                        <C v="for_expr" c="10">
                            <X v="for_stmt" c="22" />
                        </C>
                        <C v="p_Block" c="11">
                            <X v="p_ifndef" c="23" />
                            <X v="p_if" c="24" />
                            <X v="p_elif" c="25" />
                            <X v="p_else" c="26" />
                            <X v="p_ifdef" c="27" />
                        </C>
                        <C v="function_definition" c="12">
                            <X v="external_declaration" c="28" />
                            <X v="namespace" c="29" />
                            <X v="extern_compiled" c="30" />
                            <T v="pass" c="31" />
                            <X v="p_Block" c="32" />
                        </C>
                        <X v="external_declaration" c="13" />
                        <X v="namespace" c="14" />
                        <X v="extern_compiled" c="15" />
                        <T v="pass" c="16" />
                        <X v="struct_specifier" c="17" />
                    </C>
                    <X v="prototype_parameter" c="7" />
                </C>
                <X v="initializer_list" c="5" />
            </C>
            <C v="argument_expression_list">
                <X v="postfix_expression_second" c="33" />
            </C>
            <C v="assignment_expression" />
        </Caller>
    </Rule>
    <Rule value="assignment_operator" uses="" usedBy=",assignment_expression,parameter_declaration,">
        <Expression>
            <OrInclusive>
                <String value="*=" />
                <String value="/=" />
                <String value="%=" />
                <String value="+=" />
                <String value="-=" />
                <String value="&lt;&lt;=" />
                <String value="&gt;&gt;=" />
                <String value="&amp;=" />
                <String value="^=" />
                <String value="|=" />
                <String value="=" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="assignment_expression" />
            <UsedBy_Terminated value="parameter_declaration" />
        </Properties>
        <Called />
        <Caller>
            <C v="assignment_expression">
                <C v="initializer" c="3">
                    <C v="init_declarator" c="6">
                        <C v="declaration" c="8">
                            <X v="union_specifier" c="10" />
                            <X v="compound_statement" c="11" />
                            <X v="for_expr" c="12" />
                            <X v="p_Block" c="13" />
                            <X v="function_definition" c="14" />
                            <X v="external_declaration" c="15" />
                            <X v="namespace" c="16" />
                            <X v="extern_compiled" c="17" />
                            <T v="pass" c="18" />
                            <X v="struct_specifier" c="19" />
                        </C>
                        <C v="prototype_parameter" c="9">
                            <X v="prototype_parameter_list" c="20" />
                        </C>
                    </C>
                    <C v="initializer_list" c="7">
                        <R v="initializer" c="21" />
                    </C>
                </C>
                <C v="argument_expression_list" c="4">
                    <C v="postfix_expression_second" c="22">
                        <C v="postfix_expression" c="23">
                            <X v="unary_expression" c="24" />
                        </C>
                    </C>
                </C>
                <R v="assignment_expression" c="5" />
            </C>
            <C v="parameter_declaration">
                <C v="parameter_list" c="25">
                    <C v="parameter_type_list" c="26">
                        <C v="direct_abstract_declarator" c="27">
                            <X v="abstract_declarator" c="29" />
                        </C>
                        <C v="direct_parameter_declarator" c="28">
                            <X v="parameter_function" c="30" />
                            <X v="p_declarator" c="31" />
                            <X v="destructor" c="32" />
                            <X v="direct_declarator_second" c="33" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="break_stmt" uses="semikolon" usedBy=",statement,case_stmt,case_part,default_stmt,default_part,jump_statement,">
        <Expression>
            <Sequence>
                <String value="break" />
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="1" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="semikolon" />
            <UsedBy_Terminated value="statement" />
            <UsedBy_Terminated value="case_stmt" />
            <UsedBy_Terminated value="case_part" />
            <UsedBy_Terminated value="default_stmt" />
            <UsedBy_Terminated value="default_part" />
            <UsedBy_Terminated value="jump_statement" />
        </Properties>
        <Called>
            <T v="semikolon" />
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="7">
                    <C v="if_stmt" c="22">
                        <R v="statement" c="23" />
                        <C v="else_part" c="24">
                            <X v="if_stmt" c="25" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="8" />
                <C v="p_Block" c="9">
                    <X v="p_ifndef" c="26" />
                    <X v="p_if" c="27" />
                    <X v="p_elif" c="28" />
                    <X v="p_else" c="29" />
                    <X v="p_ifdef" c="30" />
                </C>
                <X v="namespace" c="10" />
                <X v="extern_compiled" c="11" />
                <T v="pass" c="12" />
                <X v="compound_statement" c="13" />
                <X v="case_part" c="14" />
                <X v="default_part" c="15" />
                <X v="if_part" c="16" />
                <X v="switch_stmt" c="17" />
                <X v="while_stmt" c="18" />
                <X v="do_stmt" c="19" />
                <X v="for_stmt" c="20" />
                <X v="p_define" c="21" />
            </C>
            <C v="case_stmt">
                <X v="case_part" c="31" />
                <X v="default_part" c="32" />
                <X v="statement" c="33" />
            </C>
            <C v="case_part">
                <X v="case_stmt" c="34" />
            </C>
            <C v="default_stmt">
                <X v="statement" c="35" />
            </C>
            <C v="default_part">
                <X v="default_stmt" c="36" />
            </C>
            <T v="jump_statement" />
        </Caller>
    </Rule>
    <Rule value="calss_parent" uses="ID,Owner,template_type,type_specifier" usedBy=",class_definition,">
        <Expression>
            <Sequence>
                <Character_Single value=":" />
                <Sub>
                    <OrInclusive>
                        <String value="public" />
                        <String value="protected" />
                        <String value="private" />
                    </OrInclusive>
                </Sub>
                <Sub>
                    <OrInclusive>
                        <Sub>
                            <Sequence>
                                <OneOrMoreOf>
                                    <Sub>
                                        <Sequence>
                                            <Terminating_Rule value="Owner" />
                                            <Character_Single value=":" />
                                            <Character_Single value=":" />
                                        </Sequence>
                                    </Sub>
                                </OneOrMoreOf>
                                <Terminating_Rule value="ID" />
                            </Sequence>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <Terminating_Rule value="template_type" />
                                <Terminating_Rule value="type_specifier" />
                                <Terminating_Rule value="ID" />
                            </OrInclusive>
                        </Sub>
                    </OrInclusive>
                </Sub>
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Character_Single value="," />
                            <Sub>
                                <OrInclusive>
                                    <Sub>
                                        <Sequence>
                                            <OneOrMoreOf>
                                                <Sub>
                                                    <Sequence>
                                                        <Terminating_Rule value="Owner" />
                                                        <Character_Single value=":" />
                                                        <Character_Single value=":" />
                                                    </Sequence>
                                                </Sub>
                                            </OneOrMoreOf>
                                            <Terminating_Rule value="ID" />
                                        </Sequence>
                                    </Sub>
                                    <Sub>
                                        <OrInclusive>
                                            <Terminating_Rule value="template_type" />
                                            <Terminating_Rule value="type_specifier" />
                                            <Terminating_Rule value="ID" />
                                        </OrInclusive>
                                    </Sub>
                                </OrInclusive>
                            </Sub>
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="Owner" />
            <Uses_Terminated value="template_type" />
            <Uses_Terminated value="type_specifier" />
            <UsedBy_Terminated value="class_definition" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="5">
                    <T v="not_reseved" c="6" />
                    <T v="reserved" c="7" />
                </C>
            </C>
            <C v="Owner">
                <C v="ID" c="8" />
                <C v="template_type" c="9">
                    <R v="ID" c="11" />
                    <C v="declaration_specifier" c="12">
                        <C v="USER_TYPE" c="13">
                            <X v="ID" c="19" />
                        </C>
                        <T v="storage_class_specifier" c="14" />
                        <R v="template_type" c="15" />
                        <T v="type_qualifier" c="16" />
                        <R v="Owner" c="17" />
                        <C v="type_specifier" c="18">
                            <X v="struct_specifier" c="20" />
                            <X v="union_specifier" c="21" />
                            <X v="enum_specifier" c="22" />
                        </C>
                    </C>
                </C>
                <R v="type_specifier" c="10" />
            </C>
            <C v="template_type" />
            <C v="type_specifier" />
        </Called>
        <Caller>
            <C v="class_definition">
                <C v="external_declaration" c="2">
                    <T v="translation_unit" c="7" />
                </C>
                <C v="namespace" c="3">
                    <T v="pass" c="8" />
                    <R v="namespace" c="9" />
                    <C v="extern_compiled" c="10">
                        <R v="namespace" c="11" />
                    </C>
                </C>
                <R v="extern_compiled" c="4" />
                <R v="pass" c="5" />
                <C v="p_Block" c="6">
                    <C v="p_ifndef" c="12">
                        <C v="compilerSwitch" c="17">
                            <X v="preprocedure" c="18" />
                        </C>
                    </C>
                    <C v="p_if" c="13">
                        <R v="compilerSwitch" c="19" />
                    </C>
                    <C v="p_elif" c="14">
                        <R v="compilerSwitch" c="20" />
                    </C>
                    <C v="p_else" c="15">
                        <R v="compilerSwitch" c="21" />
                    </C>
                    <C v="p_ifdef" c="16">
                        <R v="compilerSwitch" c="22" />
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="case_expr" uses="constant_expression" usedBy=",case_part,">
        <Expression>
            <Sequence>
                <String value="case" />
                <Terminating_Rule value="constant_expression" />
                <String value=":" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="constant_expression" />
            <UsedBy_Terminated value="case_part" />
        </Properties>
        <Called>
            <C v="constant_expression">
                <C v="conditional_expression" c="2">
                    <C v="logical_or_expression" c="3">
                        <C v="logical_and_expression" c="6">
                            <X v="inclusive_or_expression" c="7" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="4" />
                    <C v="expression" c="5">
                        <C v="assignment_expression" c="8">
                            <T v="assignment_operator" c="9" />
                            <X v="conditional_expression" c="10" />
                            <X v="assignment_expression" c="11" />
                            <X v="cast_expression" c="12" />
                            <X v="unary_expression" c="13" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="case_part">
                <C v="case_stmt" c="2">
                    <R v="case_part" c="3" />
                    <C v="default_part" c="4">
                        <C v="default_stmt" c="6">
                            <X v="statement" c="7" />
                        </C>
                    </C>
                    <C v="statement" c="5">
                        <C v="elif_part" c="8">
                            <X v="if_stmt" c="23" />
                        </C>
                        <C v="else_part" c="9">
                            <X v="if_stmt" c="24" />
                        </C>
                        <C v="p_Block" c="10">
                            <X v="p_ifndef" c="25" />
                            <X v="p_if" c="26" />
                            <X v="p_elif" c="27" />
                            <X v="p_else" c="28" />
                            <X v="p_ifdef" c="29" />
                        </C>
                        <C v="namespace" c="11">
                            <T v="pass" c="30" />
                            <X v="namespace" c="31" />
                            <X v="extern_compiled" c="32" />
                        </C>
                        <X v="extern_compiled" c="12" />
                        <T v="pass" c="13" />
                        <X v="compound_statement" c="14" />
                        <X v="case_part" c="15" />
                        <X v="default_part" c="16" />
                        <X v="if_part" c="17" />
                        <X v="switch_stmt" c="18" />
                        <X v="while_stmt" c="19" />
                        <X v="do_stmt" c="20" />
                        <X v="for_stmt" c="21" />
                        <X v="p_define" c="22" />
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="case_part" uses="break_stmt,case_expr,case_stmt,default_expr,statement" usedBy=",case_stmt," recursiveUses="case_stmt" recursiveUsedBy="case_stmt">
        <Expression>
            <Sequence>
                <OneOrMoreOf>
                    <Terminating_Rule value="case_expr" />
                </OneOrMoreOf>
                <ZeroOrOneOf>
                    <Terminating_Rule value="default_expr" />
                </ZeroOrOneOf>
                <ZeroOrMoreOf>
                    <Sub>
                        <Exclusion>
                            <First>
                                <Terminating_Rule value="statement" />
                            </First>
                            <Second>
                                <Sub>
                                    <OrInclusive>
                                        <Recursive_Rule value="case_stmt" />
                                        <Terminating_Rule value="break_stmt" />
                                    </OrInclusive>
                                </Sub>
                            </Second>
                        </Exclusion>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="break_stmt" />
            <Uses_Terminated value="case_expr" />
            <Uses_Terminated value="default_expr" />
            <Uses_Terminated value="statement" />
            <Uses_Recursive value="case_stmt" />
            <UsedBy_Recursive value="case_stmt" />
        </Properties>
        <Called>
            <C v="break_stmt">
                <T v="semikolon" c="6" />
            </C>
            <C v="case_expr">
                <C v="constant_expression" c="7">
                    <C v="conditional_expression" c="8">
                        <C v="logical_or_expression" c="9">
                            <X v="logical_and_expression" c="12" />
                        </C>
                        <R v="conditional_expression" c="10" />
                        <C v="expression" c="11">
                            <X v="assignment_expression" c="13" />
                        </C>
                    </C>
                </C>
            </C>
            <T v="default_expr" />
            <C v="statement">
                <C v="break_stmt" c="14" />
                <C v="continue_stmt" c="15">
                    <T v="semikolon" c="29" />
                </C>
                <C v="expr_stmt" c="16">
                    <T v="empty_expression" c="30" />
                    <X v="expression" c="31" />
                    <T v="semikolon" c="32" />
                </C>
                <X v="goto_stmt" c="17" />
                <X v="lable_stmt" c="18" />
                <X v="preprocedure" c="19" />
                <X v="return_stmt" c="20" />
                <X v="case_stmt" c="21" />
                <X v="compound_statement" c="22" />
                <X v="default_stmt" c="23" />
                <X v="do_stmt" c="24" />
                <X v="for_stmt" c="25" />
                <X v="if_stmt" c="26" />
                <X v="switch_stmt" c="27" />
                <X v="while_stmt" c="28" />
            </C>
            <C v="case_stmt">
                <X v="break_stmt" c="33" />
                <T v="semikolon" c="34" />
                <X v="case_part" c="35" />
            </C>
        </Called>
        <Caller>
            <C v="case_stmt">
                <R v="case_part" c="2" />
                <C v="default_part" c="3">
                    <C v="default_stmt" c="5">
                        <C v="statement" c="6">
                            <X v="elif_part" c="7" />
                            <X v="else_part" c="8" />
                            <X v="p_Block" c="9" />
                            <X v="namespace" c="10" />
                            <X v="extern_compiled" c="11" />
                            <T v="pass" c="12" />
                            <X v="compound_statement" c="13" />
                            <X v="case_part" c="14" />
                            <X v="default_part" c="15" />
                            <X v="if_part" c="16" />
                            <X v="switch_stmt" c="17" />
                            <X v="while_stmt" c="18" />
                            <X v="do_stmt" c="19" />
                            <X v="for_stmt" c="20" />
                            <X v="p_define" c="21" />
                        </C>
                    </C>
                </C>
                <R v="statement" c="4" />
            </C>
        </Caller>
    </Rule>
    <Rule value="case_stmt" uses="break_stmt,case_part,semikolon" usedBy=",statement,case_part,default_part," recursiveUses="case_part" recursiveUsedBy="statement">
        <Expression>
            <Sequence>
                <OneOrMoreOf>
                    <Recursive_Rule value="case_part" />
                </OneOrMoreOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <ZeroOrOneOf>
                                <Terminating_Rule value="semikolon" />
                            </ZeroOrOneOf>
                            <Terminating_Rule value="break_stmt" />
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="break_stmt" />
            <Uses_Terminated value="semikolon" />
            <Uses_Recursive value="case_part" />
            <UsedBy_Terminated value="case_part" />
            <UsedBy_Terminated value="default_part" />
            <UsedBy_Recursive value="statement" />
        </Properties>
        <Called>
            <C v="break_stmt">
                <T v="semikolon" c="4" />
            </C>
            <T v="semikolon" />
            <C v="case_part">
                <C v="break_stmt" c="5" />
                <C v="case_expr" c="6">
                    <C v="constant_expression" c="10">
                        <C v="conditional_expression" c="11">
                            <X v="logical_or_expression" c="12" />
                            <X v="conditional_expression" c="13" />
                            <X v="expression" c="14" />
                        </C>
                    </C>
                </C>
                <T v="default_expr" c="7" />
                <C v="statement" c="8">
                    <R v="break_stmt" c="15" />
                    <C v="continue_stmt" c="16">
                        <T v="semikolon" c="30" />
                    </C>
                    <X v="expr_stmt" c="17" />
                    <X v="goto_stmt" c="18" />
                    <X v="lable_stmt" c="19" />
                    <X v="preprocedure" c="20" />
                    <X v="return_stmt" c="21" />
                    <X v="case_stmt" c="22" />
                    <X v="compound_statement" c="23" />
                    <X v="default_stmt" c="24" />
                    <X v="do_stmt" c="25" />
                    <X v="for_stmt" c="26" />
                    <X v="if_stmt" c="27" />
                    <X v="switch_stmt" c="28" />
                    <X v="while_stmt" c="29" />
                </C>
                <X v="case_stmt" c="9" />
            </C>
        </Called>
        <Caller>
            <C v="case_part">
                <R v="case_stmt" c="4" />
            </C>
            <C v="default_part">
                <C v="default_stmt" c="5">
                    <C v="statement" c="6">
                        <C v="elif_part" c="7">
                            <X v="if_stmt" c="22" />
                        </C>
                        <C v="else_part" c="8">
                            <X v="if_stmt" c="23" />
                        </C>
                        <C v="p_Block" c="9">
                            <X v="p_ifndef" c="24" />
                            <X v="p_if" c="25" />
                            <X v="p_elif" c="26" />
                            <X v="p_else" c="27" />
                            <X v="p_ifdef" c="28" />
                        </C>
                        <C v="namespace" c="10">
                            <T v="pass" c="29" />
                            <X v="namespace" c="30" />
                            <X v="extern_compiled" c="31" />
                        </C>
                        <X v="extern_compiled" c="11" />
                        <T v="pass" c="12" />
                        <X v="compound_statement" c="13" />
                        <X v="case_part" c="14" />
                        <X v="default_part" c="15" />
                        <X v="if_part" c="16" />
                        <X v="switch_stmt" c="17" />
                        <X v="while_stmt" c="18" />
                        <X v="do_stmt" c="19" />
                        <X v="for_stmt" c="20" />
                        <X v="p_define" c="21" />
                    </C>
                </C>
            </C>
            <C v="statement" />
        </Caller>
    </Rule>
    <Rule value="cast_expression" uses="cast_expression,type_name,unary_expression" usedBy=",unary_expression,cast_expression,multiplicative_expression,assignment_expression,parameter_declaration," recursiveUses="cast_expression,type_name,unary_expression" recursiveUsedBy="unary_expression,cast_expression,multiplicative_expression">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <Recursive_Rule value="type_name" />
                        <ZeroOrOneOf>
                            <Character_Single value="*" />
                        </ZeroOrOneOf>
                        <String value=")" />
                        <Recursive_Rule value="cast_expression" />
                    </Sequence>
                </Sub>
                <Recursive_Rule value="unary_expression" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="cast_expression" />
            <Uses_Recursive value="type_name" />
            <Uses_Recursive value="unary_expression" />
            <UsedBy_Terminated value="assignment_expression" />
            <UsedBy_Terminated value="parameter_declaration" />
            <UsedBy_Recursive value="unary_expression" />
            <UsedBy_Recursive value="cast_expression" />
            <UsedBy_Recursive value="multiplicative_expression" />
        </Properties>
        <Called>
            <C v="cast_expression" />
            <C v="type_name">
                <C v="USER_TYPE" c="4">
                    <C v="ID" c="7">
                        <C v="NON_ID" c="8">
                            <T v="not_reseved" c="9" />
                            <T v="reserved" c="10" />
                        </C>
                    </C>
                </C>
                <C v="abstract_declarator" c="5">
                    <C v="pointer" c="11">
                        <C v="type_qualifier_list" c="13">
                            <T v="type_qualifier" c="15" />
                        </C>
                        <R v="pointer" c="14" />
                    </C>
                    <C v="direct_abstract_declarator" c="12">
                        <C v="constant_expression" c="16">
                            <X v="conditional_expression" c="19" />
                        </C>
                        <C v="parameter_type_list" c="17">
                            <X v="parameter_list" c="20" />
                        </C>
                        <R v="abstract_declarator" c="18" />
                    </C>
                </C>
                <C v="specifier_qualifier_list" c="6">
                    <R v="USER_TYPE" c="21" />
                    <T v="type_qualifier" c="22" />
                    <R v="specifier_qualifier_list" c="23" />
                    <C v="type_specifier" c="24">
                        <C v="struct_specifier" c="25">
                            <X v="ID" c="28" />
                            <X v="declaration" c="29" />
                        </C>
                        <C v="union_specifier" c="26">
                            <X v="ID" c="30" />
                            <X v="declaration" c="31" />
                        </C>
                        <X v="enum_specifier" c="27" />
                    </C>
                </C>
            </C>
            <C v="unary_expression">
                <X v="type_name" c="32" />
                <T v="unary_operator" c="33" />
                <X v="cast_expression" c="34" />
                <X v="postfix_expression" c="35" />
                <X v="unary_expression" c="36" />
            </C>
        </Called>
        <Caller>
            <C v="assignment_expression">
                <C v="initializer" c="6">
                    <C v="init_declarator" c="9">
                        <C v="declaration" c="11">
                            <X v="union_specifier" c="13" />
                            <X v="compound_statement" c="14" />
                            <X v="for_expr" c="15" />
                            <X v="p_Block" c="16" />
                            <X v="function_definition" c="17" />
                            <X v="external_declaration" c="18" />
                            <X v="namespace" c="19" />
                            <X v="extern_compiled" c="20" />
                            <T v="pass" c="21" />
                            <X v="struct_specifier" c="22" />
                        </C>
                        <C v="prototype_parameter" c="12">
                            <X v="prototype_parameter_list" c="23" />
                        </C>
                    </C>
                    <C v="initializer_list" c="10">
                        <R v="initializer" c="24" />
                    </C>
                </C>
                <C v="argument_expression_list" c="7">
                    <C v="postfix_expression_second" c="25">
                        <C v="postfix_expression" c="26">
                            <X v="unary_expression" c="27" />
                        </C>
                    </C>
                </C>
                <R v="assignment_expression" c="8" />
            </C>
            <C v="parameter_declaration">
                <C v="parameter_list" c="28">
                    <C v="parameter_type_list" c="29">
                        <X v="direct_abstract_declarator" c="30" />
                        <X v="direct_parameter_declarator" c="31" />
                    </C>
                </C>
            </C>
            <C v="unary_expression">
                <X v="element_initializer" c="32" />
                <X v="unary_expression" c="33" />
                <X v="cast_expression" c="34" />
                <X v="assignment_expression" c="35" />
                <X v="parameter_declaration" c="36" />
            </C>
            <C v="cast_expression" />
            <C v="multiplicative_expression">
                <X v="additive_expression" c="37" />
            </C>
        </Caller>
    </Rule>
    <Rule value="class_content" uses="private,protected,public" usedBy=",class_definition," recursiveUses="private" recursiveUsedBy="class_definition">
        <Expression>
            <Sequence>
                <Sub>
                    <OrInclusive>
                        <String value="{" />
                        <String value="&lt;%" />
                    </OrInclusive>
                </Sub>
                <OneOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Terminating_Rule value="public" />
                            <Terminating_Rule value="protected" />
                            <Recursive_Rule value="private" />
                        </OrInclusive>
                    </Sub>
                </OneOrMoreOf>
                <Sub>
                    <OrInclusive>
                        <String value="}" />
                        <String value="%&gt;" />
                    </OrInclusive>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="protected" />
            <Uses_Terminated value="public" />
            <Uses_Recursive value="private" />
            <UsedBy_Recursive value="class_definition" />
        </Properties>
        <Called>
            <C v="protected">
                <C v="methode" c="4">
                    <C v="constructor" c="8">
                        <C v="ID" c="13">
                            <X v="NON_ID" c="16" />
                        </C>
                        <C v="prototype_parameter_list" c="14">
                            <X v="prototype_parameter" c="17" />
                        </C>
                        <T v="type_qualifier" c="15" />
                    </C>
                    <C v="destructor" c="9">
                        <R v="ID" c="18" />
                        <C v="direct_parameter_declarator" c="19">
                            <X v="expression" c="21" />
                            <X v="identifier_list" c="22" />
                            <X v="parameter_type_list" c="23" />
                            <X v="declarator" c="24" />
                        </C>
                        <R v="type_qualifier" c="20" />
                    </C>
                    <C v="operator" c="10">
                        <C v="declaration_specifier" c="25">
                            <X v="USER_TYPE" c="29" />
                            <T v="storage_class_specifier" c="30" />
                            <X v="template_type" c="31" />
                            <T v="type_qualifier" c="32" />
                            <X v="Owner" c="33" />
                            <X v="type_specifier" c="34" />
                        </C>
                        <T v="operator_id" c="26" />
                        <X v="prototype_parameter_list" c="27" />
                        <T v="type_qualifier" c="28" />
                    </C>
                    <T v="semikolon" c="11" />
                    <X v="service" c="12" />
                </C>
                <X v="preprocedure" c="5" />
                <X v="property" c="6" />
                <X v="methode_definition" c="7" />
            </C>
            <C v="public">
                <X v="friend" c="35" />
                <X v="methode" c="36" />
                <X v="preprocedure" c="37" />
                <X v="property" c="38" />
                <X v="methode_definition" c="39" />
            </C>
            <C v="private">
                <X v="methode" c="40" />
                <X v="preprocedure" c="41" />
                <X v="property" c="42" />
                <X v="methode_definition" c="43" />
            </C>
        </Called>
        <Caller>
            <C v="class_definition">
                <C v="external_declaration" c="2">
                    <T v="translation_unit" c="7" />
                </C>
                <C v="namespace" c="3">
                    <T v="pass" c="8" />
                    <R v="namespace" c="9" />
                    <C v="extern_compiled" c="10">
                        <R v="namespace" c="11" />
                    </C>
                </C>
                <R v="extern_compiled" c="4" />
                <R v="pass" c="5" />
                <C v="p_Block" c="6">
                    <C v="p_ifndef" c="12">
                        <C v="compilerSwitch" c="17">
                            <X v="preprocedure" c="18" />
                        </C>
                    </C>
                    <C v="p_if" c="13">
                        <R v="compilerSwitch" c="19" />
                    </C>
                    <C v="p_elif" c="14">
                        <R v="compilerSwitch" c="20" />
                    </C>
                    <C v="p_else" c="15">
                        <R v="compilerSwitch" c="21" />
                    </C>
                    <C v="p_ifdef" c="16">
                        <R v="compilerSwitch" c="22" />
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="class_declaration" uses="ID,semikolon" usedBy=",friend,">
        <Expression>
            <Sequence>
                <String value="class" />
                <Terminating_Rule value="ID" />
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="semikolon" />
            <UsedBy_Terminated value="friend" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <T v="semikolon" />
        </Called>
        <Caller>
            <C v="friend">
                <C v="public" c="2">
                    <C v="class_content" c="3">
                        <C v="class_definition" c="4">
                            <X v="external_declaration" c="5" />
                            <X v="namespace" c="6" />
                            <X v="extern_compiled" c="7" />
                            <T v="pass" c="8" />
                            <X v="p_Block" c="9" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="class_definition" uses="ID,calss_parent,class_content,semikolon" usedBy=",p_Block,external_declaration,namespace,extern_compiled,pass," recursiveUses="class_content" recursiveUsedBy="p_Block">
        <Expression>
            <Sequence>
                <String value="class" />
                <Terminating_Rule value="ID" />
                <ZeroOrOneOf>
                    <Terminating_Rule value="calss_parent" />
                </ZeroOrOneOf>
                <Recursive_Rule value="class_content" />
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="calss_parent" />
            <Uses_Terminated value="semikolon" />
            <Uses_Recursive value="class_content" />
            <UsedBy_Terminated value="external_declaration" />
            <UsedBy_Terminated value="namespace" />
            <UsedBy_Terminated value="extern_compiled" />
            <UsedBy_Terminated value="pass" />
            <UsedBy_Recursive value="p_Block" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="5">
                    <T v="not_reseved" c="6" />
                    <T v="reserved" c="7" />
                </C>
            </C>
            <C v="calss_parent">
                <C v="ID" c="8" />
                <C v="Owner" c="9">
                    <R v="ID" c="12" />
                    <C v="template_type" c="13">
                        <R v="ID" c="15" />
                        <C v="declaration_specifier" c="16">
                            <X v="USER_TYPE" c="17" />
                            <T v="storage_class_specifier" c="18" />
                            <X v="template_type" c="19" />
                            <T v="type_qualifier" c="20" />
                            <X v="Owner" c="21" />
                            <X v="type_specifier" c="22" />
                        </C>
                    </C>
                    <C v="type_specifier" c="14">
                        <C v="struct_specifier" c="23">
                            <X v="ID" c="26" />
                            <X v="declaration" c="27" />
                        </C>
                        <C v="union_specifier" c="24">
                            <X v="ID" c="28" />
                            <X v="declaration" c="29" />
                        </C>
                        <C v="enum_specifier" c="25">
                            <X v="ID" c="30" />
                            <X v="enumerator" c="31" />
                        </C>
                    </C>
                </C>
                <X v="template_type" c="10" />
                <X v="type_specifier" c="11" />
            </C>
            <T v="semikolon" />
            <C v="class_content">
                <X v="protected" c="32" />
                <X v="public" c="33" />
                <X v="private" c="34" />
            </C>
        </Called>
        <Caller>
            <C v="external_declaration">
                <T v="translation_unit" c="6" />
            </C>
            <C v="namespace">
                <T v="pass" c="7" />
                <R v="namespace" c="8" />
                <C v="extern_compiled" c="9">
                    <R v="namespace" c="10" />
                </C>
            </C>
            <C v="extern_compiled" />
            <T v="pass" />
            <C v="p_Block">
                <C v="p_ifndef" c="11">
                    <C v="compilerSwitch" c="16">
                        <C v="preprocedure" c="17">
                            <X v="compound_statement" c="18" />
                            <X v="p_Block" c="19" />
                            <X v="external_declaration" c="20" />
                            <X v="public" c="21" />
                            <X v="protected" c="22" />
                            <X v="private" c="23" />
                            <X v="namespace" c="24" />
                            <X v="extern_compiled" c="25" />
                            <T v="pass" c="26" />
                            <X v="statement" c="27" />
                        </C>
                    </C>
                </C>
                <C v="p_if" c="12">
                    <R v="compilerSwitch" c="28" />
                </C>
                <C v="p_elif" c="13">
                    <R v="compilerSwitch" c="29" />
                </C>
                <C v="p_else" c="14">
                    <X v="compilerSwitch" c="30" />
                </C>
                <X v="p_ifdef" c="15" />
            </C>
        </Caller>
    </Rule>
    <Rule value="compilerSwitch" uses="p_elif,p_else,p_endif,p_if,p_ifdef,p_ifndef" usedBy=",preprocedure," recursiveUses="p_elif" recursiveUsedBy="preprocedure">
        <Expression>
            <Sequence>
                <Sub>
                    <OrInclusive>
                        <Terminating_Rule value="p_ifdef" />
                        <Terminating_Rule value="p_ifndef" />
                        <Terminating_Rule value="p_if" />
                    </OrInclusive>
                </Sub>
                <ZeroOrMoreOf>
                    <Recursive_Rule value="p_elif" />
                </ZeroOrMoreOf>
                <ZeroOrOneOf>
                    <Terminating_Rule value="p_else" />
                </ZeroOrOneOf>
                <Terminating_Rule value="p_endif" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_else" />
            <Uses_Terminated value="p_endif" />
            <Uses_Terminated value="p_if" />
            <Uses_Terminated value="p_ifdef" />
            <Uses_Terminated value="p_ifndef" />
            <Uses_Recursive value="p_elif" />
            <UsedBy_Recursive value="preprocedure" />
        </Properties>
        <Called>
            <C v="p_else">
                <T v="p_else_expr" c="7" />
                <C v="p_Block" c="8">
                    <C v="declaration" c="9">
                        <C v="init_declarator" c="17">
                            <X v="Number" c="20" />
                            <X v="initializer" c="21" />
                            <X v="declarator" c="22" />
                        </C>
                        <T v="semikolon" c="18" />
                        <C v="declaration_specifier" c="19">
                            <X v="USER_TYPE" c="23" />
                            <T v="storage_class_specifier" c="24" />
                            <X v="template_type" c="25" />
                            <T v="type_qualifier" c="26" />
                            <X v="Owner" c="27" />
                            <X v="type_specifier" c="28" />
                        </C>
                    </C>
                    <C v="function_definition" c="10">
                        <X v="declaration" c="29" />
                        <X v="declaration_specifier" c="30" />
                        <X v="declarator" c="31" />
                        <X v="element_initializer" c="32" />
                        <X v="compound_statement" c="33" />
                    </C>
                    <X v="function_prototype" c="11" />
                    <X v="p_text" c="12" />
                    <X v="preprocedure" c="13" />
                    <X v="statement" c="14" />
                    <X v="using_namespace" c="15" />
                    <X v="class_definition" c="16" />
                </C>
            </C>
            <C v="p_endif">
                <T v="p_preproend" c="34" />
            </C>
            <C v="p_if">
                <X v="p_if_expr" c="35" />
                <X v="p_Block" c="36" />
            </C>
            <C v="p_ifdef">
                <X v="p_ifdef_expr" c="37" />
                <X v="p_Block" c="38" />
            </C>
            <C v="p_ifndef">
                <X v="p_ifndef_expr" c="39" />
                <X v="p_Block" c="40" />
            </C>
            <C v="p_elif">
                <X v="p_elif_expr" c="41" />
                <X v="p_Block" c="42" />
            </C>
        </Called>
        <Caller>
            <C v="preprocedure">
                <C v="compound_statement" c="2">
                    <C v="methode_definition" c="12">
                        <C v="protected" c="15">
                            <X v="class_content" c="18" />
                        </C>
                        <C v="private" c="16">
                            <X v="class_content" c="19" />
                        </C>
                        <C v="public" c="17">
                            <X v="class_content" c="20" />
                        </C>
                    </C>
                    <C v="statement" c="13">
                        <X v="elif_part" c="21" />
                        <X v="else_part" c="22" />
                        <X v="p_Block" c="23" />
                        <X v="namespace" c="24" />
                        <X v="extern_compiled" c="25" />
                        <T v="pass" c="26" />
                        <X v="compound_statement" c="27" />
                        <X v="case_part" c="28" />
                        <X v="default_part" c="29" />
                        <X v="if_part" c="30" />
                        <X v="switch_stmt" c="31" />
                        <X v="while_stmt" c="32" />
                        <X v="do_stmt" c="33" />
                        <X v="for_stmt" c="34" />
                        <X v="p_define" c="35" />
                    </C>
                    <X v="function_definition" c="14" />
                </C>
                <X v="p_Block" c="3" />
                <X v="external_declaration" c="4" />
                <X v="public" c="5" />
                <X v="protected" c="6" />
                <X v="private" c="7" />
                <X v="namespace" c="8" />
                <X v="extern_compiled" c="9" />
                <T v="pass" c="10" />
                <X v="statement" c="11" />
            </C>
        </Caller>
    </Rule>
    <Rule value="compound_statement" uses="declaration,preprocedure,statement" usedBy=",statement,function_definition,methode_definition," recursiveUses="preprocedure,statement" recursiveUsedBy="statement,function_definition">
        <Expression>
            <Sequence>
                <Sub>
                    <OrInclusive>
                        <String value="{" />
                        <String value="&lt;%" />
                    </OrInclusive>
                </Sub>
                <ZeroOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Terminating_Rule value="declaration" />
                            <Recursive_Rule value="statement" />
                            <Recursive_Rule value="preprocedure" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrMoreOf>
                <Sub>
                    <OrInclusive>
                        <String value="}" />
                        <String value="%&gt;" />
                    </OrInclusive>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="declaration" />
            <Uses_Recursive value="preprocedure" />
            <Uses_Recursive value="statement" />
            <UsedBy_Terminated value="methode_definition" />
            <UsedBy_Recursive value="statement" />
            <UsedBy_Recursive value="function_definition" />
        </Properties>
        <Called>
            <C v="declaration">
                <C v="init_declarator" c="4">
                    <C v="Number" c="7">
                        <T v="CONSTANT_CHAR" c="10" />
                        <T v="CONSTANT_FLT1" c="11" />
                        <T v="CONSTANT_FLT2" c="12" />
                        <T v="CONSTANT_FLT3" c="13" />
                        <T v="CONSTANT_HEX" c="14" />
                        <T v="CONSTANT_INT0" c="15" />
                        <T v="CONSTANT_INT1" c="16" />
                    </C>
                    <C v="initializer" c="8">
                        <C v="assignment_expression" c="17">
                            <T v="assignment_operator" c="19" />
                            <X v="conditional_expression" c="20" />
                            <X v="assignment_expression" c="21" />
                            <X v="cast_expression" c="22" />
                            <X v="unary_expression" c="23" />
                        </C>
                        <C v="initializer_list" c="18">
                            <X v="initializer" c="24" />
                        </C>
                    </C>
                    <C v="declarator" c="9">
                        <C v="pointer" c="25">
                            <X v="type_qualifier_list" c="28" />
                            <X v="pointer" c="29" />
                        </C>
                        <C v="direct_declarator" c="26">
                            <X v="ID" c="30" />
                            <T v="operator_id" c="31" />
                            <X v="owned_ID" c="32" />
                            <T v="type_qualifier" c="33" />
                            <X v="direct_declarator_second" c="34" />
                        </C>
                        <X v="funcPoint_declarator" c="27" />
                    </C>
                </C>
                <T v="semikolon" c="5" />
                <X v="declaration_specifier" c="6" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="35" />
                <X v="p_include" c="36" />
                <X v="p_line" c="37" />
                <X v="p_pragma" c="38" />
                <X v="p_undefine" c="39" />
                <X v="p_warning" c="40" />
                <X v="compilerSwitch" c="41" />
                <X v="p_define" c="42" />
            </C>
            <C v="statement">
                <X v="break_stmt" c="43" />
                <X v="continue_stmt" c="44" />
                <X v="expr_stmt" c="45" />
                <X v="goto_stmt" c="46" />
                <X v="lable_stmt" c="47" />
                <X v="preprocedure" c="48" />
                <X v="return_stmt" c="49" />
                <X v="case_stmt" c="50" />
                <X v="compound_statement" c="51" />
                <X v="default_stmt" c="52" />
                <X v="do_stmt" c="53" />
                <X v="for_stmt" c="54" />
                <X v="if_stmt" c="55" />
                <X v="switch_stmt" c="56" />
                <X v="while_stmt" c="57" />
            </C>
        </Called>
        <Caller>
            <C v="methode_definition">
                <C v="protected" c="4">
                    <C v="class_content" c="7">
                        <C v="class_definition" c="8">
                            <X v="external_declaration" c="9" />
                            <X v="namespace" c="10" />
                            <X v="extern_compiled" c="11" />
                            <T v="pass" c="12" />
                            <X v="p_Block" c="13" />
                        </C>
                    </C>
                </C>
                <C v="private" c="5">
                    <R v="class_content" c="14" />
                </C>
                <C v="public" c="6">
                    <R v="class_content" c="15" />
                </C>
            </C>
            <C v="statement">
                <X v="elif_part" c="16" />
                <X v="else_part" c="17" />
                <X v="p_Block" c="18" />
                <X v="namespace" c="19" />
                <X v="extern_compiled" c="20" />
                <T v="pass" c="21" />
                <X v="compound_statement" c="22" />
                <X v="case_part" c="23" />
                <X v="default_part" c="24" />
                <X v="if_part" c="25" />
                <X v="switch_stmt" c="26" />
                <X v="while_stmt" c="27" />
                <X v="do_stmt" c="28" />
                <X v="for_stmt" c="29" />
                <X v="p_define" c="30" />
            </C>
            <C v="function_definition">
                <X v="external_declaration" c="31" />
                <X v="namespace" c="32" />
                <X v="extern_compiled" c="33" />
                <T v="pass" c="34" />
                <X v="p_Block" c="35" />
            </C>
        </Caller>
    </Rule>
    <Rule value="conditional_expression" uses="conditional_expression,expression,logical_or_expression" usedBy=",conditional_expression,assignment_expression,constant_expression," recursiveUses="conditional_expression,expression" recursiveUsedBy="conditional_expression,assignment_expression">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="logical_or_expression" />
                        <String value="?" />
                        <Recursive_Rule value="expression" />
                        <String value=":" />
                        <Recursive_Rule value="conditional_expression" />
                    </Sequence>
                </Sub>
                <Terminating_Rule value="logical_or_expression" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="logical_or_expression" />
            <Uses_Recursive value="conditional_expression" />
            <Uses_Recursive value="expression" />
            <UsedBy_Terminated value="constant_expression" />
            <UsedBy_Recursive value="conditional_expression" />
            <UsedBy_Recursive value="assignment_expression" />
        </Properties>
        <Called>
            <C v="logical_or_expression">
                <C v="logical_and_expression" c="4">
                    <C v="inclusive_or_expression" c="5">
                        <C v="exclusive_or_expression" c="6">
                            <X v="and_expression" c="7" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="conditional_expression" />
            <C v="expression">
                <C v="assignment_expression" c="8">
                    <T v="assignment_operator" c="9" />
                    <R v="conditional_expression" c="10" />
                    <R v="assignment_expression" c="11" />
                    <C v="cast_expression" c="12">
                        <R v="cast_expression" c="14" />
                        <C v="type_name" c="15">
                            <X v="USER_TYPE" c="17" />
                            <X v="abstract_declarator" c="18" />
                            <X v="specifier_qualifier_list" c="19" />
                        </C>
                        <C v="unary_expression" c="16">
                            <X v="type_name" c="20" />
                            <T v="unary_operator" c="21" />
                            <X v="cast_expression" c="22" />
                            <X v="postfix_expression" c="23" />
                            <X v="unary_expression" c="24" />
                        </C>
                    </C>
                    <R v="unary_expression" c="13" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="constant_expression">
                <C v="struct_declarator" c="4">
                    <C v="struct_declarator_list" c="11">
                        <T v="struct_declaration" c="12" />
                    </C>
                </C>
                <C v="direct_declarator_second" c="5">
                    <C v="direct_declarator" c="13">
                        <C v="funcPoint_declarator" c="14">
                            <X v="declarator" c="16" />
                        </C>
                        <C v="declarator" c="15">
                            <X v="struct_declarator" c="17" />
                            <X v="parameter_declaration" c="18" />
                            <X v="function_definition" c="19" />
                            <X v="init_declarator" c="20" />
                            <X v="direct_parameter_declarator" c="21" />
                        </C>
                    </C>
                </C>
                <C v="direct_abstract_declarator" c="6">
                    <C v="abstract_declarator" c="22">
                        <C v="type_name" c="23">
                            <X v="cast_expression" c="26" />
                            <X v="unary_expression" c="27" />
                        </C>
                        <R v="direct_abstract_declarator" c="24" />
                        <C v="parameter_declaration" c="25">
                            <X v="parameter_list" c="28" />
                        </C>
                    </C>
                </C>
                <C v="case_expr" c="7">
                    <C v="case_part" c="29">
                        <X v="case_stmt" c="30" />
                    </C>
                </C>
                <X v="property_declarator" c="8" />
                <X v="declarator_prp" c="9" />
                <X v="enumerator" c="10" />
            </C>
            <C v="conditional_expression" />
            <C v="assignment_expression">
                <X v="initializer" c="31" />
                <X v="argument_expression_list" c="32" />
                <X v="assignment_expression" c="33" />
            </C>
        </Caller>
    </Rule>
    <Rule value="CONSTANT_CHAR" uses="" usedBy=",Number,">
        <Expression>
            <Sequence>
                <ZeroOrOneOf>
                    <Character_Single value="L" />
                </ZeroOrOneOf>
                <Character_Single value="\&apos;" />
                <OneOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Sub>
                                <Sequence>
                                    <Character_Single value="\\" />
                                    <Sub>
                                        <Exclusion>
                                            <First>
                                                <Primitive value="anychar_p" />
                                            </First>
                                            <Second>
                                                <Sub>
                                                    <OrInclusive>
                                                        <Character_Single value="\r" />
                                                        <Character_Single value="\n" />
                                                    </OrInclusive>
                                                </Sub>
                                            </Second>
                                        </Exclusion>
                                    </Sub>
                                </Sequence>
                            </Sub>
                            <Sub>
                                <Exclusion>
                                    <First>
                                        <Primitive value="anychar_p" />
                                    </First>
                                    <Second>
                                        <Sub>
                                            <OrInclusive>
                                                <Character_Single value="\\" />
                                                <Character_Single value="\&apos;" />
                                            </OrInclusive>
                                        </Sub>
                                    </Second>
                                </Exclusion>
                            </Sub>
                        </OrInclusive>
                    </Sub>
                </OneOrMoreOf>
                <Character_Single value="\&apos;" />
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="Number" />
        </Properties>
        <Called />
        <Caller>
            <C v="Number">
                <C v="primary_expression" c="2">
                    <C v="postfix_expression" c="4">
                        <C v="unary_expression" c="5">
                            <X v="element_initializer" c="6" />
                            <X v="unary_expression" c="7" />
                            <X v="cast_expression" c="8" />
                            <X v="assignment_expression" c="9" />
                            <X v="parameter_declaration" c="10" />
                        </C>
                    </C>
                </C>
                <C v="init_declarator" c="3">
                    <C v="declaration" c="11">
                        <C v="union_specifier" c="13">
                            <X v="type_specifier" c="23" />
                        </C>
                        <C v="compound_statement" c="14">
                            <X v="methode_definition" c="24" />
                            <X v="statement" c="25" />
                            <X v="function_definition" c="26" />
                        </C>
                        <C v="for_expr" c="15">
                            <X v="for_stmt" c="27" />
                        </C>
                        <C v="p_Block" c="16">
                            <X v="p_ifndef" c="28" />
                            <X v="p_if" c="29" />
                            <X v="p_elif" c="30" />
                            <X v="p_else" c="31" />
                            <X v="p_ifdef" c="32" />
                        </C>
                        <X v="function_definition" c="17" />
                        <X v="external_declaration" c="18" />
                        <X v="namespace" c="19" />
                        <X v="extern_compiled" c="20" />
                        <T v="pass" c="21" />
                        <X v="struct_specifier" c="22" />
                    </C>
                    <X v="prototype_parameter" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="constant_expression" uses="conditional_expression" usedBy=",struct_declarator,enumerator,direct_declarator_second,direct_abstract_declarator,case_expr,property_declarator,declarator_prp," recursiveUses="conditional_expression" recursiveUsedBy="enumerator">
        <Expression>
            <Recursive_Rule value="conditional_expression" />
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="conditional_expression" />
            <UsedBy_Terminated value="struct_declarator" />
            <UsedBy_Terminated value="direct_declarator_second" />
            <UsedBy_Terminated value="direct_abstract_declarator" />
            <UsedBy_Terminated value="case_expr" />
            <UsedBy_Terminated value="property_declarator" />
            <UsedBy_Terminated value="declarator_prp" />
            <UsedBy_Recursive value="enumerator" />
        </Properties>
        <Called>
            <C v="conditional_expression">
                <C v="logical_or_expression" c="2">
                    <C v="logical_and_expression" c="5">
                        <C v="inclusive_or_expression" c="6">
                            <X v="exclusive_or_expression" c="7" />
                        </C>
                    </C>
                </C>
                <R v="conditional_expression" c="3" />
                <C v="expression" c="4">
                    <C v="assignment_expression" c="8">
                        <T v="assignment_operator" c="9" />
                        <R v="conditional_expression" c="10" />
                        <R v="assignment_expression" c="11" />
                        <C v="cast_expression" c="12">
                            <X v="cast_expression" c="14" />
                            <X v="type_name" c="15" />
                            <X v="unary_expression" c="16" />
                        </C>
                        <C v="unary_expression" c="13">
                            <X v="type_name" c="17" />
                            <T v="unary_operator" c="18" />
                            <X v="cast_expression" c="19" />
                            <X v="postfix_expression" c="20" />
                            <X v="unary_expression" c="21" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="struct_declarator">
                <C v="struct_declarator_list" c="8">
                    <T v="struct_declaration" c="9" />
                </C>
            </C>
            <C v="direct_declarator_second">
                <C v="direct_declarator" c="10">
                    <C v="funcPoint_declarator" c="11">
                        <C v="declarator" c="13">
                            <X v="struct_declarator" c="14" />
                            <X v="parameter_declaration" c="15" />
                            <X v="function_definition" c="16" />
                            <X v="init_declarator" c="17" />
                            <X v="direct_parameter_declarator" c="18" />
                        </C>
                    </C>
                    <R v="declarator" c="12" />
                </C>
            </C>
            <C v="direct_abstract_declarator">
                <C v="abstract_declarator" c="19">
                    <C v="type_name" c="20">
                        <C v="cast_expression" c="23">
                            <X v="assignment_expression" c="25" />
                            <X v="parameter_declaration" c="26" />
                            <X v="unary_expression" c="27" />
                            <X v="cast_expression" c="28" />
                            <X v="multiplicative_expression" c="29" />
                        </C>
                        <C v="unary_expression" c="24">
                            <X v="element_initializer" c="30" />
                            <X v="unary_expression" c="31" />
                            <X v="cast_expression" c="32" />
                            <X v="assignment_expression" c="33" />
                            <X v="parameter_declaration" c="34" />
                        </C>
                    </C>
                    <X v="direct_abstract_declarator" c="21" />
                    <X v="parameter_declaration" c="22" />
                </C>
            </C>
            <C v="case_expr">
                <X v="case_part" c="35" />
            </C>
            <C v="property_declarator">
                <X v="property" c="36" />
            </C>
            <C v="declarator_prp">
                <X v="property_declarator" c="37" />
            </C>
            <C v="enumerator">
                <X v="enum_specifier" c="38" />
            </C>
        </Caller>
    </Rule>
    <Rule value="CONSTANT_FLT1" uses="" usedBy=",Number,">
        <Expression>
            <Sequence>
                <OneOrMoreOf>
                    <Sub>
                        <Character_Range value1="0" value2="9" />
                    </Sub>
                </OneOrMoreOf>
                <Sub>
                    <Sequence>
                        <Sub>
                            <OrInclusive>
                                <Character_Single value="E" />
                                <Character_Single value="e" />
                            </OrInclusive>
                        </Sub>
                        <ZeroOrOneOf>
                            <Sub>
                                <OrInclusive>
                                    <Character_Single value="+" />
                                    <Character_Single value="-" />
                                </OrInclusive>
                            </Sub>
                        </ZeroOrOneOf>
                        <OneOrMoreOf>
                            <Character_Range value1="0" value2="9" />
                        </OneOrMoreOf>
                    </Sequence>
                </Sub>
                <ZeroOrOneOf>
                    <Sub>
                        <Sub>
                            <OrInclusive>
                                <Character_Single value="f" />
                                <Character_Single value="F" />
                                <Character_Single value="l" />
                                <Character_Single value="L" />
                            </OrInclusive>
                        </Sub>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="Number" />
        </Properties>
        <Called />
        <Caller>
            <C v="Number">
                <C v="primary_expression" c="2">
                    <C v="postfix_expression" c="4">
                        <C v="unary_expression" c="5">
                            <X v="element_initializer" c="6" />
                            <X v="unary_expression" c="7" />
                            <X v="cast_expression" c="8" />
                            <X v="assignment_expression" c="9" />
                            <X v="parameter_declaration" c="10" />
                        </C>
                    </C>
                </C>
                <C v="init_declarator" c="3">
                    <C v="declaration" c="11">
                        <C v="union_specifier" c="13">
                            <X v="type_specifier" c="23" />
                        </C>
                        <C v="compound_statement" c="14">
                            <X v="methode_definition" c="24" />
                            <X v="statement" c="25" />
                            <X v="function_definition" c="26" />
                        </C>
                        <C v="for_expr" c="15">
                            <X v="for_stmt" c="27" />
                        </C>
                        <C v="p_Block" c="16">
                            <X v="p_ifndef" c="28" />
                            <X v="p_if" c="29" />
                            <X v="p_elif" c="30" />
                            <X v="p_else" c="31" />
                            <X v="p_ifdef" c="32" />
                        </C>
                        <X v="function_definition" c="17" />
                        <X v="external_declaration" c="18" />
                        <X v="namespace" c="19" />
                        <X v="extern_compiled" c="20" />
                        <T v="pass" c="21" />
                        <X v="struct_specifier" c="22" />
                    </C>
                    <X v="prototype_parameter" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="CONSTANT_FLT2" uses="" usedBy=",Number,">
        <Expression>
            <Sequence>
                <ZeroOrMoreOf>
                    <Sub>
                        <Character_Range value1="0" value2="9" />
                    </Sub>
                </ZeroOrMoreOf>
                <Character_Single value="." />
                <OneOrMoreOf>
                    <Sub>
                        <Character_Range value1="0" value2="9" />
                    </Sub>
                </OneOrMoreOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <Character_Single value="E" />
                                    <Character_Single value="e" />
                                </OrInclusive>
                            </Sub>
                            <ZeroOrOneOf>
                                <Sub>
                                    <OrInclusive>
                                        <Character_Single value="+" />
                                        <Character_Single value="-" />
                                    </OrInclusive>
                                </Sub>
                            </ZeroOrOneOf>
                            <OneOrMoreOf>
                                <Character_Range value1="0" value2="9" />
                            </OneOrMoreOf>
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sub>
                            <OrInclusive>
                                <Character_Single value="f" />
                                <Character_Single value="F" />
                                <Character_Single value="l" />
                                <Character_Single value="L" />
                            </OrInclusive>
                        </Sub>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="Number" />
        </Properties>
        <Called />
        <Caller>
            <C v="Number">
                <C v="primary_expression" c="2">
                    <C v="postfix_expression" c="4">
                        <C v="unary_expression" c="5">
                            <X v="element_initializer" c="6" />
                            <X v="unary_expression" c="7" />
                            <X v="cast_expression" c="8" />
                            <X v="assignment_expression" c="9" />
                            <X v="parameter_declaration" c="10" />
                        </C>
                    </C>
                </C>
                <C v="init_declarator" c="3">
                    <C v="declaration" c="11">
                        <C v="union_specifier" c="13">
                            <X v="type_specifier" c="23" />
                        </C>
                        <C v="compound_statement" c="14">
                            <X v="methode_definition" c="24" />
                            <X v="statement" c="25" />
                            <X v="function_definition" c="26" />
                        </C>
                        <C v="for_expr" c="15">
                            <X v="for_stmt" c="27" />
                        </C>
                        <C v="p_Block" c="16">
                            <X v="p_ifndef" c="28" />
                            <X v="p_if" c="29" />
                            <X v="p_elif" c="30" />
                            <X v="p_else" c="31" />
                            <X v="p_ifdef" c="32" />
                        </C>
                        <X v="function_definition" c="17" />
                        <X v="external_declaration" c="18" />
                        <X v="namespace" c="19" />
                        <X v="extern_compiled" c="20" />
                        <T v="pass" c="21" />
                        <X v="struct_specifier" c="22" />
                    </C>
                    <X v="prototype_parameter" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="CONSTANT_FLT3" uses="" usedBy=",Number,">
        <Expression>
            <Sequence>
                <OneOrMoreOf>
                    <Sub>
                        <Character_Range value1="0" value2="9" />
                    </Sub>
                </OneOrMoreOf>
                <Character_Single value="." />
                <ZeroOrMoreOf>
                    <Sub>
                        <Character_Range value1="0" value2="9" />
                    </Sub>
                </ZeroOrMoreOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <Character_Single value="E" />
                                    <Character_Single value="e" />
                                </OrInclusive>
                            </Sub>
                            <ZeroOrOneOf>
                                <Sub>
                                    <OrInclusive>
                                        <Character_Single value="+" />
                                        <Character_Single value="-" />
                                    </OrInclusive>
                                </Sub>
                            </ZeroOrOneOf>
                            <OneOrMoreOf>
                                <Character_Range value1="0" value2="9" />
                            </OneOrMoreOf>
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sub>
                            <OrInclusive>
                                <Character_Single value="f" />
                                <Character_Single value="F" />
                                <Character_Single value="l" />
                                <Character_Single value="L" />
                            </OrInclusive>
                        </Sub>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="Number" />
        </Properties>
        <Called />
        <Caller>
            <C v="Number">
                <C v="primary_expression" c="2">
                    <C v="postfix_expression" c="4">
                        <C v="unary_expression" c="5">
                            <X v="element_initializer" c="6" />
                            <X v="unary_expression" c="7" />
                            <X v="cast_expression" c="8" />
                            <X v="assignment_expression" c="9" />
                            <X v="parameter_declaration" c="10" />
                        </C>
                    </C>
                </C>
                <C v="init_declarator" c="3">
                    <C v="declaration" c="11">
                        <C v="union_specifier" c="13">
                            <X v="type_specifier" c="23" />
                        </C>
                        <C v="compound_statement" c="14">
                            <X v="methode_definition" c="24" />
                            <X v="statement" c="25" />
                            <X v="function_definition" c="26" />
                        </C>
                        <C v="for_expr" c="15">
                            <X v="for_stmt" c="27" />
                        </C>
                        <C v="p_Block" c="16">
                            <X v="p_ifndef" c="28" />
                            <X v="p_if" c="29" />
                            <X v="p_elif" c="30" />
                            <X v="p_else" c="31" />
                            <X v="p_ifdef" c="32" />
                        </C>
                        <X v="function_definition" c="17" />
                        <X v="external_declaration" c="18" />
                        <X v="namespace" c="19" />
                        <X v="extern_compiled" c="20" />
                        <T v="pass" c="21" />
                        <X v="struct_specifier" c="22" />
                    </C>
                    <X v="prototype_parameter" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="CONSTANT_HEX" uses="" usedBy=",Number,">
        <Expression>
            <Sequence>
                <Character_Single value="0" />
                <Sub>
                    <OrInclusive>
                        <Character_Single value="x" />
                        <Character_Single value="X" />
                    </OrInclusive>
                </Sub>
                <OneOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Character_Range value1="a" value2="f" />
                            <Character_Range value1="A" value2="F" />
                            <Character_Range value1="0" value2="9" />
                        </OrInclusive>
                    </Sub>
                </OneOrMoreOf>
                <ZeroOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Character_Single value="u" />
                            <Character_Single value="U" />
                            <Character_Single value="l" />
                            <Character_Single value="L" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="Number" />
        </Properties>
        <Called />
        <Caller>
            <C v="Number">
                <C v="primary_expression" c="2">
                    <C v="postfix_expression" c="4">
                        <C v="unary_expression" c="5">
                            <X v="element_initializer" c="6" />
                            <X v="unary_expression" c="7" />
                            <X v="cast_expression" c="8" />
                            <X v="assignment_expression" c="9" />
                            <X v="parameter_declaration" c="10" />
                        </C>
                    </C>
                </C>
                <C v="init_declarator" c="3">
                    <C v="declaration" c="11">
                        <C v="union_specifier" c="13">
                            <X v="type_specifier" c="23" />
                        </C>
                        <C v="compound_statement" c="14">
                            <X v="methode_definition" c="24" />
                            <X v="statement" c="25" />
                            <X v="function_definition" c="26" />
                        </C>
                        <C v="for_expr" c="15">
                            <X v="for_stmt" c="27" />
                        </C>
                        <C v="p_Block" c="16">
                            <X v="p_ifndef" c="28" />
                            <X v="p_if" c="29" />
                            <X v="p_elif" c="30" />
                            <X v="p_else" c="31" />
                            <X v="p_ifdef" c="32" />
                        </C>
                        <X v="function_definition" c="17" />
                        <X v="external_declaration" c="18" />
                        <X v="namespace" c="19" />
                        <X v="extern_compiled" c="20" />
                        <T v="pass" c="21" />
                        <X v="struct_specifier" c="22" />
                    </C>
                    <X v="prototype_parameter" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="CONSTANT_INT0" uses="" usedBy=",Number,">
        <Expression>
            <Sequence>
                <Character_Single value="0" />
                <OneOrMoreOf>
                    <Sub>
                        <Character_Range value1="0" value2="9" />
                    </Sub>
                </OneOrMoreOf>
                <ZeroOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Character_Single value="u" />
                            <Character_Single value="U" />
                            <Character_Single value="l" />
                            <Character_Single value="L" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="Number" />
        </Properties>
        <Called />
        <Caller>
            <C v="Number">
                <C v="primary_expression" c="2">
                    <C v="postfix_expression" c="4">
                        <C v="unary_expression" c="5">
                            <X v="element_initializer" c="6" />
                            <X v="unary_expression" c="7" />
                            <X v="cast_expression" c="8" />
                            <X v="assignment_expression" c="9" />
                            <X v="parameter_declaration" c="10" />
                        </C>
                    </C>
                </C>
                <C v="init_declarator" c="3">
                    <C v="declaration" c="11">
                        <C v="union_specifier" c="13">
                            <X v="type_specifier" c="23" />
                        </C>
                        <C v="compound_statement" c="14">
                            <X v="methode_definition" c="24" />
                            <X v="statement" c="25" />
                            <X v="function_definition" c="26" />
                        </C>
                        <C v="for_expr" c="15">
                            <X v="for_stmt" c="27" />
                        </C>
                        <C v="p_Block" c="16">
                            <X v="p_ifndef" c="28" />
                            <X v="p_if" c="29" />
                            <X v="p_elif" c="30" />
                            <X v="p_else" c="31" />
                            <X v="p_ifdef" c="32" />
                        </C>
                        <X v="function_definition" c="17" />
                        <X v="external_declaration" c="18" />
                        <X v="namespace" c="19" />
                        <X v="extern_compiled" c="20" />
                        <T v="pass" c="21" />
                        <X v="struct_specifier" c="22" />
                    </C>
                    <X v="prototype_parameter" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="CONSTANT_INT1" uses="" usedBy=",Number,">
        <Expression>
            <Sequence>
                <OneOrMoreOf>
                    <Character_Range value1="0" value2="9" />
                </OneOrMoreOf>
                <ZeroOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Character_Single value="u" />
                            <Character_Single value="U" />
                            <Character_Single value="l" />
                            <Character_Single value="L" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="Number" />
        </Properties>
        <Called />
        <Caller>
            <C v="Number">
                <C v="primary_expression" c="2">
                    <C v="postfix_expression" c="4">
                        <C v="unary_expression" c="5">
                            <X v="element_initializer" c="6" />
                            <X v="unary_expression" c="7" />
                            <X v="cast_expression" c="8" />
                            <X v="assignment_expression" c="9" />
                            <X v="parameter_declaration" c="10" />
                        </C>
                    </C>
                </C>
                <C v="init_declarator" c="3">
                    <C v="declaration" c="11">
                        <C v="union_specifier" c="13">
                            <X v="type_specifier" c="23" />
                        </C>
                        <C v="compound_statement" c="14">
                            <X v="methode_definition" c="24" />
                            <X v="statement" c="25" />
                            <X v="function_definition" c="26" />
                        </C>
                        <C v="for_expr" c="15">
                            <X v="for_stmt" c="27" />
                        </C>
                        <C v="p_Block" c="16">
                            <X v="p_ifndef" c="28" />
                            <X v="p_if" c="29" />
                            <X v="p_elif" c="30" />
                            <X v="p_else" c="31" />
                            <X v="p_ifdef" c="32" />
                        </C>
                        <X v="function_definition" c="17" />
                        <X v="external_declaration" c="18" />
                        <X v="namespace" c="19" />
                        <X v="extern_compiled" c="20" />
                        <T v="pass" c="21" />
                        <X v="struct_specifier" c="22" />
                    </C>
                    <X v="prototype_parameter" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="constructor" uses="ID,prototype_parameter_list,type_qualifier" usedBy=",methode,methode_definition,">
        <Expression>
            <Sequence>
                <ZeroOrOneOf>
                    <Sub>
                        <OrInclusive>
                            <String value="virtual" />
                            <String value="static" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrOneOf>
                <Terminating_Rule value="ID" />
                <Terminating_Rule value="prototype_parameter_list" />
                <ZeroOrMoreOf>
                    <Terminating_Rule value="type_qualifier" />
                </ZeroOrMoreOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Character_Single value="=" />
                            <Character_Single value="0" />
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="prototype_parameter_list" />
            <Uses_Terminated value="type_qualifier" />
            <UsedBy_Terminated value="methode" />
            <UsedBy_Terminated value="methode_definition" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="4">
                    <T v="not_reseved" c="5" />
                    <T v="reserved" c="6" />
                </C>
            </C>
            <C v="prototype_parameter_list">
                <C v="prototype_parameter" c="7">
                    <C v="init_declarator" c="8">
                        <C v="Number" c="11">
                            <T v="CONSTANT_CHAR" c="14" />
                            <T v="CONSTANT_FLT1" c="15" />
                            <T v="CONSTANT_FLT2" c="16" />
                            <T v="CONSTANT_FLT3" c="17" />
                            <T v="CONSTANT_HEX" c="18" />
                            <T v="CONSTANT_INT0" c="19" />
                            <T v="CONSTANT_INT1" c="20" />
                        </C>
                        <C v="initializer" c="12">
                            <X v="assignment_expression" c="21" />
                            <X v="initializer_list" c="22" />
                        </C>
                        <C v="declarator" c="13">
                            <X v="pointer" c="23" />
                            <X v="direct_declarator" c="24" />
                            <X v="funcPoint_declarator" c="25" />
                        </C>
                    </C>
                    <C v="parameter_function" c="9">
                        <C v="direct_parameter_declarator" c="26">
                            <X v="expression" c="27" />
                            <X v="identifier_list" c="28" />
                            <X v="parameter_type_list" c="29" />
                            <X v="declarator" c="30" />
                        </C>
                    </C>
                    <X v="declaration_specifier" c="10" />
                </C>
            </C>
            <T v="type_qualifier" />
        </Called>
        <Caller>
            <C v="methode">
                <C v="public" c="3">
                    <C v="class_content" c="7">
                        <C v="class_definition" c="8">
                            <X v="external_declaration" c="9" />
                            <X v="namespace" c="10" />
                            <X v="extern_compiled" c="11" />
                            <T v="pass" c="12" />
                            <X v="p_Block" c="13" />
                        </C>
                    </C>
                </C>
                <C v="protected" c="4">
                    <R v="class_content" c="14" />
                </C>
                <C v="private" c="5">
                    <R v="class_content" c="15" />
                </C>
                <C v="property" c="6">
                    <R v="public" c="16" />
                    <R v="protected" c="17" />
                    <R v="private" c="18" />
                </C>
            </C>
            <C v="methode_definition">
                <C v="protected" c="19" />
                <C v="private" c="20" />
                <C v="public" c="21" />
            </C>
        </Caller>
    </Rule>
    <Rule value="continue_stmt" uses="semikolon" usedBy=",statement,jump_statement,">
        <Expression>
            <Sequence>
                <String value="continue" />
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="1" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="semikolon" />
            <UsedBy_Terminated value="statement" />
            <UsedBy_Terminated value="jump_statement" />
        </Properties>
        <Called>
            <T v="semikolon" />
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="3">
                    <C v="if_stmt" c="18">
                        <R v="statement" c="19" />
                        <C v="else_part" c="20">
                            <X v="if_stmt" c="21" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="4" />
                <C v="p_Block" c="5">
                    <C v="p_ifndef" c="22">
                        <C v="compilerSwitch" c="27">
                            <X v="preprocedure" c="28" />
                        </C>
                    </C>
                    <C v="p_if" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_elif" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_else" c="25" />
                    <X v="p_ifdef" c="26" />
                </C>
                <X v="namespace" c="6" />
                <X v="extern_compiled" c="7" />
                <T v="pass" c="8" />
                <X v="compound_statement" c="9" />
                <X v="case_part" c="10" />
                <X v="default_part" c="11" />
                <X v="if_part" c="12" />
                <X v="switch_stmt" c="13" />
                <X v="while_stmt" c="14" />
                <X v="do_stmt" c="15" />
                <X v="for_stmt" c="16" />
                <X v="p_define" c="17" />
            </C>
            <T v="jump_statement" />
        </Caller>
    </Rule>
    <Rule value="declaration" uses="declaration_specifier,init_declarator,semikolon" usedBy=",struct_specifier,union_specifier,compound_statement,for_expr,p_Block,function_definition,external_declaration,namespace,extern_compiled,pass," recursiveUses="declaration_specifier" recursiveUsedBy="struct_specifier">
        <Expression>
            <Sequence>
                <Recursive_Rule value="declaration_specifier" />
                <Terminating_Rule value="init_declarator" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <String value="," />
                            <Terminating_Rule value="init_declarator" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="init_declarator" />
            <Uses_Terminated value="semikolon" />
            <Uses_Recursive value="declaration_specifier" />
            <UsedBy_Terminated value="union_specifier" />
            <UsedBy_Terminated value="compound_statement" />
            <UsedBy_Terminated value="for_expr" />
            <UsedBy_Terminated value="p_Block" />
            <UsedBy_Terminated value="function_definition" />
            <UsedBy_Terminated value="external_declaration" />
            <UsedBy_Terminated value="namespace" />
            <UsedBy_Terminated value="extern_compiled" />
            <UsedBy_Terminated value="pass" />
            <UsedBy_Recursive value="struct_specifier" />
        </Properties>
        <Called>
            <C v="init_declarator">
                <C v="Number" c="4">
                    <T v="CONSTANT_CHAR" c="7" />
                    <T v="CONSTANT_FLT1" c="8" />
                    <T v="CONSTANT_FLT2" c="9" />
                    <T v="CONSTANT_FLT3" c="10" />
                    <T v="CONSTANT_HEX" c="11" />
                    <T v="CONSTANT_INT0" c="12" />
                    <T v="CONSTANT_INT1" c="13" />
                </C>
                <C v="initializer" c="5">
                    <C v="assignment_expression" c="14">
                        <T v="assignment_operator" c="16" />
                        <C v="conditional_expression" c="17">
                            <X v="logical_or_expression" c="21" />
                            <X v="conditional_expression" c="22" />
                            <X v="expression" c="23" />
                        </C>
                        <R v="assignment_expression" c="18" />
                        <C v="cast_expression" c="19">
                            <X v="cast_expression" c="24" />
                            <X v="type_name" c="25" />
                            <X v="unary_expression" c="26" />
                        </C>
                        <C v="unary_expression" c="20">
                            <X v="type_name" c="27" />
                            <T v="unary_operator" c="28" />
                            <X v="cast_expression" c="29" />
                            <X v="postfix_expression" c="30" />
                            <X v="unary_expression" c="31" />
                        </C>
                    </C>
                    <X v="initializer_list" c="15" />
                </C>
                <X v="declarator" c="6" />
            </C>
            <T v="semikolon" />
            <C v="declaration_specifier">
                <X v="USER_TYPE" c="32" />
                <T v="storage_class_specifier" c="33" />
                <X v="template_type" c="34" />
                <T v="type_qualifier" c="35" />
                <X v="Owner" c="36" />
                <X v="type_specifier" c="37" />
            </C>
        </Called>
        <Caller>
            <C v="union_specifier">
                <C v="type_specifier" c="11">
                    <C v="declaration_specifier" c="12">
                        <C v="parameter_declaration" c="17">
                            <X v="parameter_list" c="26" />
                        </C>
                        <C v="function_definition" c="18">
                            <X v="external_declaration" c="27" />
                            <X v="namespace" c="28" />
                            <X v="extern_compiled" c="29" />
                            <T v="pass" c="30" />
                            <X v="p_Block" c="31" />
                        </C>
                        <X v="prototype_parameter" c="19" />
                        <X v="function_prototype" c="20" />
                        <X v="operator" c="21" />
                        <X v="service" c="22" />
                        <X v="property" c="23" />
                        <X v="declaration" c="24" />
                        <X v="template_type" c="25" />
                    </C>
                    <X v="specifier_qualifier_list" c="13" />
                    <X v="Owner" c="14" />
                    <X v="calss_parent" c="15" />
                    <X v="primary_expression" c="16" />
                </C>
            </C>
            <C v="compound_statement">
                <X v="methode_definition" c="32" />
                <X v="statement" c="33" />
                <X v="function_definition" c="34" />
            </C>
            <C v="for_expr">
                <X v="for_stmt" c="35" />
            </C>
            <C v="p_Block">
                <X v="p_ifndef" c="36" />
                <X v="p_if" c="37" />
                <X v="p_elif" c="38" />
                <X v="p_else" c="39" />
                <X v="p_ifdef" c="40" />
            </C>
            <C v="function_definition" />
            <C v="external_declaration">
                <T v="translation_unit" c="41" />
            </C>
            <C v="namespace">
                <T v="pass" c="42" />
                <X v="namespace" c="43" />
                <X v="extern_compiled" c="44" />
            </C>
            <C v="extern_compiled">
                <X v="namespace" c="45" />
            </C>
            <T v="pass" />
            <C v="struct_specifier">
                <X v="type_specifier" c="46" />
            </C>
        </Caller>
    </Rule>
    <Rule value="declaration_specifier" uses="USER_TYPE,storage_class_specifier,type_qualifier,type_specifier" usedBy=",declaration,parameter_declaration,function_definition,prototype_parameter,function_prototype,template_type,operator,service,property," recursiveUses="Owner,type_specifier" recursiveUsedBy="declaration,template_type">
        <Expression>
            <Sub>
                <Sequence>
                    <ZeroOrOneOf>
                        <Terminating_Rule value="storage_class_specifier" />
                    </ZeroOrOneOf>
                    <ZeroOrMoreOf>
                        <Terminating_Rule value="type_qualifier" />
                    </ZeroOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Recursive_Rule value="type_specifier" />
                            <Terminating_Rule value="USER_TYPE" />
                        </OrInclusive>
                    </Sub>
                    <ZeroOrMoreOf>
                        <Terminating_Rule value="type_qualifier" />
                    </ZeroOrMoreOf>
                    <ZeroOrMoreOf>
                        <Sub>
                            <OrInclusive>
                                <Character_Single value="&amp;" />
                                <Character_Single value="*" />
                            </OrInclusive>
                        </Sub>
                    </ZeroOrMoreOf>
                    <ZeroOrMoreOf>
                        <Terminating_Rule value="type_qualifier" />
                    </ZeroOrMoreOf>
                </Sequence>
            </Sub>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="USER_TYPE" />
            <Uses_Terminated value="storage_class_specifier" />
            <Uses_Terminated value="type_qualifier" />
            <Uses_Recursive value="Owner" />
            <Uses_Recursive value="type_specifier" />
            <UsedBy_Terminated value="parameter_declaration" />
            <UsedBy_Terminated value="function_definition" />
            <UsedBy_Terminated value="prototype_parameter" />
            <UsedBy_Terminated value="function_prototype" />
            <UsedBy_Terminated value="operator" />
            <UsedBy_Terminated value="service" />
            <UsedBy_Terminated value="property" />
            <UsedBy_Recursive value="declaration" />
            <UsedBy_Recursive value="template_type" />
        </Properties>
        <Called>
            <C v="USER_TYPE">
                <C v="ID" c="6">
                    <C v="NON_ID" c="7">
                        <T v="not_reseved" c="8" />
                        <T v="reserved" c="9" />
                    </C>
                </C>
            </C>
            <T v="storage_class_specifier" />
            <T v="type_qualifier" />
            <C v="Owner">
                <C v="ID" c="10" />
                <C v="template_type" c="11">
                    <R v="ID" c="13" />
                    <R v="declaration_specifier" c="14" />
                </C>
                <C v="type_specifier" c="12">
                    <C v="struct_specifier" c="15">
                        <R v="ID" c="18" />
                        <C v="declaration" c="19">
                            <X v="init_declarator" c="20" />
                            <T v="semikolon" c="21" />
                            <X v="declaration_specifier" c="22" />
                        </C>
                    </C>
                    <C v="union_specifier" c="16">
                        <R v="ID" c="23" />
                        <R v="declaration" c="24" />
                    </C>
                    <C v="enum_specifier" c="17">
                        <R v="ID" c="25" />
                        <C v="enumerator" c="26">
                            <X v="ID" c="27" />
                            <X v="constant_expression" c="28" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="type_specifier" />
        </Called>
        <Caller>
            <C v="parameter_declaration">
                <C v="parameter_list" c="10">
                    <C v="parameter_type_list" c="11">
                        <C v="direct_abstract_declarator" c="12">
                            <X v="abstract_declarator" c="14" />
                        </C>
                        <C v="direct_parameter_declarator" c="13">
                            <X v="parameter_function" c="15" />
                            <X v="p_declarator" c="16" />
                            <X v="destructor" c="17" />
                            <X v="direct_declarator_second" c="18" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="function_definition">
                <C v="external_declaration" c="19">
                    <T v="translation_unit" c="24" />
                </C>
                <C v="namespace" c="20">
                    <T v="pass" c="25" />
                    <R v="namespace" c="26" />
                    <C v="extern_compiled" c="27">
                        <R v="namespace" c="28" />
                    </C>
                </C>
                <R v="extern_compiled" c="21" />
                <R v="pass" c="22" />
                <C v="p_Block" c="23">
                    <X v="p_ifndef" c="29" />
                    <X v="p_if" c="30" />
                    <X v="p_elif" c="31" />
                    <X v="p_else" c="32" />
                    <X v="p_ifdef" c="33" />
                </C>
            </C>
            <C v="prototype_parameter">
                <X v="prototype_parameter_list" c="34" />
            </C>
            <C v="function_prototype">
                <X v="p_Block" c="35" />
                <X v="external_declaration" c="36" />
                <X v="friend" c="37" />
                <X v="namespace" c="38" />
                <X v="extern_compiled" c="39" />
                <T v="pass" c="40" />
            </C>
            <C v="operator">
                <X v="methode" c="41" />
                <X v="methode_definition" c="42" />
            </C>
            <C v="service">
                <X v="methode" c="43" />
                <X v="methode_definition" c="44" />
            </C>
            <C v="property">
                <X v="public" c="45" />
                <X v="protected" c="46" />
                <X v="private" c="47" />
            </C>
            <C v="declaration">
                <X v="union_specifier" c="48" />
                <X v="compound_statement" c="49" />
                <X v="for_expr" c="50" />
                <X v="p_Block" c="51" />
                <X v="function_definition" c="52" />
                <X v="external_declaration" c="53" />
                <X v="namespace" c="54" />
                <X v="extern_compiled" c="55" />
                <T v="pass" c="56" />
                <X v="struct_specifier" c="57" />
            </C>
            <C v="template_type">
                <X v="declaration_specifier" c="58" />
                <T v="struct_declaration" c="59" />
                <X v="Owner" c="60" />
                <X v="calss_parent" c="61" />
                <X v="primary_expression" c="62" />
            </C>
        </Caller>
    </Rule>
    <Rule value="declaration_specifier" uses="Owner,USER_TYPE,storage_class_specifier,template_type,type_qualifier,type_specifier" usedBy=",declaration,parameter_declaration,function_definition,prototype_parameter,function_prototype,template_type,operator,service,property," recursiveUses="Owner,type_specifier" recursiveUsedBy="declaration,template_type">
        <Expression>
            <Sub>
                <Sequence>
                    <ZeroOrOneOf>
                        <Terminating_Rule value="storage_class_specifier" />
                    </ZeroOrOneOf>
                    <ZeroOrMoreOf>
                        <Terminating_Rule value="type_qualifier" />
                    </ZeroOrMoreOf>
                    <ZeroOrMoreOf>
                        <Sub>
                            <Sequence>
                                <Recursive_Rule value="Owner" />
                                <Character_Single value=":" />
                                <Character_Single value=":" />
                            </Sequence>
                        </Sub>
                    </ZeroOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Terminating_Rule value="template_type" />
                            <Recursive_Rule value="type_specifier" />
                            <Terminating_Rule value="USER_TYPE" />
                        </OrInclusive>
                    </Sub>
                    <ZeroOrMoreOf>
                        <Terminating_Rule value="type_qualifier" />
                    </ZeroOrMoreOf>
                    <ZeroOrMoreOf>
                        <Sub>
                            <OrInclusive>
                                <Character_Single value="&amp;" />
                                <Character_Single value="*" />
                            </OrInclusive>
                        </Sub>
                    </ZeroOrMoreOf>
                    <ZeroOrMoreOf>
                        <Terminating_Rule value="type_qualifier" />
                    </ZeroOrMoreOf>
                </Sequence>
            </Sub>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="USER_TYPE" />
            <Uses_Terminated value="storage_class_specifier" />
            <Uses_Terminated value="template_type" />
            <Uses_Terminated value="type_qualifier" />
            <Uses_Recursive value="Owner" />
            <Uses_Recursive value="type_specifier" />
            <UsedBy_Terminated value="parameter_declaration" />
            <UsedBy_Terminated value="function_definition" />
            <UsedBy_Terminated value="prototype_parameter" />
            <UsedBy_Terminated value="function_prototype" />
            <UsedBy_Terminated value="operator" />
            <UsedBy_Terminated value="service" />
            <UsedBy_Terminated value="property" />
            <UsedBy_Recursive value="declaration" />
            <UsedBy_Recursive value="template_type" />
        </Properties>
        <Called>
            <C v="USER_TYPE">
                <C v="ID" c="7">
                    <C v="NON_ID" c="8">
                        <T v="not_reseved" c="9" />
                        <T v="reserved" c="10" />
                    </C>
                </C>
            </C>
            <T v="storage_class_specifier" />
            <C v="template_type">
                <C v="ID" c="11" />
                <R v="declaration_specifier" c="12" />
            </C>
            <T v="type_qualifier" />
            <C v="Owner">
                <C v="ID" c="13" />
                <C v="template_type" c="14" />
                <C v="type_specifier" c="15">
                    <C v="struct_specifier" c="16">
                        <R v="ID" c="19" />
                        <C v="declaration" c="20">
                            <X v="init_declarator" c="21" />
                            <T v="semikolon" c="22" />
                            <X v="declaration_specifier" c="23" />
                        </C>
                    </C>
                    <C v="union_specifier" c="17">
                        <R v="ID" c="24" />
                        <R v="declaration" c="25" />
                    </C>
                    <C v="enum_specifier" c="18">
                        <R v="ID" c="26" />
                        <C v="enumerator" c="27">
                            <X v="ID" c="28" />
                            <X v="constant_expression" c="29" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="type_specifier" />
        </Called>
        <Caller>
            <C v="parameter_declaration">
                <C v="parameter_list" c="10">
                    <C v="parameter_type_list" c="11">
                        <C v="direct_abstract_declarator" c="12">
                            <X v="abstract_declarator" c="14" />
                        </C>
                        <C v="direct_parameter_declarator" c="13">
                            <X v="parameter_function" c="15" />
                            <X v="p_declarator" c="16" />
                            <X v="destructor" c="17" />
                            <X v="direct_declarator_second" c="18" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="function_definition">
                <C v="external_declaration" c="19">
                    <T v="translation_unit" c="24" />
                </C>
                <C v="namespace" c="20">
                    <T v="pass" c="25" />
                    <R v="namespace" c="26" />
                    <C v="extern_compiled" c="27">
                        <R v="namespace" c="28" />
                    </C>
                </C>
                <R v="extern_compiled" c="21" />
                <R v="pass" c="22" />
                <C v="p_Block" c="23">
                    <X v="p_ifndef" c="29" />
                    <X v="p_if" c="30" />
                    <X v="p_elif" c="31" />
                    <X v="p_else" c="32" />
                    <X v="p_ifdef" c="33" />
                </C>
            </C>
            <C v="prototype_parameter">
                <X v="prototype_parameter_list" c="34" />
            </C>
            <C v="function_prototype">
                <X v="p_Block" c="35" />
                <X v="external_declaration" c="36" />
                <X v="friend" c="37" />
                <X v="namespace" c="38" />
                <X v="extern_compiled" c="39" />
                <T v="pass" c="40" />
            </C>
            <C v="operator">
                <X v="methode" c="41" />
                <X v="methode_definition" c="42" />
            </C>
            <C v="service">
                <X v="methode" c="43" />
                <X v="methode_definition" c="44" />
            </C>
            <C v="property">
                <X v="public" c="45" />
                <X v="protected" c="46" />
                <X v="private" c="47" />
            </C>
            <C v="declaration">
                <X v="union_specifier" c="48" />
                <X v="compound_statement" c="49" />
                <X v="for_expr" c="50" />
                <X v="p_Block" c="51" />
                <X v="function_definition" c="52" />
                <X v="external_declaration" c="53" />
                <X v="namespace" c="54" />
                <X v="extern_compiled" c="55" />
                <T v="pass" c="56" />
                <X v="struct_specifier" c="57" />
            </C>
            <C v="template_type">
                <X v="declaration_specifier" c="58" />
                <T v="struct_declaration" c="59" />
                <X v="Owner" c="60" />
                <X v="calss_parent" c="61" />
                <X v="primary_expression" c="62" />
            </C>
        </Caller>
    </Rule>
    <Rule value="declarator" uses="direct_declarator,funcPoint_declarator,pointer" usedBy=",init_declarator,struct_declarator,direct_parameter_declarator,parameter_declaration,function_definition," recursiveUses="direct_declarator,funcPoint_declarator" recursiveUsedBy="init_declarator,direct_parameter_declarator">
        <Expression>
            <OrInclusive>
                <Recursive_Rule value="funcPoint_declarator" />
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="pointer" />
                        <Recursive_Rule value="direct_declarator" />
                    </Sequence>
                </Sub>
                <Recursive_Rule value="direct_declarator" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="pointer" />
            <Uses_Recursive value="direct_declarator" />
            <Uses_Recursive value="funcPoint_declarator" />
            <UsedBy_Terminated value="struct_declarator" />
            <UsedBy_Terminated value="parameter_declaration" />
            <UsedBy_Terminated value="function_definition" />
            <UsedBy_Recursive value="init_declarator" />
            <UsedBy_Recursive value="direct_parameter_declarator" />
        </Properties>
        <Called>
            <C v="pointer">
                <C v="type_qualifier_list" c="4">
                    <T v="type_qualifier" c="6" />
                </C>
                <R v="pointer" c="5" />
            </C>
            <C v="direct_declarator">
                <C v="ID" c="7">
                    <C v="NON_ID" c="12">
                        <T v="not_reseved" c="13" />
                        <T v="reserved" c="14" />
                    </C>
                </C>
                <T v="operator_id" c="8" />
                <C v="owned_ID" c="9">
                    <R v="ID" c="15" />
                    <R v="operator_id" c="16" />
                    <C v="Owner" c="17">
                        <R v="ID" c="18" />
                        <C v="template_type" c="19">
                            <X v="ID" c="21" />
                            <X v="declaration_specifier" c="22" />
                        </C>
                        <C v="type_specifier" c="20">
                            <X v="struct_specifier" c="23" />
                            <X v="union_specifier" c="24" />
                            <X v="enum_specifier" c="25" />
                        </C>
                    </C>
                </C>
                <T v="type_qualifier" c="10" />
                <C v="direct_declarator_second" c="11">
                    <C v="direct_parameter_declarator" c="26">
                        <X v="expression" c="28" />
                        <X v="identifier_list" c="29" />
                        <X v="parameter_type_list" c="30" />
                        <X v="declarator" c="31" />
                    </C>
                    <X v="constant_expression" c="27" />
                </C>
            </C>
            <C v="funcPoint_declarator">
                <X v="prototype_parameter_list" c="32" />
                <T v="type_qualifier" c="33" />
                <X v="direct_declarator" c="34" />
            </C>
        </Called>
        <Caller>
            <C v="struct_declarator">
                <C v="struct_declarator_list" c="6">
                    <T v="struct_declaration" c="7" />
                </C>
            </C>
            <C v="parameter_declaration">
                <C v="parameter_list" c="8">
                    <C v="parameter_type_list" c="9">
                        <C v="direct_abstract_declarator" c="10">
                            <X v="abstract_declarator" c="12" />
                        </C>
                        <C v="direct_parameter_declarator" c="11">
                            <X v="parameter_function" c="13" />
                            <X v="p_declarator" c="14" />
                            <X v="destructor" c="15" />
                            <X v="direct_declarator_second" c="16" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="function_definition">
                <C v="external_declaration" c="17">
                    <T v="translation_unit" c="22" />
                </C>
                <C v="namespace" c="18">
                    <T v="pass" c="23" />
                    <R v="namespace" c="24" />
                    <C v="extern_compiled" c="25">
                        <R v="namespace" c="26" />
                    </C>
                </C>
                <R v="extern_compiled" c="19" />
                <R v="pass" c="20" />
                <C v="p_Block" c="21">
                    <X v="p_ifndef" c="27" />
                    <X v="p_if" c="28" />
                    <X v="p_elif" c="29" />
                    <X v="p_else" c="30" />
                    <X v="p_ifdef" c="31" />
                </C>
            </C>
            <C v="init_declarator">
                <X v="declaration" c="32" />
                <X v="prototype_parameter" c="33" />
            </C>
            <C v="direct_parameter_declarator" />
        </Caller>
    </Rule>
    <Rule value="declarator_prp" uses="ID,Owner,constant_expression,pointer" usedBy=",property_declarator,">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="pointer" />
                        <Sub>
                            <OrInclusive>
                                <Sub>
                                    <Sequence>
                                        <Sub>
                                            <OrInclusive>
                                                <Sub>
                                                    <Sequence>
                                                        <OneOrMoreOf>
                                                            <Sub>
                                                                <Sequence>
                                                                    <Terminating_Rule value="Owner" />
                                                                    <Character_Single value=":" />
                                                                    <Character_Single value=":" />
                                                                </Sequence>
                                                            </Sub>
                                                        </OneOrMoreOf>
                                                        <ZeroOrOneOf>
                                                            <Character_Single value="~" />
                                                        </ZeroOrOneOf>
                                                        <Terminating_Rule value="ID" />
                                                    </Sequence>
                                                </Sub>
                                                <Terminating_Rule value="ID" />
                                            </OrInclusive>
                                        </Sub>
                                        <OneOrMoreOf>
                                            <Sub>
                                                <Sequence>
                                                    <Sub>
                                                        <OrInclusive>
                                                            <String value="[" />
                                                            <String value="&lt;:" />
                                                        </OrInclusive>
                                                    </Sub>
                                                    <ZeroOrOneOf>
                                                        <Terminating_Rule value="constant_expression" />
                                                    </ZeroOrOneOf>
                                                    <Sub>
                                                        <OrInclusive>
                                                            <String value="]" />
                                                            <String value=":&gt;" />
                                                        </OrInclusive>
                                                    </Sub>
                                                </Sequence>
                                            </Sub>
                                        </OneOrMoreOf>
                                    </Sequence>
                                </Sub>
                                <Terminating_Rule value="ID" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sub>
                        <OrInclusive>
                            <Sub>
                                <Sequence>
                                    <Sub>
                                        <OrInclusive>
                                            <Sub>
                                                <Sequence>
                                                    <OneOrMoreOf>
                                                        <Sub>
                                                            <Sequence>
                                                                <Terminating_Rule value="Owner" />
                                                                <Character_Single value=":" />
                                                                <Character_Single value=":" />
                                                            </Sequence>
                                                        </Sub>
                                                    </OneOrMoreOf>
                                                    <ZeroOrOneOf>
                                                        <Character_Single value="~" />
                                                    </ZeroOrOneOf>
                                                    <Terminating_Rule value="ID" />
                                                </Sequence>
                                            </Sub>
                                            <Terminating_Rule value="ID" />
                                        </OrInclusive>
                                    </Sub>
                                    <OneOrMoreOf>
                                        <Sub>
                                            <Sequence>
                                                <Sub>
                                                    <OrInclusive>
                                                        <String value="[" />
                                                        <String value="&lt;:" />
                                                    </OrInclusive>
                                                </Sub>
                                                <ZeroOrOneOf>
                                                    <Terminating_Rule value="constant_expression" />
                                                </ZeroOrOneOf>
                                                <Sub>
                                                    <OrInclusive>
                                                        <String value="]" />
                                                        <String value=":&gt;" />
                                                    </OrInclusive>
                                                </Sub>
                                            </Sequence>
                                        </Sub>
                                    </OneOrMoreOf>
                                </Sequence>
                            </Sub>
                            <Terminating_Rule value="ID" />
                        </OrInclusive>
                    </Sub>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="Owner" />
            <Uses_Terminated value="constant_expression" />
            <Uses_Terminated value="pointer" />
            <UsedBy_Terminated value="property_declarator" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="5">
                    <T v="not_reseved" c="6" />
                    <T v="reserved" c="7" />
                </C>
            </C>
            <C v="Owner">
                <C v="ID" c="8" />
                <C v="template_type" c="9">
                    <R v="ID" c="11" />
                    <C v="declaration_specifier" c="12">
                        <C v="USER_TYPE" c="13">
                            <X v="ID" c="19" />
                        </C>
                        <T v="storage_class_specifier" c="14" />
                        <R v="template_type" c="15" />
                        <T v="type_qualifier" c="16" />
                        <R v="Owner" c="17" />
                        <C v="type_specifier" c="18">
                            <X v="struct_specifier" c="20" />
                            <X v="union_specifier" c="21" />
                            <X v="enum_specifier" c="22" />
                        </C>
                    </C>
                </C>
                <R v="type_specifier" c="10" />
            </C>
            <C v="constant_expression">
                <C v="conditional_expression" c="23">
                    <C v="logical_or_expression" c="24">
                        <C v="logical_and_expression" c="27">
                            <X v="inclusive_or_expression" c="28" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="25" />
                    <C v="expression" c="26">
                        <C v="assignment_expression" c="29">
                            <T v="assignment_operator" c="30" />
                            <X v="conditional_expression" c="31" />
                            <X v="assignment_expression" c="32" />
                            <X v="cast_expression" c="33" />
                            <X v="unary_expression" c="34" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="pointer">
                <X v="type_qualifier_list" c="35" />
                <X v="pointer" c="36" />
            </C>
        </Called>
        <Caller>
            <C v="property_declarator">
                <C v="property" c="2">
                    <C v="public" c="3">
                        <C v="class_content" c="6">
                            <X v="class_definition" c="7" />
                        </C>
                    </C>
                    <C v="protected" c="4">
                        <R v="class_content" c="8" />
                    </C>
                    <C v="private" c="5">
                        <R v="class_content" c="9" />
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="default_expr" uses="" usedBy=",case_part,default_part,">
        <Expression>
            <Sequence>
                <String value="default" />
                <String value=":" />
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="case_part" />
            <UsedBy_Terminated value="default_part" />
        </Properties>
        <Called />
        <Caller>
            <C v="case_part">
                <C v="case_stmt" c="3">
                    <R v="case_part" c="4" />
                    <C v="default_part" c="5">
                        <C v="default_stmt" c="7">
                            <X v="statement" c="8" />
                        </C>
                    </C>
                    <C v="statement" c="6">
                        <C v="elif_part" c="9">
                            <X v="if_stmt" c="24" />
                        </C>
                        <C v="else_part" c="10">
                            <X v="if_stmt" c="25" />
                        </C>
                        <C v="p_Block" c="11">
                            <X v="p_ifndef" c="26" />
                            <X v="p_if" c="27" />
                            <X v="p_elif" c="28" />
                            <X v="p_else" c="29" />
                            <X v="p_ifdef" c="30" />
                        </C>
                        <X v="namespace" c="12" />
                        <X v="extern_compiled" c="13" />
                        <T v="pass" c="14" />
                        <X v="compound_statement" c="15" />
                        <X v="case_part" c="16" />
                        <X v="default_part" c="17" />
                        <X v="if_part" c="18" />
                        <X v="switch_stmt" c="19" />
                        <X v="while_stmt" c="20" />
                        <X v="do_stmt" c="21" />
                        <X v="for_stmt" c="22" />
                        <X v="p_define" c="23" />
                    </C>
                </C>
            </C>
            <C v="default_part" />
        </Caller>
    </Rule>
    <Rule value="default_part" uses="break_stmt,case_stmt,default_expr,statement" usedBy=",default_stmt," recursiveUses="case_stmt" recursiveUsedBy="default_stmt">
        <Expression>
            <Sequence>
                <Terminating_Rule value="default_expr" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Exclusion>
                            <First>
                                <Terminating_Rule value="statement" />
                            </First>
                            <Second>
                                <Sub>
                                    <OrInclusive>
                                        <Recursive_Rule value="case_stmt" />
                                        <Terminating_Rule value="break_stmt" />
                                    </OrInclusive>
                                </Sub>
                            </Second>
                        </Exclusion>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="break_stmt" />
            <Uses_Terminated value="default_expr" />
            <Uses_Terminated value="statement" />
            <Uses_Recursive value="case_stmt" />
            <UsedBy_Recursive value="default_stmt" />
        </Properties>
        <Called>
            <C v="break_stmt">
                <T v="semikolon" c="5" />
            </C>
            <T v="default_expr" />
            <C v="statement">
                <C v="break_stmt" c="6" />
                <C v="continue_stmt" c="7">
                    <T v="semikolon" c="21" />
                </C>
                <C v="expr_stmt" c="8">
                    <T v="empty_expression" c="22" />
                    <C v="expression" c="23">
                        <C v="assignment_expression" c="25">
                            <T v="assignment_operator" c="26" />
                            <X v="conditional_expression" c="27" />
                            <X v="assignment_expression" c="28" />
                            <X v="cast_expression" c="29" />
                            <X v="unary_expression" c="30" />
                        </C>
                    </C>
                    <T v="semikolon" c="24" />
                </C>
                <X v="goto_stmt" c="9" />
                <X v="lable_stmt" c="10" />
                <X v="preprocedure" c="11" />
                <X v="return_stmt" c="12" />
                <X v="case_stmt" c="13" />
                <X v="compound_statement" c="14" />
                <X v="default_stmt" c="15" />
                <X v="do_stmt" c="16" />
                <X v="for_stmt" c="17" />
                <X v="if_stmt" c="18" />
                <X v="switch_stmt" c="19" />
                <X v="while_stmt" c="20" />
            </C>
            <C v="case_stmt">
                <X v="break_stmt" c="31" />
                <T v="semikolon" c="32" />
                <X v="case_part" c="33" />
            </C>
        </Called>
        <Caller>
            <C v="default_stmt">
                <C v="statement" c="2">
                    <C v="elif_part" c="3">
                        <C v="if_stmt" c="18">
                            <X v="statement" c="19" />
                            <X v="else_part" c="20" />
                        </C>
                    </C>
                    <C v="else_part" c="4">
                        <R v="if_stmt" c="21" />
                    </C>
                    <C v="p_Block" c="5">
                        <C v="p_ifndef" c="22">
                            <X v="compilerSwitch" c="27" />
                        </C>
                        <C v="p_if" c="23">
                            <X v="compilerSwitch" c="28" />
                        </C>
                        <C v="p_elif" c="24">
                            <X v="compilerSwitch" c="29" />
                        </C>
                        <C v="p_else" c="25">
                            <X v="compilerSwitch" c="30" />
                        </C>
                        <X v="p_ifdef" c="26" />
                    </C>
                    <X v="namespace" c="6" />
                    <X v="extern_compiled" c="7" />
                    <T v="pass" c="8" />
                    <X v="compound_statement" c="9" />
                    <X v="case_part" c="10" />
                    <X v="default_part" c="11" />
                    <X v="if_part" c="12" />
                    <X v="switch_stmt" c="13" />
                    <X v="while_stmt" c="14" />
                    <X v="do_stmt" c="15" />
                    <X v="for_stmt" c="16" />
                    <X v="p_define" c="17" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="default_stmt" uses="break_stmt,default_part,semikolon" usedBy=",statement," recursiveUses="default_part" recursiveUsedBy="statement">
        <Expression>
            <Sequence>
                <Recursive_Rule value="default_part" />
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <ZeroOrOneOf>
                                <Terminating_Rule value="semikolon" />
                            </ZeroOrOneOf>
                            <Terminating_Rule value="break_stmt" />
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="break_stmt" />
            <Uses_Terminated value="semikolon" />
            <Uses_Recursive value="default_part" />
            <UsedBy_Recursive value="statement" />
        </Properties>
        <Called>
            <C v="break_stmt">
                <T v="semikolon" c="4" />
            </C>
            <T v="semikolon" />
            <C v="default_part">
                <C v="break_stmt" c="5" />
                <T v="default_expr" c="6" />
                <C v="statement" c="7">
                    <R v="break_stmt" c="9" />
                    <C v="continue_stmt" c="10">
                        <T v="semikolon" c="24" />
                    </C>
                    <C v="expr_stmt" c="11">
                        <T v="empty_expression" c="25" />
                        <C v="expression" c="26">
                            <X v="assignment_expression" c="28" />
                        </C>
                        <R v="semikolon" c="27" />
                    </C>
                    <C v="goto_stmt" c="12">
                        <X v="ID" c="29" />
                        <T v="semikolon" c="30" />
                    </C>
                    <X v="lable_stmt" c="13" />
                    <X v="preprocedure" c="14" />
                    <X v="return_stmt" c="15" />
                    <X v="case_stmt" c="16" />
                    <X v="compound_statement" c="17" />
                    <X v="default_stmt" c="18" />
                    <X v="do_stmt" c="19" />
                    <X v="for_stmt" c="20" />
                    <X v="if_stmt" c="21" />
                    <X v="switch_stmt" c="22" />
                    <X v="while_stmt" c="23" />
                </C>
                <X v="case_stmt" c="8" />
            </C>
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="2">
                    <C v="if_stmt" c="17">
                        <R v="statement" c="18" />
                        <C v="else_part" c="19">
                            <X v="if_stmt" c="20" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="3" />
                <C v="p_Block" c="4">
                    <C v="p_ifndef" c="21">
                        <C v="compilerSwitch" c="26">
                            <X v="preprocedure" c="27" />
                        </C>
                    </C>
                    <C v="p_if" c="22">
                        <R v="compilerSwitch" c="28" />
                    </C>
                    <C v="p_elif" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_else" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_ifdef" c="25" />
                </C>
                <X v="namespace" c="5" />
                <X v="extern_compiled" c="6" />
                <T v="pass" c="7" />
                <X v="compound_statement" c="8" />
                <X v="case_part" c="9" />
                <X v="default_part" c="10" />
                <X v="if_part" c="11" />
                <X v="switch_stmt" c="12" />
                <X v="while_stmt" c="13" />
                <X v="do_stmt" c="14" />
                <X v="for_stmt" c="15" />
                <X v="p_define" c="16" />
            </C>
        </Caller>
    </Rule>
    <Rule value="destructor" uses="ID,direct_parameter_declarator,type_qualifier" usedBy=",methode,methode_definition,">
        <Expression>
            <Sequence>
                <ZeroOrOneOf>
                    <Sub>
                        <OrInclusive>
                            <String value="virtual" />
                            <String value="static" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrOneOf>
                <String value="~" />
                <Terminating_Rule value="ID" />
                <Terminating_Rule value="direct_parameter_declarator" />
                <ZeroOrMoreOf>
                    <Terminating_Rule value="type_qualifier" />
                </ZeroOrMoreOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Character_Single value="=" />
                            <Character_Single value="0" />
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="direct_parameter_declarator" />
            <Uses_Terminated value="type_qualifier" />
            <UsedBy_Terminated value="methode" />
            <UsedBy_Terminated value="methode_definition" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="4">
                    <T v="not_reseved" c="5" />
                    <T v="reserved" c="6" />
                </C>
            </C>
            <C v="direct_parameter_declarator">
                <C v="expression" c="7">
                    <C v="assignment_expression" c="11">
                        <T v="assignment_operator" c="12" />
                        <C v="conditional_expression" c="13">
                            <X v="logical_or_expression" c="17" />
                            <X v="conditional_expression" c="18" />
                            <X v="expression" c="19" />
                        </C>
                        <R v="assignment_expression" c="14" />
                        <C v="cast_expression" c="15">
                            <X v="cast_expression" c="20" />
                            <X v="type_name" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                        <C v="unary_expression" c="16">
                            <X v="type_name" c="23" />
                            <T v="unary_operator" c="24" />
                            <X v="cast_expression" c="25" />
                            <X v="postfix_expression" c="26" />
                            <X v="unary_expression" c="27" />
                        </C>
                    </C>
                </C>
                <C v="identifier_list" c="8">
                    <C v="ID" c="28" />
                </C>
                <C v="parameter_type_list" c="9">
                    <C v="parameter_list" c="29">
                        <X v="parameter_declaration" c="30" />
                    </C>
                </C>
                <X v="declarator" c="10" />
            </C>
            <T v="type_qualifier" />
        </Called>
        <Caller>
            <C v="methode">
                <C v="public" c="3">
                    <C v="class_content" c="7">
                        <C v="class_definition" c="8">
                            <X v="external_declaration" c="9" />
                            <X v="namespace" c="10" />
                            <X v="extern_compiled" c="11" />
                            <T v="pass" c="12" />
                            <X v="p_Block" c="13" />
                        </C>
                    </C>
                </C>
                <C v="protected" c="4">
                    <R v="class_content" c="14" />
                </C>
                <C v="private" c="5">
                    <R v="class_content" c="15" />
                </C>
                <C v="property" c="6">
                    <R v="public" c="16" />
                    <R v="protected" c="17" />
                    <R v="private" c="18" />
                </C>
            </C>
            <C v="methode_definition">
                <C v="protected" c="19" />
                <C v="private" c="20" />
                <C v="public" c="21" />
            </C>
        </Caller>
    </Rule>
    <Rule value="direct_abstract_declarator" uses="abstract_declarator,constant_expression,parameter_type_list" usedBy=",abstract_declarator," recursiveUses="abstract_declarator" recursiveUsedBy="abstract_declarator">
        <Expression>
            <OneOrMoreOf>
                <Sub>
                    <OrInclusive>
                        <Sub>
                            <Sequence>
                                <String value="(" />
                                <Recursive_Rule value="abstract_declarator" />
                                <String value=")" />
                            </Sequence>
                        </Sub>
                        <Sub>
                            <Sequence>
                                <Sub>
                                    <OrInclusive>
                                        <String value="[" />
                                        <String value="&lt;:" />
                                    </OrInclusive>
                                </Sub>
                                <Terminating_Rule value="constant_expression" />
                                <Sub>
                                    <OrInclusive>
                                        <String value="]" />
                                        <String value=":&gt;" />
                                    </OrInclusive>
                                </Sub>
                            </Sequence>
                        </Sub>
                        <Sub>
                            <Sequence>
                                <Sub>
                                    <OrInclusive>
                                        <String value="[" />
                                        <String value="&lt;:" />
                                    </OrInclusive>
                                </Sub>
                                <Sub>
                                    <OrInclusive>
                                        <String value="]" />
                                        <String value=":&gt;" />
                                    </OrInclusive>
                                </Sub>
                            </Sequence>
                        </Sub>
                        <Sub>
                            <Sequence>
                                <String value="(" />
                                <Terminating_Rule value="parameter_type_list" />
                                <String value=")" />
                            </Sequence>
                        </Sub>
                        <Sub>
                            <Sequence>
                                <String value="(" />
                                <String value=")" />
                            </Sequence>
                        </Sub>
                    </OrInclusive>
                </Sub>
            </OneOrMoreOf>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="constant_expression" />
            <Uses_Terminated value="parameter_type_list" />
            <Uses_Recursive value="abstract_declarator" />
            <UsedBy_Recursive value="abstract_declarator" />
        </Properties>
        <Called>
            <C v="constant_expression">
                <C v="conditional_expression" c="4">
                    <C v="logical_or_expression" c="5">
                        <C v="logical_and_expression" c="8">
                            <X v="inclusive_or_expression" c="9" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="6" />
                    <C v="expression" c="7">
                        <C v="assignment_expression" c="10">
                            <T v="assignment_operator" c="11" />
                            <X v="conditional_expression" c="12" />
                            <X v="assignment_expression" c="13" />
                            <X v="cast_expression" c="14" />
                            <X v="unary_expression" c="15" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="parameter_type_list">
                <C v="parameter_list" c="16">
                    <C v="parameter_declaration" c="17">
                        <T v="assignment_operator" c="18" />
                        <C v="cast_expression" c="19">
                            <X v="cast_expression" c="25" />
                            <X v="type_name" c="26" />
                            <X v="unary_expression" c="27" />
                        </C>
                        <C v="declaration_specifier" c="20">
                            <X v="USER_TYPE" c="28" />
                            <T v="storage_class_specifier" c="29" />
                            <X v="template_type" c="30" />
                            <T v="type_qualifier" c="31" />
                            <X v="Owner" c="32" />
                            <X v="type_specifier" c="33" />
                        </C>
                        <X v="declarator" c="21" />
                        <X v="parameter_function" c="22" />
                        <X v="unary_expression" c="23" />
                        <X v="abstract_declarator" c="24" />
                    </C>
                </C>
            </C>
            <C v="abstract_declarator">
                <X v="pointer" c="34" />
                <X v="direct_abstract_declarator" c="35" />
            </C>
        </Called>
        <Caller>
            <C v="abstract_declarator">
                <C v="type_name" c="2">
                    <C v="cast_expression" c="5">
                        <C v="assignment_expression" c="7">
                            <X v="initializer" c="12" />
                            <X v="argument_expression_list" c="13" />
                            <X v="assignment_expression" c="14" />
                        </C>
                        <C v="parameter_declaration" c="8">
                            <X v="parameter_list" c="15" />
                        </C>
                        <C v="unary_expression" c="9">
                            <X v="element_initializer" c="16" />
                            <X v="unary_expression" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="assignment_expression" c="19" />
                            <X v="parameter_declaration" c="20" />
                        </C>
                        <R v="cast_expression" c="10" />
                        <C v="multiplicative_expression" c="11">
                            <X v="additive_expression" c="21" />
                        </C>
                    </C>
                    <R v="unary_expression" c="6" />
                </C>
                <R v="direct_abstract_declarator" c="3" />
                <R v="parameter_declaration" c="4" />
            </C>
        </Caller>
    </Rule>
    <Rule value="direct_declarator" uses="ID,direct_declarator_second,type_qualifier" usedBy=",declarator,funcPoint_declarator," recursiveUses="direct_declarator_second" recursiveUsedBy="declarator">
        <Expression>
            <Sequence>
                <Sub>
                    <Sequence>
                        <Sub>
                            <Terminating_Rule value="ID" />
                        </Sub>
                        <ZeroOrMoreOf>
                            <Sub>
                                <Recursive_Rule value="direct_declarator_second" />
                            </Sub>
                        </ZeroOrMoreOf>
                    </Sequence>
                </Sub>
                <ZeroOrOneOf>
                    <Terminating_Rule value="type_qualifier" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="type_qualifier" />
            <Uses_Recursive value="direct_declarator_second" />
            <UsedBy_Terminated value="funcPoint_declarator" />
            <UsedBy_Recursive value="declarator" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="4">
                    <T v="not_reseved" c="5" />
                    <T v="reserved" c="6" />
                </C>
            </C>
            <T v="type_qualifier" />
            <C v="direct_declarator_second">
                <C v="direct_parameter_declarator" c="7">
                    <C v="expression" c="9">
                        <C v="assignment_expression" c="13">
                            <T v="assignment_operator" c="14" />
                            <X v="conditional_expression" c="15" />
                            <X v="assignment_expression" c="16" />
                            <X v="cast_expression" c="17" />
                            <X v="unary_expression" c="18" />
                        </C>
                    </C>
                    <C v="identifier_list" c="10">
                        <C v="ID" c="19" />
                    </C>
                    <C v="parameter_type_list" c="11">
                        <C v="parameter_list" c="20">
                            <X v="parameter_declaration" c="21" />
                        </C>
                    </C>
                    <C v="declarator" c="12">
                        <C v="pointer" c="22">
                            <X v="type_qualifier_list" c="25" />
                            <X v="pointer" c="26" />
                        </C>
                        <R v="direct_declarator" c="23" />
                        <C v="funcPoint_declarator" c="24">
                            <X v="prototype_parameter_list" c="27" />
                            <T v="type_qualifier" c="28" />
                            <X v="direct_declarator" c="29" />
                        </C>
                    </C>
                </C>
                <C v="constant_expression" c="8">
                    <X v="conditional_expression" c="30" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="funcPoint_declarator">
                <C v="declarator" c="3">
                    <C v="struct_declarator" c="4">
                        <C v="struct_declarator_list" c="9">
                            <T v="struct_declaration" c="10" />
                        </C>
                    </C>
                    <C v="parameter_declaration" c="5">
                        <C v="parameter_list" c="11">
                            <X v="parameter_type_list" c="12" />
                        </C>
                    </C>
                    <C v="function_definition" c="6">
                        <C v="external_declaration" c="13">
                            <T v="translation_unit" c="18" />
                        </C>
                        <C v="namespace" c="14">
                            <T v="pass" c="19" />
                            <X v="namespace" c="20" />
                            <X v="extern_compiled" c="21" />
                        </C>
                        <C v="extern_compiled" c="15">
                            <X v="namespace" c="22" />
                        </C>
                        <T v="pass" c="16" />
                        <C v="p_Block" c="17">
                            <X v="p_ifndef" c="23" />
                            <X v="p_if" c="24" />
                            <X v="p_elif" c="25" />
                            <X v="p_else" c="26" />
                            <X v="p_ifdef" c="27" />
                        </C>
                    </C>
                    <C v="init_declarator" c="7">
                        <C v="declaration" c="28">
                            <X v="union_specifier" c="30" />
                            <X v="compound_statement" c="31" />
                            <X v="for_expr" c="32" />
                            <X v="p_Block" c="33" />
                            <X v="function_definition" c="34" />
                            <X v="external_declaration" c="35" />
                            <X v="namespace" c="36" />
                            <X v="extern_compiled" c="37" />
                            <T v="pass" c="38" />
                            <X v="struct_specifier" c="39" />
                        </C>
                        <X v="prototype_parameter" c="29" />
                    </C>
                    <X v="direct_parameter_declarator" c="8" />
                </C>
            </C>
            <C v="declarator" />
        </Caller>
    </Rule>
    <Rule value="direct_declarator" uses="ID,direct_declarator_second,operator_id,owned_ID,type_qualifier" usedBy=",declarator,funcPoint_declarator," recursiveUses="direct_declarator_second" recursiveUsedBy="declarator">
        <Expression>
            <Sequence>
                <Sub>
                    <Sequence>
                        <Sub>
                            <OrInclusive>
                                <Sub>
                                    <Terminating_Rule value="operator_id" />
                                </Sub>
                                <Terminating_Rule value="owned_ID" />
                                <Terminating_Rule value="ID" />
                            </OrInclusive>
                        </Sub>
                        <ZeroOrMoreOf>
                            <Sub>
                                <Recursive_Rule value="direct_declarator_second" />
                            </Sub>
                        </ZeroOrMoreOf>
                    </Sequence>
                </Sub>
                <ZeroOrMoreOf>
                    <Terminating_Rule value="type_qualifier" />
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="operator_id" />
            <Uses_Terminated value="owned_ID" />
            <Uses_Terminated value="type_qualifier" />
            <Uses_Recursive value="direct_declarator_second" />
            <UsedBy_Terminated value="funcPoint_declarator" />
            <UsedBy_Recursive value="declarator" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="6">
                    <T v="not_reseved" c="7" />
                    <T v="reserved" c="8" />
                </C>
            </C>
            <T v="operator_id" />
            <C v="owned_ID">
                <C v="ID" c="9" />
                <T v="operator_id" c="10" />
                <C v="Owner" c="11">
                    <R v="ID" c="12" />
                    <C v="template_type" c="13">
                        <R v="ID" c="15" />
                        <C v="declaration_specifier" c="16">
                            <X v="USER_TYPE" c="17" />
                            <T v="storage_class_specifier" c="18" />
                            <X v="template_type" c="19" />
                            <T v="type_qualifier" c="20" />
                            <X v="Owner" c="21" />
                            <X v="type_specifier" c="22" />
                        </C>
                    </C>
                    <C v="type_specifier" c="14">
                        <C v="struct_specifier" c="23">
                            <X v="ID" c="26" />
                            <X v="declaration" c="27" />
                        </C>
                        <C v="union_specifier" c="24">
                            <X v="ID" c="28" />
                            <X v="declaration" c="29" />
                        </C>
                        <C v="enum_specifier" c="25">
                            <X v="ID" c="30" />
                            <X v="enumerator" c="31" />
                        </C>
                    </C>
                </C>
            </C>
            <T v="type_qualifier" />
            <C v="direct_declarator_second">
                <X v="direct_parameter_declarator" c="32" />
                <X v="constant_expression" c="33" />
            </C>
        </Called>
        <Caller>
            <C v="funcPoint_declarator">
                <C v="declarator" c="3">
                    <C v="struct_declarator" c="4">
                        <C v="struct_declarator_list" c="9">
                            <T v="struct_declaration" c="10" />
                        </C>
                    </C>
                    <C v="parameter_declaration" c="5">
                        <C v="parameter_list" c="11">
                            <X v="parameter_type_list" c="12" />
                        </C>
                    </C>
                    <C v="function_definition" c="6">
                        <C v="external_declaration" c="13">
                            <T v="translation_unit" c="18" />
                        </C>
                        <C v="namespace" c="14">
                            <T v="pass" c="19" />
                            <X v="namespace" c="20" />
                            <X v="extern_compiled" c="21" />
                        </C>
                        <C v="extern_compiled" c="15">
                            <X v="namespace" c="22" />
                        </C>
                        <T v="pass" c="16" />
                        <C v="p_Block" c="17">
                            <X v="p_ifndef" c="23" />
                            <X v="p_if" c="24" />
                            <X v="p_elif" c="25" />
                            <X v="p_else" c="26" />
                            <X v="p_ifdef" c="27" />
                        </C>
                    </C>
                    <C v="init_declarator" c="7">
                        <C v="declaration" c="28">
                            <X v="union_specifier" c="30" />
                            <X v="compound_statement" c="31" />
                            <X v="for_expr" c="32" />
                            <X v="p_Block" c="33" />
                            <X v="function_definition" c="34" />
                            <X v="external_declaration" c="35" />
                            <X v="namespace" c="36" />
                            <X v="extern_compiled" c="37" />
                            <T v="pass" c="38" />
                            <X v="struct_specifier" c="39" />
                        </C>
                        <X v="prototype_parameter" c="29" />
                    </C>
                    <X v="direct_parameter_declarator" c="8" />
                </C>
            </C>
            <C v="declarator" />
        </Caller>
    </Rule>
    <Rule value="direct_declarator_second" uses="constant_expression,direct_parameter_declarator" usedBy=",direct_declarator," recursiveUses="constant_expression" recursiveUsedBy="direct_declarator">
        <Expression>
            <OrInclusive>
                <Terminating_Rule value="direct_parameter_declarator" />
                <Sub>
                    <Sequence>
                        <Sub>
                            <OrInclusive>
                                <String value="[" />
                                <String value="&lt;:" />
                            </OrInclusive>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <String value="]" />
                                <String value=":&gt;" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Sub>
                            <OrInclusive>
                                <String value="[" />
                                <String value="&lt;:" />
                            </OrInclusive>
                        </Sub>
                        <Recursive_Rule value="constant_expression" />
                        <Sub>
                            <OrInclusive>
                                <String value="]" />
                                <String value=":&gt;" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="direct_parameter_declarator" />
            <Uses_Recursive value="constant_expression" />
            <UsedBy_Recursive value="direct_declarator" />
        </Properties>
        <Called>
            <C v="direct_parameter_declarator">
                <C v="expression" c="3">
                    <C v="assignment_expression" c="7">
                        <T v="assignment_operator" c="8" />
                        <C v="conditional_expression" c="9">
                            <X v="logical_or_expression" c="13" />
                            <X v="conditional_expression" c="14" />
                            <X v="expression" c="15" />
                        </C>
                        <R v="assignment_expression" c="10" />
                        <C v="cast_expression" c="11">
                            <X v="cast_expression" c="16" />
                            <X v="type_name" c="17" />
                            <X v="unary_expression" c="18" />
                        </C>
                        <C v="unary_expression" c="12">
                            <X v="type_name" c="19" />
                            <T v="unary_operator" c="20" />
                            <X v="cast_expression" c="21" />
                            <X v="postfix_expression" c="22" />
                            <X v="unary_expression" c="23" />
                        </C>
                    </C>
                </C>
                <C v="identifier_list" c="4">
                    <C v="ID" c="24">
                        <C v="NON_ID" c="25">
                            <T v="not_reseved" c="26" />
                            <T v="reserved" c="27" />
                        </C>
                    </C>
                </C>
                <C v="parameter_type_list" c="5">
                    <C v="parameter_list" c="28">
                        <C v="parameter_declaration" c="29">
                            <T v="assignment_operator" c="30" />
                            <X v="cast_expression" c="31" />
                            <X v="declaration_specifier" c="32" />
                            <X v="declarator" c="33" />
                            <X v="parameter_function" c="34" />
                            <X v="unary_expression" c="35" />
                            <X v="abstract_declarator" c="36" />
                        </C>
                    </C>
                </C>
                <X v="declarator" c="6" />
            </C>
            <C v="constant_expression">
                <X v="conditional_expression" c="37" />
            </C>
        </Called>
        <Caller>
            <C v="direct_declarator">
                <C v="funcPoint_declarator" c="2">
                    <C v="declarator" c="4">
                        <C v="struct_declarator" c="5">
                            <X v="struct_declarator_list" c="10" />
                        </C>
                        <C v="parameter_declaration" c="6">
                            <X v="parameter_list" c="11" />
                        </C>
                        <C v="function_definition" c="7">
                            <X v="external_declaration" c="12" />
                            <X v="namespace" c="13" />
                            <X v="extern_compiled" c="14" />
                            <T v="pass" c="15" />
                            <X v="p_Block" c="16" />
                        </C>
                        <C v="init_declarator" c="8">
                            <X v="declaration" c="17" />
                            <X v="prototype_parameter" c="18" />
                        </C>
                        <C v="direct_parameter_declarator" c="9">
                            <X v="parameter_function" c="19" />
                            <X v="p_declarator" c="20" />
                            <X v="destructor" c="21" />
                            <X v="direct_declarator_second" c="22" />
                        </C>
                    </C>
                </C>
                <R v="declarator" c="3" />
            </C>
        </Caller>
    </Rule>
    <Rule value="direct_parameter_declarator" uses="declarator,expression,identifier_list,parameter_type_list" usedBy=",direct_declarator_second,parameter_function,p_declarator,destructor," recursiveUses="declarator" recursiveUsedBy="direct_declarator_second">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <Terminating_Rule value="expression" />
                        <String value=")" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <Terminating_Rule value="identifier_list" />
                        <String value=")" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <Terminating_Rule value="parameter_type_list" />
                        <String value=")" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <String value=")" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <Recursive_Rule value="declarator" />
                        <String value=")" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <Uses_Terminated value="identifier_list" />
            <Uses_Terminated value="parameter_type_list" />
            <Uses_Recursive value="declarator" />
            <UsedBy_Terminated value="parameter_function" />
            <UsedBy_Terminated value="p_declarator" />
            <UsedBy_Terminated value="destructor" />
            <UsedBy_Recursive value="direct_declarator_second" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="5">
                    <T v="assignment_operator" c="6" />
                    <C v="conditional_expression" c="7">
                        <C v="logical_or_expression" c="11">
                            <X v="logical_and_expression" c="14" />
                        </C>
                        <R v="conditional_expression" c="12" />
                        <R v="expression" c="13" />
                    </C>
                    <R v="assignment_expression" c="8" />
                    <C v="cast_expression" c="9">
                        <R v="cast_expression" c="15" />
                        <C v="type_name" c="16">
                            <X v="USER_TYPE" c="18" />
                            <X v="abstract_declarator" c="19" />
                            <X v="specifier_qualifier_list" c="20" />
                        </C>
                        <C v="unary_expression" c="17">
                            <X v="type_name" c="21" />
                            <T v="unary_operator" c="22" />
                            <X v="cast_expression" c="23" />
                            <X v="postfix_expression" c="24" />
                            <X v="unary_expression" c="25" />
                        </C>
                    </C>
                    <R v="unary_expression" c="10" />
                </C>
            </C>
            <C v="identifier_list">
                <C v="ID" c="26">
                    <C v="NON_ID" c="27">
                        <T v="not_reseved" c="28" />
                        <T v="reserved" c="29" />
                    </C>
                </C>
            </C>
            <C v="parameter_type_list">
                <X v="parameter_list" c="30" />
            </C>
            <C v="declarator">
                <X v="pointer" c="31" />
                <X v="direct_declarator" c="32" />
                <X v="funcPoint_declarator" c="33" />
            </C>
        </Called>
        <Caller>
            <C v="parameter_function">
                <C v="prototype_parameter" c="5">
                    <C v="prototype_parameter_list" c="7">
                        <C v="function_prototype" c="8">
                            <X v="p_Block" c="13" />
                            <X v="external_declaration" c="14" />
                            <X v="friend" c="15" />
                            <X v="namespace" c="16" />
                            <X v="extern_compiled" c="17" />
                            <T v="pass" c="18" />
                        </C>
                        <C v="operator" c="9">
                            <X v="methode" c="19" />
                            <X v="methode_definition" c="20" />
                        </C>
                        <C v="constructor" c="10">
                            <X v="methode" c="21" />
                            <X v="methode_definition" c="22" />
                        </C>
                        <C v="service" c="11">
                            <X v="methode" c="23" />
                            <X v="methode_definition" c="24" />
                        </C>
                        <C v="funcPoint_declarator" c="12">
                            <X v="declarator" c="25" />
                        </C>
                    </C>
                </C>
                <C v="parameter_declaration" c="6">
                    <C v="parameter_list" c="26">
                        <C v="parameter_type_list" c="27">
                            <X v="direct_abstract_declarator" c="28" />
                            <X v="direct_parameter_declarator" c="29" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="p_declarator">
                <X v="p_define" c="30" />
            </C>
            <C v="destructor">
                <X v="methode" c="31" />
                <X v="methode_definition" c="32" />
            </C>
            <C v="direct_declarator_second">
                <X v="direct_declarator" c="33" />
            </C>
        </Caller>
    </Rule>
    <Rule value="do_stmt" uses="semikolon,statement,while_expr" usedBy=",statement,iteration_statement," recursiveUses="statement" recursiveUsedBy="statement">
        <Expression>
            <Sequence>
                <String value="do" />
                <Recursive_Rule value="statement" />
                <Terminating_Rule value="while_expr" />
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="semikolon" />
            <Uses_Terminated value="while_expr" />
            <Uses_Recursive value="statement" />
            <UsedBy_Terminated value="iteration_statement" />
            <UsedBy_Recursive value="statement" />
        </Properties>
        <Called>
            <T v="semikolon" />
            <C v="while_expr">
                <C v="expression" c="4">
                    <C v="assignment_expression" c="5">
                        <T v="assignment_operator" c="6" />
                        <C v="conditional_expression" c="7">
                            <X v="logical_or_expression" c="11" />
                            <X v="conditional_expression" c="12" />
                            <X v="expression" c="13" />
                        </C>
                        <R v="assignment_expression" c="8" />
                        <C v="cast_expression" c="9">
                            <X v="cast_expression" c="14" />
                            <X v="type_name" c="15" />
                            <X v="unary_expression" c="16" />
                        </C>
                        <C v="unary_expression" c="10">
                            <X v="type_name" c="17" />
                            <T v="unary_operator" c="18" />
                            <X v="cast_expression" c="19" />
                            <X v="postfix_expression" c="20" />
                            <X v="unary_expression" c="21" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="statement">
                <X v="break_stmt" c="22" />
                <X v="continue_stmt" c="23" />
                <X v="expr_stmt" c="24" />
                <X v="goto_stmt" c="25" />
                <X v="lable_stmt" c="26" />
                <X v="preprocedure" c="27" />
                <X v="return_stmt" c="28" />
                <X v="case_stmt" c="29" />
                <X v="compound_statement" c="30" />
                <X v="default_stmt" c="31" />
                <X v="do_stmt" c="32" />
                <X v="for_stmt" c="33" />
                <X v="if_stmt" c="34" />
                <X v="switch_stmt" c="35" />
                <X v="while_stmt" c="36" />
            </C>
        </Called>
        <Caller>
            <T v="iteration_statement" />
            <C v="statement">
                <C v="elif_part" c="3">
                    <C v="if_stmt" c="18">
                        <R v="statement" c="19" />
                        <C v="else_part" c="20">
                            <X v="if_stmt" c="21" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="4" />
                <C v="p_Block" c="5">
                    <C v="p_ifndef" c="22">
                        <C v="compilerSwitch" c="27">
                            <X v="preprocedure" c="28" />
                        </C>
                    </C>
                    <C v="p_if" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_elif" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_else" c="25" />
                    <X v="p_ifdef" c="26" />
                </C>
                <X v="namespace" c="6" />
                <X v="extern_compiled" c="7" />
                <T v="pass" c="8" />
                <X v="compound_statement" c="9" />
                <X v="case_part" c="10" />
                <X v="default_part" c="11" />
                <X v="if_part" c="12" />
                <X v="switch_stmt" c="13" />
                <X v="while_stmt" c="14" />
                <X v="do_stmt" c="15" />
                <X v="for_stmt" c="16" />
                <X v="p_define" c="17" />
            </C>
        </Caller>
    </Rule>
    <Rule value="element_initializer" uses="unary_expression" usedBy=",function_definition,">
        <Expression>
            <Sequence>
                <String value=":" />
                <Terminating_Rule value="unary_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <String value="," />
                            <Terminating_Rule value="unary_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="unary_expression" />
            <UsedBy_Terminated value="function_definition" />
        </Properties>
        <Called>
            <C v="unary_expression">
                <C v="type_name" c="2">
                    <C v="USER_TYPE" c="7">
                        <C v="ID" c="10">
                            <X v="NON_ID" c="11" />
                        </C>
                    </C>
                    <C v="abstract_declarator" c="8">
                        <C v="pointer" c="12">
                            <X v="type_qualifier_list" c="14" />
                            <X v="pointer" c="15" />
                        </C>
                        <C v="direct_abstract_declarator" c="13">
                            <X v="constant_expression" c="16" />
                            <X v="parameter_type_list" c="17" />
                            <X v="abstract_declarator" c="18" />
                        </C>
                    </C>
                    <C v="specifier_qualifier_list" c="9">
                        <R v="USER_TYPE" c="19" />
                        <T v="type_qualifier" c="20" />
                        <R v="specifier_qualifier_list" c="21" />
                        <C v="type_specifier" c="22">
                            <X v="struct_specifier" c="23" />
                            <X v="union_specifier" c="24" />
                            <X v="enum_specifier" c="25" />
                        </C>
                    </C>
                </C>
                <T v="unary_operator" c="3" />
                <C v="cast_expression" c="4">
                    <R v="cast_expression" c="26" />
                    <R v="type_name" c="27" />
                    <R v="unary_expression" c="28" />
                </C>
                <C v="postfix_expression" c="5">
                    <X v="primary_expression" c="29" />
                    <X v="postfix_expression_second" c="30" />
                </C>
                <X v="unary_expression" c="6" />
            </C>
        </Called>
        <Caller>
            <C v="function_definition">
                <C v="external_declaration" c="2">
                    <T v="translation_unit" c="7" />
                </C>
                <C v="namespace" c="3">
                    <T v="pass" c="8" />
                    <R v="namespace" c="9" />
                    <C v="extern_compiled" c="10">
                        <R v="namespace" c="11" />
                    </C>
                </C>
                <R v="extern_compiled" c="4" />
                <R v="pass" c="5" />
                <C v="p_Block" c="6">
                    <C v="p_ifndef" c="12">
                        <C v="compilerSwitch" c="17">
                            <X v="preprocedure" c="18" />
                        </C>
                    </C>
                    <C v="p_if" c="13">
                        <R v="compilerSwitch" c="19" />
                    </C>
                    <C v="p_elif" c="14">
                        <R v="compilerSwitch" c="20" />
                    </C>
                    <C v="p_else" c="15">
                        <R v="compilerSwitch" c="21" />
                    </C>
                    <C v="p_ifdef" c="16">
                        <R v="compilerSwitch" c="22" />
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="elif_expr" uses="expression" usedBy=",elif_part,">
        <Expression>
            <Sequence>
                <String value="else" />
                <String value="if" />
                <String value="(" />
                <Terminating_Rule value="expression" />
                <String value=")" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <UsedBy_Terminated value="elif_part" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="2">
                    <T v="assignment_operator" c="3" />
                    <C v="conditional_expression" c="4">
                        <C v="logical_or_expression" c="8">
                            <X v="logical_and_expression" c="11" />
                        </C>
                        <R v="conditional_expression" c="9" />
                        <R v="expression" c="10" />
                    </C>
                    <R v="assignment_expression" c="5" />
                    <C v="cast_expression" c="6">
                        <R v="cast_expression" c="12" />
                        <C v="type_name" c="13">
                            <X v="USER_TYPE" c="15" />
                            <X v="abstract_declarator" c="16" />
                            <X v="specifier_qualifier_list" c="17" />
                        </C>
                        <C v="unary_expression" c="14">
                            <X v="type_name" c="18" />
                            <T v="unary_operator" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="postfix_expression" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                    </C>
                    <R v="unary_expression" c="7" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="elif_part">
                <C v="if_stmt" c="2">
                    <C v="statement" c="3">
                        <R v="elif_part" c="5" />
                        <C v="else_part" c="6">
                            <X v="if_stmt" c="20" />
                        </C>
                        <C v="p_Block" c="7">
                            <X v="p_ifndef" c="21" />
                            <X v="p_if" c="22" />
                            <X v="p_elif" c="23" />
                            <X v="p_else" c="24" />
                            <X v="p_ifdef" c="25" />
                        </C>
                        <C v="namespace" c="8">
                            <T v="pass" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                        </C>
                        <C v="extern_compiled" c="9">
                            <X v="namespace" c="29" />
                        </C>
                        <T v="pass" c="10" />
                        <C v="compound_statement" c="11">
                            <X v="methode_definition" c="30" />
                            <X v="statement" c="31" />
                            <X v="function_definition" c="32" />
                        </C>
                        <X v="case_part" c="12" />
                        <X v="default_part" c="13" />
                        <X v="if_part" c="14" />
                        <X v="switch_stmt" c="15" />
                        <X v="while_stmt" c="16" />
                        <X v="do_stmt" c="17" />
                        <X v="for_stmt" c="18" />
                        <X v="p_define" c="19" />
                    </C>
                    <X v="else_part" c="4" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="elif_part" uses="elif_expr,statement" usedBy=",if_stmt," recursiveUses="statement" recursiveUsedBy="if_stmt">
        <Expression>
            <Sequence>
                <Terminating_Rule value="elif_expr" />
                <Recursive_Rule value="statement" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="elif_expr" />
            <Uses_Recursive value="statement" />
            <UsedBy_Recursive value="if_stmt" />
        </Properties>
        <Called>
            <C v="elif_expr">
                <C v="expression" c="3">
                    <C v="assignment_expression" c="4">
                        <T v="assignment_operator" c="5" />
                        <C v="conditional_expression" c="6">
                            <X v="logical_or_expression" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="expression" c="12" />
                        </C>
                        <R v="assignment_expression" c="7" />
                        <C v="cast_expression" c="8">
                            <X v="cast_expression" c="13" />
                            <X v="type_name" c="14" />
                            <X v="unary_expression" c="15" />
                        </C>
                        <C v="unary_expression" c="9">
                            <X v="type_name" c="16" />
                            <T v="unary_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="postfix_expression" c="19" />
                            <X v="unary_expression" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="statement">
                <X v="break_stmt" c="21" />
                <X v="continue_stmt" c="22" />
                <X v="expr_stmt" c="23" />
                <X v="goto_stmt" c="24" />
                <X v="lable_stmt" c="25" />
                <X v="preprocedure" c="26" />
                <X v="return_stmt" c="27" />
                <X v="case_stmt" c="28" />
                <X v="compound_statement" c="29" />
                <X v="default_stmt" c="30" />
                <X v="do_stmt" c="31" />
                <X v="for_stmt" c="32" />
                <X v="if_stmt" c="33" />
                <X v="switch_stmt" c="34" />
                <X v="while_stmt" c="35" />
            </C>
        </Called>
        <Caller>
            <C v="if_stmt">
                <C v="statement" c="2">
                    <R v="elif_part" c="4" />
                    <C v="else_part" c="5">
                        <R v="if_stmt" c="19" />
                    </C>
                    <C v="p_Block" c="6">
                        <C v="p_ifndef" c="20">
                            <X v="compilerSwitch" c="25" />
                        </C>
                        <C v="p_if" c="21">
                            <X v="compilerSwitch" c="26" />
                        </C>
                        <C v="p_elif" c="22">
                            <X v="compilerSwitch" c="27" />
                        </C>
                        <C v="p_else" c="23">
                            <X v="compilerSwitch" c="28" />
                        </C>
                        <C v="p_ifdef" c="24">
                            <X v="compilerSwitch" c="29" />
                        </C>
                    </C>
                    <C v="namespace" c="7">
                        <T v="pass" c="30" />
                        <X v="namespace" c="31" />
                        <X v="extern_compiled" c="32" />
                    </C>
                    <X v="extern_compiled" c="8" />
                    <T v="pass" c="9" />
                    <X v="compound_statement" c="10" />
                    <X v="case_part" c="11" />
                    <X v="default_part" c="12" />
                    <X v="if_part" c="13" />
                    <X v="switch_stmt" c="14" />
                    <X v="while_stmt" c="15" />
                    <X v="do_stmt" c="16" />
                    <X v="for_stmt" c="17" />
                    <X v="p_define" c="18" />
                </C>
                <X v="else_part" c="3" />
            </C>
        </Caller>
    </Rule>
    <Rule value="else_part" uses="if_stmt,statement" usedBy=",if_stmt," recursiveUses="if_stmt" recursiveUsedBy="if_stmt">
        <Expression>
            <Sequence>
                <String value="else" />
                <Sub>
                    <Exclusion>
                        <First>
                            <Terminating_Rule value="statement" />
                        </First>
                        <Second>
                            <Recursive_Rule value="if_stmt" />
                        </Second>
                    </Exclusion>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="statement" />
            <Uses_Recursive value="if_stmt" />
            <UsedBy_Recursive value="if_stmt" />
        </Properties>
        <Called>
            <C v="statement">
                <C v="break_stmt" c="3">
                    <T v="semikolon" c="18" />
                </C>
                <C v="continue_stmt" c="4">
                    <R v="semikolon" c="19" />
                </C>
                <C v="expr_stmt" c="5">
                    <T v="empty_expression" c="20" />
                    <C v="expression" c="21">
                        <C v="assignment_expression" c="23">
                            <T v="assignment_operator" c="24" />
                            <X v="conditional_expression" c="25" />
                            <X v="assignment_expression" c="26" />
                            <X v="cast_expression" c="27" />
                            <X v="unary_expression" c="28" />
                        </C>
                    </C>
                    <R v="semikolon" c="22" />
                </C>
                <C v="goto_stmt" c="6">
                    <X v="ID" c="29" />
                    <T v="semikolon" c="30" />
                </C>
                <X v="lable_stmt" c="7" />
                <X v="preprocedure" c="8" />
                <X v="return_stmt" c="9" />
                <X v="case_stmt" c="10" />
                <X v="compound_statement" c="11" />
                <X v="default_stmt" c="12" />
                <X v="do_stmt" c="13" />
                <X v="for_stmt" c="14" />
                <X v="if_stmt" c="15" />
                <X v="switch_stmt" c="16" />
                <X v="while_stmt" c="17" />
            </C>
            <C v="if_stmt">
                <X v="if_part" c="31" />
                <X v="elif_part" c="32" />
                <X v="else_part" c="33" />
            </C>
        </Called>
        <Caller>
            <C v="if_stmt">
                <C v="statement" c="2">
                    <C v="elif_part" c="4">
                        <R v="if_stmt" c="19" />
                    </C>
                    <R v="else_part" c="5" />
                    <C v="p_Block" c="6">
                        <C v="p_ifndef" c="20">
                            <X v="compilerSwitch" c="25" />
                        </C>
                        <C v="p_if" c="21">
                            <X v="compilerSwitch" c="26" />
                        </C>
                        <C v="p_elif" c="22">
                            <X v="compilerSwitch" c="27" />
                        </C>
                        <C v="p_else" c="23">
                            <X v="compilerSwitch" c="28" />
                        </C>
                        <C v="p_ifdef" c="24">
                            <X v="compilerSwitch" c="29" />
                        </C>
                    </C>
                    <C v="namespace" c="7">
                        <T v="pass" c="30" />
                        <X v="namespace" c="31" />
                        <X v="extern_compiled" c="32" />
                    </C>
                    <X v="extern_compiled" c="8" />
                    <T v="pass" c="9" />
                    <X v="compound_statement" c="10" />
                    <X v="case_part" c="11" />
                    <X v="default_part" c="12" />
                    <X v="if_part" c="13" />
                    <X v="switch_stmt" c="14" />
                    <X v="while_stmt" c="15" />
                    <X v="do_stmt" c="16" />
                    <X v="for_stmt" c="17" />
                    <X v="p_define" c="18" />
                </C>
                <X v="else_part" c="3" />
            </C>
        </Caller>
    </Rule>
    <Rule value="empty_expression" uses="" usedBy=",expr_stmt,">
        <Expression>
            <String value=";" />
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="expr_stmt" />
        </Properties>
        <Called />
        <Caller>
            <C v="expr_stmt">
                <C v="statement" c="2">
                    <C v="elif_part" c="4">
                        <C v="if_stmt" c="19">
                            <X v="statement" c="20" />
                            <X v="else_part" c="21" />
                        </C>
                    </C>
                    <C v="else_part" c="5">
                        <R v="if_stmt" c="22" />
                    </C>
                    <C v="p_Block" c="6">
                        <C v="p_ifndef" c="23">
                            <X v="compilerSwitch" c="28" />
                        </C>
                        <C v="p_if" c="24">
                            <X v="compilerSwitch" c="29" />
                        </C>
                        <C v="p_elif" c="25">
                            <X v="compilerSwitch" c="30" />
                        </C>
                        <X v="p_else" c="26" />
                        <X v="p_ifdef" c="27" />
                    </C>
                    <X v="namespace" c="7" />
                    <X v="extern_compiled" c="8" />
                    <T v="pass" c="9" />
                    <X v="compound_statement" c="10" />
                    <X v="case_part" c="11" />
                    <X v="default_part" c="12" />
                    <X v="if_part" c="13" />
                    <X v="switch_stmt" c="14" />
                    <X v="while_stmt" c="15" />
                    <X v="do_stmt" c="16" />
                    <X v="for_stmt" c="17" />
                    <X v="p_define" c="18" />
                </C>
                <X v="for_expr" c="3" />
            </C>
        </Caller>
    </Rule>
    <Rule value="endOfTextLine" uses="" usedBy=",p_text,">
        <Expression>
            <Sub>
                <OrInclusive>
                    <Sub>
                        <Sequence>
                            <Character_Single value="\r" />
                            <ZeroOrOneOf>
                                <Character_Single value="\n" />
                            </ZeroOrOneOf>
                        </Sequence>
                    </Sub>
                    <Character_Single value="\n" />
                </OrInclusive>
            </Sub>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="p_text" />
        </Properties>
        <Called />
        <Caller>
            <C v="p_text">
                <C v="p_define" c="2">
                    <C v="preprocedure" c="10">
                        <C v="compound_statement" c="11">
                            <X v="methode_definition" c="21" />
                            <X v="statement" c="22" />
                            <X v="function_definition" c="23" />
                        </C>
                        <C v="p_Block" c="12">
                            <X v="p_ifndef" c="24" />
                            <X v="p_if" c="25" />
                            <X v="p_elif" c="26" />
                            <X v="p_else" c="27" />
                            <X v="p_ifdef" c="28" />
                        </C>
                        <C v="external_declaration" c="13">
                            <T v="translation_unit" c="29" />
                        </C>
                        <C v="public" c="14">
                            <X v="class_content" c="30" />
                        </C>
                        <X v="protected" c="15" />
                        <X v="private" c="16" />
                        <X v="namespace" c="17" />
                        <X v="extern_compiled" c="18" />
                        <T v="pass" c="19" />
                        <X v="statement" c="20" />
                    </C>
                </C>
                <X v="p_include" c="3" />
                <X v="p_pragma" c="4" />
                <X v="p_line" c="5" />
                <X v="p_error" c="6" />
                <X v="p_warning" c="7" />
                <X v="p_Block" c="8" />
                <X v="p_pragma_simple" c="9" />
            </C>
        </Caller>
    </Rule>
    <Rule value="enum_specifier" uses="ID,enumerator" usedBy=",type_specifier,property," recursiveUses="enumerator" recursiveUsedBy="type_specifier">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <String value="enum" />
                        <Sub>
                            <OrInclusive>
                                <String value="{" />
                                <String value="&lt;%" />
                            </OrInclusive>
                        </Sub>
                        <OneOrMoreOf>
                            <Recursive_Rule value="enumerator" />
                        </OneOrMoreOf>
                        <Sub>
                            <OrInclusive>
                                <String value="}" />
                                <String value="%&gt;" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="enum" />
                        <Terminating_Rule value="ID" />
                        <Sub>
                            <OrInclusive>
                                <String value="{" />
                                <String value="&lt;%" />
                            </OrInclusive>
                        </Sub>
                        <OneOrMoreOf>
                            <Recursive_Rule value="enumerator" />
                        </OneOrMoreOf>
                        <Sub>
                            <OrInclusive>
                                <String value="}" />
                                <String value="%&gt;" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="enum" />
                        <Terminating_Rule value="ID" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Recursive value="enumerator" />
            <UsedBy_Terminated value="property" />
            <UsedBy_Recursive value="type_specifier" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <C v="enumerator">
                <C v="ID" c="6" />
                <C v="constant_expression" c="7">
                    <C v="conditional_expression" c="8">
                        <C v="logical_or_expression" c="9">
                            <X v="logical_and_expression" c="12" />
                        </C>
                        <R v="conditional_expression" c="10" />
                        <C v="expression" c="11">
                            <X v="assignment_expression" c="13" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="property">
                <C v="public" c="3">
                    <C v="class_content" c="6">
                        <C v="class_definition" c="7">
                            <X v="external_declaration" c="8" />
                            <X v="namespace" c="9" />
                            <X v="extern_compiled" c="10" />
                            <T v="pass" c="11" />
                            <X v="p_Block" c="12" />
                        </C>
                    </C>
                </C>
                <C v="protected" c="4">
                    <R v="class_content" c="13" />
                </C>
                <C v="private" c="5">
                    <R v="class_content" c="14" />
                </C>
            </C>
            <C v="type_specifier">
                <C v="declaration_specifier" c="15">
                    <C v="parameter_declaration" c="20">
                        <C v="parameter_list" c="29">
                            <X v="parameter_type_list" c="30" />
                        </C>
                    </C>
                    <X v="function_definition" c="21" />
                    <X v="prototype_parameter" c="22" />
                    <X v="function_prototype" c="23" />
                    <X v="operator" c="24" />
                    <X v="service" c="25" />
                    <X v="property" c="26" />
                    <X v="declaration" c="27" />
                    <X v="template_type" c="28" />
                </C>
                <X v="specifier_qualifier_list" c="16" />
                <X v="Owner" c="17" />
                <X v="calss_parent" c="18" />
                <X v="primary_expression" c="19" />
            </C>
        </Caller>
    </Rule>
    <Rule value="enumerator" uses="ID,constant_expression" usedBy=",enum_specifier," recursiveUses="constant_expression" recursiveUsedBy="enum_specifier">
        <Expression>
            <Sequence>
                <Sub>
                    <OrInclusive>
                        <Sub>
                            <Sequence>
                                <Terminating_Rule value="ID" />
                                <String value="=" />
                                <Recursive_Rule value="constant_expression" />
                            </Sequence>
                        </Sub>
                        <Terminating_Rule value="ID" />
                    </OrInclusive>
                </Sub>
                <ZeroOrOneOf>
                    <Sub>
                        <Character_Single value="," />
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Recursive value="constant_expression" />
            <UsedBy_Recursive value="enum_specifier" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <C v="constant_expression">
                <C v="conditional_expression" c="6">
                    <C v="logical_or_expression" c="7">
                        <C v="logical_and_expression" c="10">
                            <X v="inclusive_or_expression" c="11" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="8" />
                    <C v="expression" c="9">
                        <C v="assignment_expression" c="12">
                            <T v="assignment_operator" c="13" />
                            <X v="conditional_expression" c="14" />
                            <X v="assignment_expression" c="15" />
                            <X v="cast_expression" c="16" />
                            <X v="unary_expression" c="17" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="enum_specifier">
                <C v="property" c="2">
                    <C v="public" c="4">
                        <C v="class_content" c="7">
                            <X v="class_definition" c="8" />
                        </C>
                    </C>
                    <C v="protected" c="5">
                        <R v="class_content" c="9" />
                    </C>
                    <C v="private" c="6">
                        <R v="class_content" c="10" />
                    </C>
                </C>
                <C v="type_specifier" c="3">
                    <C v="declaration_specifier" c="11">
                        <C v="parameter_declaration" c="16">
                            <X v="parameter_list" c="25" />
                        </C>
                        <C v="function_definition" c="17">
                            <X v="external_declaration" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                            <T v="pass" c="29" />
                            <X v="p_Block" c="30" />
                        </C>
                        <X v="prototype_parameter" c="18" />
                        <X v="function_prototype" c="19" />
                        <X v="operator" c="20" />
                        <X v="service" c="21" />
                        <X v="property" c="22" />
                        <X v="declaration" c="23" />
                        <X v="template_type" c="24" />
                    </C>
                    <X v="specifier_qualifier_list" c="12" />
                    <X v="Owner" c="13" />
                    <X v="calss_parent" c="14" />
                    <X v="primary_expression" c="15" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="equality_expression" uses="relational_expression" usedBy=",and_expression," recursiveUses="relational_expression" recursiveUsedBy="and_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="relational_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <String value="==" />
                                    <String value="!=" />
                                </OrInclusive>
                            </Sub>
                            <Recursive_Rule value="relational_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="relational_expression" />
            <UsedBy_Recursive value="and_expression" />
        </Properties>
        <Called>
            <C v="relational_expression">
                <C v="shift_expression" c="2">
                    <C v="additive_expression" c="3">
                        <C v="multiplicative_expression" c="4">
                            <X v="cast_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="and_expression">
                <C v="exclusive_or_expression" c="2">
                    <C v="inclusive_or_expression" c="3">
                        <C v="logical_and_expression" c="4">
                            <X v="logical_or_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="exclusive_or_expression" uses="and_expression" usedBy=",inclusive_or_expression," recursiveUses="and_expression" recursiveUsedBy="inclusive_or_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="and_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <String value="^" />
                            </Sub>
                            <Recursive_Rule value="and_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="and_expression" />
            <UsedBy_Recursive value="inclusive_or_expression" />
        </Properties>
        <Called>
            <C v="and_expression">
                <C v="equality_expression" c="2">
                    <C v="relational_expression" c="3">
                        <C v="shift_expression" c="4">
                            <X v="additive_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="inclusive_or_expression">
                <C v="logical_and_expression" c="2">
                    <C v="logical_or_expression" c="3">
                        <C v="conditional_expression" c="4">
                            <X v="constant_expression" c="5" />
                            <X v="conditional_expression" c="6" />
                            <X v="assignment_expression" c="7" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="expr_stmt" uses="empty_expression,expression,semikolon" usedBy=",statement,for_expr,">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="expression" />
                        <ZeroOrOneOf>
                            <Sub>
                                <Terminating_Rule value="semikolon" />
                            </Sub>
                        </ZeroOrOneOf>
                    </Sequence>
                </Sub>
                <Terminating_Rule value="empty_expression" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="empty_expression" />
            <Uses_Terminated value="expression" />
            <Uses_Terminated value="semikolon" />
            <UsedBy_Terminated value="statement" />
            <UsedBy_Terminated value="for_expr" />
        </Properties>
        <Called>
            <T v="empty_expression" />
            <C v="expression">
                <C v="assignment_expression" c="4">
                    <T v="assignment_operator" c="5" />
                    <C v="conditional_expression" c="6">
                        <C v="logical_or_expression" c="10">
                            <X v="logical_and_expression" c="13" />
                        </C>
                        <R v="conditional_expression" c="11" />
                        <R v="expression" c="12" />
                    </C>
                    <R v="assignment_expression" c="7" />
                    <C v="cast_expression" c="8">
                        <R v="cast_expression" c="14" />
                        <C v="type_name" c="15">
                            <X v="USER_TYPE" c="17" />
                            <X v="abstract_declarator" c="18" />
                            <X v="specifier_qualifier_list" c="19" />
                        </C>
                        <C v="unary_expression" c="16">
                            <X v="type_name" c="20" />
                            <T v="unary_operator" c="21" />
                            <X v="cast_expression" c="22" />
                            <X v="postfix_expression" c="23" />
                            <X v="unary_expression" c="24" />
                        </C>
                    </C>
                    <R v="unary_expression" c="9" />
                </C>
            </C>
            <T v="semikolon" />
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="3">
                    <C v="if_stmt" c="18">
                        <R v="statement" c="19" />
                        <C v="else_part" c="20">
                            <X v="if_stmt" c="21" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="4" />
                <C v="p_Block" c="5">
                    <C v="p_ifndef" c="22">
                        <C v="compilerSwitch" c="27">
                            <X v="preprocedure" c="28" />
                        </C>
                    </C>
                    <C v="p_if" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_elif" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_else" c="25" />
                    <X v="p_ifdef" c="26" />
                </C>
                <X v="namespace" c="6" />
                <X v="extern_compiled" c="7" />
                <T v="pass" c="8" />
                <X v="compound_statement" c="9" />
                <X v="case_part" c="10" />
                <X v="default_part" c="11" />
                <X v="if_part" c="12" />
                <X v="switch_stmt" c="13" />
                <X v="while_stmt" c="14" />
                <X v="do_stmt" c="15" />
                <X v="for_stmt" c="16" />
                <X v="p_define" c="17" />
            </C>
            <C v="for_expr">
                <X v="for_stmt" c="31" />
            </C>
        </Caller>
    </Rule>
    <Rule value="expression" uses="assignment_expression" usedBy=",primary_expression,postfix_expression_second,conditional_expression,direct_parameter_declarator,expr_stmt,if_expr,elif_expr,switch_expr,while_expr,for_expr,return_stmt,p_ifdef_expr,p_ifndef_expr,p_if_expr,p_elif_expr,p_define,methode_definition," recursiveUses="assignment_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="assignment_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <String value="," />
                            </Sub>
                            <Recursive_Rule value="assignment_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="assignment_expression" />
            <UsedBy_Terminated value="primary_expression" />
            <UsedBy_Terminated value="postfix_expression_second" />
            <UsedBy_Terminated value="conditional_expression" />
            <UsedBy_Terminated value="direct_parameter_declarator" />
            <UsedBy_Terminated value="expr_stmt" />
            <UsedBy_Terminated value="if_expr" />
            <UsedBy_Terminated value="elif_expr" />
            <UsedBy_Terminated value="switch_expr" />
            <UsedBy_Terminated value="while_expr" />
            <UsedBy_Terminated value="for_expr" />
            <UsedBy_Terminated value="return_stmt" />
            <UsedBy_Terminated value="p_ifdef_expr" />
            <UsedBy_Terminated value="p_ifndef_expr" />
            <UsedBy_Terminated value="p_if_expr" />
            <UsedBy_Terminated value="p_elif_expr" />
            <UsedBy_Terminated value="p_define" />
            <UsedBy_Terminated value="methode_definition" />
        </Properties>
        <Called>
            <C v="assignment_expression">
                <T v="assignment_operator" c="2" />
                <C v="conditional_expression" c="3">
                    <C v="logical_or_expression" c="7">
                        <C v="logical_and_expression" c="10">
                            <X v="inclusive_or_expression" c="11" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="8" />
                    <R v="expression" c="9" />
                </C>
                <R v="assignment_expression" c="4" />
                <C v="cast_expression" c="5">
                    <R v="cast_expression" c="12" />
                    <C v="type_name" c="13">
                        <C v="USER_TYPE" c="15">
                            <X v="ID" c="18" />
                        </C>
                        <C v="abstract_declarator" c="16">
                            <X v="pointer" c="19" />
                            <X v="direct_abstract_declarator" c="20" />
                        </C>
                        <C v="specifier_qualifier_list" c="17">
                            <X v="USER_TYPE" c="21" />
                            <T v="type_qualifier" c="22" />
                            <X v="specifier_qualifier_list" c="23" />
                            <X v="type_specifier" c="24" />
                        </C>
                    </C>
                    <C v="unary_expression" c="14">
                        <R v="type_name" c="25" />
                        <T v="unary_operator" c="26" />
                        <R v="cast_expression" c="27" />
                        <C v="postfix_expression" c="28">
                            <X v="primary_expression" c="30" />
                            <X v="postfix_expression_second" c="31" />
                        </C>
                        <X v="unary_expression" c="29" />
                    </C>
                </C>
                <X v="unary_expression" c="6" />
            </C>
        </Called>
        <Caller>
            <C v="primary_expression">
                <C v="postfix_expression" c="18">
                    <C v="unary_expression" c="19">
                        <C v="element_initializer" c="20">
                            <X v="function_definition" c="25" />
                        </C>
                        <R v="unary_expression" c="21" />
                        <C v="cast_expression" c="22">
                            <X v="assignment_expression" c="26" />
                            <X v="parameter_declaration" c="27" />
                            <X v="unary_expression" c="28" />
                            <X v="cast_expression" c="29" />
                            <X v="multiplicative_expression" c="30" />
                        </C>
                        <X v="assignment_expression" c="23" />
                        <X v="parameter_declaration" c="24" />
                    </C>
                </C>
            </C>
            <C v="postfix_expression_second">
                <X v="postfix_expression" c="31" />
            </C>
            <C v="conditional_expression">
                <X v="constant_expression" c="32" />
                <X v="conditional_expression" c="33" />
                <X v="assignment_expression" c="34" />
            </C>
            <C v="direct_parameter_declarator">
                <X v="parameter_function" c="35" />
                <X v="p_declarator" c="36" />
                <X v="destructor" c="37" />
                <X v="direct_declarator_second" c="38" />
            </C>
            <C v="expr_stmt">
                <X v="statement" c="39" />
                <X v="for_expr" c="40" />
            </C>
            <C v="if_expr">
                <X v="if_part" c="41" />
            </C>
            <C v="elif_expr">
                <X v="elif_part" c="42" />
            </C>
            <C v="switch_expr">
                <X v="switch_stmt" c="43" />
            </C>
            <C v="while_expr">
                <X v="while_stmt" c="44" />
                <X v="do_stmt" c="45" />
            </C>
            <C v="for_expr">
                <X v="for_stmt" c="46" />
            </C>
            <C v="return_stmt">
                <X v="statement" c="47" />
                <T v="jump_statement" c="48" />
            </C>
            <C v="p_ifdef_expr">
                <X v="p_ifdef" c="49" />
            </C>
            <C v="p_ifndef_expr">
                <X v="p_ifndef" c="50" />
            </C>
            <C v="p_if_expr">
                <X v="p_if" c="51" />
            </C>
            <C v="p_elif_expr">
                <X v="p_elif" c="52" />
            </C>
            <C v="p_define">
                <X v="preprocedure" c="53" />
            </C>
            <C v="methode_definition">
                <X v="protected" c="54" />
                <X v="private" c="55" />
                <X v="public" c="56" />
            </C>
        </Caller>
    </Rule>
    <Rule value="extern_compiled" uses="String,class_definition,declaration,function_definition,function_prototype,namespace,preprocedure,semikolon,statement,storage_class_specifier,using_namespace" usedBy=",namespace," recursiveUses="namespace" recursiveUsedBy="namespace">
        <Expression>
            <Sequence>
                <Terminating_Rule value="storage_class_specifier" />
                <Terminating_Rule value="String" />
                <Character_Single value="{" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <Recursive_Rule value="namespace" />
                                    <Terminating_Rule value="using_namespace" />
                                    <Terminating_Rule value="preprocedure" />
                                    <Terminating_Rule value="class_definition" />
                                    <Terminating_Rule value="function_prototype" />
                                    <Terminating_Rule value="declaration" />
                                    <Terminating_Rule value="function_definition" />
                                    <Terminating_Rule value="statement" />
                                </OrInclusive>
                            </Sub>
                            <ZeroOrOneOf>
                                <Sub>
                                    <OrInclusive>
                                        <Character_Single value="," />
                                        <Character_Single value=";" />
                                    </OrInclusive>
                                </Sub>
                            </ZeroOrOneOf>
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
                <Character_Single value="}" />
                <ZeroOrOneOf>
                    <Terminating_Rule value="semikolon" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="String" />
            <Uses_Terminated value="class_definition" />
            <Uses_Terminated value="declaration" />
            <Uses_Terminated value="function_definition" />
            <Uses_Terminated value="function_prototype" />
            <Uses_Terminated value="preprocedure" />
            <Uses_Terminated value="semikolon" />
            <Uses_Terminated value="statement" />
            <Uses_Terminated value="storage_class_specifier" />
            <Uses_Terminated value="using_namespace" />
            <Uses_Recursive value="namespace" />
            <UsedBy_Recursive value="namespace" />
        </Properties>
        <Called>
            <T v="String" />
            <C v="class_definition">
                <C v="ID" c="12">
                    <C v="NON_ID" c="16">
                        <T v="not_reseved" c="17" />
                        <T v="reserved" c="18" />
                    </C>
                </C>
                <C v="calss_parent" c="13">
                    <R v="ID" c="19" />
                    <C v="Owner" c="20">
                        <R v="ID" c="23" />
                        <C v="template_type" c="24">
                            <X v="ID" c="26" />
                            <X v="declaration_specifier" c="27" />
                        </C>
                        <C v="type_specifier" c="25">
                            <X v="struct_specifier" c="28" />
                            <X v="union_specifier" c="29" />
                            <X v="enum_specifier" c="30" />
                        </C>
                    </C>
                    <X v="template_type" c="21" />
                    <X v="type_specifier" c="22" />
                </C>
                <T v="semikolon" c="14" />
                <X v="class_content" c="15" />
            </C>
            <C v="declaration">
                <X v="init_declarator" c="31" />
                <T v="semikolon" c="32" />
                <X v="declaration_specifier" c="33" />
            </C>
            <C v="function_definition">
                <X v="declaration" c="34" />
                <X v="declaration_specifier" c="35" />
                <X v="declarator" c="36" />
                <X v="element_initializer" c="37" />
                <X v="compound_statement" c="38" />
            </C>
            <C v="function_prototype">
                <X v="ID" c="39" />
                <X v="declaration_specifier" c="40" />
                <X v="prototype_parameter_list" c="41" />
                <T v="semikolon" c="42" />
                <T v="type_qualifier" c="43" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="44" />
                <X v="p_include" c="45" />
                <X v="p_line" c="46" />
                <X v="p_pragma" c="47" />
                <X v="p_undefine" c="48" />
                <X v="p_warning" c="49" />
                <X v="compilerSwitch" c="50" />
                <X v="p_define" c="51" />
            </C>
            <T v="semikolon" />
            <C v="statement">
                <X v="break_stmt" c="52" />
                <X v="continue_stmt" c="53" />
                <X v="expr_stmt" c="54" />
                <X v="goto_stmt" c="55" />
                <X v="lable_stmt" c="56" />
                <X v="preprocedure" c="57" />
                <X v="return_stmt" c="58" />
                <X v="case_stmt" c="59" />
                <X v="compound_statement" c="60" />
                <X v="default_stmt" c="61" />
                <X v="do_stmt" c="62" />
                <X v="for_stmt" c="63" />
                <X v="if_stmt" c="64" />
                <X v="switch_stmt" c="65" />
                <X v="while_stmt" c="66" />
            </C>
            <T v="storage_class_specifier" />
            <C v="using_namespace">
                <X v="ID" c="67" />
                <T v="semikolon" c="68" />
            </C>
            <C v="namespace">
                <X v="ID" c="69" />
                <X v="class_definition" c="70" />
                <X v="declaration" c="71" />
                <X v="function_definition" c="72" />
                <X v="function_prototype" c="73" />
                <X v="preprocedure" c="74" />
                <T v="semikolon" c="75" />
                <X v="statement" c="76" />
                <X v="using_namespace" c="77" />
                <X v="extern_compiled" c="78" />
                <X v="namespace" c="79" />
            </C>
        </Called>
        <Caller>
            <C v="namespace">
                <T v="pass" c="2" />
                <R v="namespace" c="3" />
                <R v="extern_compiled" c="4" />
            </C>
        </Caller>
    </Rule>
    <Rule value="external_declaration" uses="declaration,function_definition,function_prototype,preprocedure" usedBy=",translation_unit,">
        <Expression>
            <OrInclusive>
                <Terminating_Rule value="preprocedure" />
                <Terminating_Rule value="function_prototype" />
                <Terminating_Rule value="declaration" />
                <Terminating_Rule value="function_definition" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="1" characterLevel="phrased">
            <Uses_Terminated value="declaration" />
            <Uses_Terminated value="function_definition" />
            <Uses_Terminated value="function_prototype" />
            <Uses_Terminated value="preprocedure" />
            <UsedBy_Terminated value="translation_unit" />
        </Properties>
        <Called>
            <C v="declaration">
                <C v="init_declarator" c="5">
                    <C v="Number" c="8">
                        <T v="CONSTANT_CHAR" c="11" />
                        <T v="CONSTANT_FLT1" c="12" />
                        <T v="CONSTANT_FLT2" c="13" />
                        <T v="CONSTANT_FLT3" c="14" />
                        <T v="CONSTANT_HEX" c="15" />
                        <T v="CONSTANT_INT0" c="16" />
                        <T v="CONSTANT_INT1" c="17" />
                    </C>
                    <C v="initializer" c="9">
                        <C v="assignment_expression" c="18">
                            <T v="assignment_operator" c="20" />
                            <X v="conditional_expression" c="21" />
                            <X v="assignment_expression" c="22" />
                            <X v="cast_expression" c="23" />
                            <X v="unary_expression" c="24" />
                        </C>
                        <C v="initializer_list" c="19">
                            <X v="initializer" c="25" />
                        </C>
                    </C>
                    <C v="declarator" c="10">
                        <C v="pointer" c="26">
                            <X v="type_qualifier_list" c="29" />
                            <X v="pointer" c="30" />
                        </C>
                        <X v="direct_declarator" c="27" />
                        <X v="funcPoint_declarator" c="28" />
                    </C>
                </C>
                <T v="semikolon" c="6" />
                <X v="declaration_specifier" c="7" />
            </C>
            <C v="function_definition">
                <X v="declaration" c="31" />
                <X v="declaration_specifier" c="32" />
                <X v="declarator" c="33" />
                <X v="element_initializer" c="34" />
                <X v="compound_statement" c="35" />
            </C>
            <C v="function_prototype">
                <X v="ID" c="36" />
                <X v="declaration_specifier" c="37" />
                <X v="prototype_parameter_list" c="38" />
                <T v="semikolon" c="39" />
                <T v="type_qualifier" c="40" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="41" />
                <X v="p_include" c="42" />
                <X v="p_line" c="43" />
                <X v="p_pragma" c="44" />
                <X v="p_undefine" c="45" />
                <X v="p_warning" c="46" />
                <X v="compilerSwitch" c="47" />
                <X v="p_define" c="48" />
            </C>
        </Called>
        <Caller>
            <T v="translation_unit" />
        </Caller>
    </Rule>
    <Rule value="external_declaration" uses="class_definition,declaration,function_definition,function_prototype,preprocedure" usedBy=",translation_unit,">
        <Expression>
            <OrInclusive>
                <Terminating_Rule value="preprocedure" />
                <Terminating_Rule value="function_prototype" />
                <Terminating_Rule value="declaration" />
                <Terminating_Rule value="class_definition" />
                <Terminating_Rule value="function_definition" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="1" characterLevel="phrased">
            <Uses_Terminated value="class_definition" />
            <Uses_Terminated value="declaration" />
            <Uses_Terminated value="function_definition" />
            <Uses_Terminated value="function_prototype" />
            <Uses_Terminated value="preprocedure" />
            <UsedBy_Terminated value="translation_unit" />
        </Properties>
        <Called>
            <C v="class_definition">
                <C v="ID" c="6">
                    <C v="NON_ID" c="10">
                        <T v="not_reseved" c="11" />
                        <T v="reserved" c="12" />
                    </C>
                </C>
                <C v="calss_parent" c="7">
                    <R v="ID" c="13" />
                    <C v="Owner" c="14">
                        <R v="ID" c="17" />
                        <C v="template_type" c="18">
                            <X v="ID" c="20" />
                            <X v="declaration_specifier" c="21" />
                        </C>
                        <C v="type_specifier" c="19">
                            <X v="struct_specifier" c="22" />
                            <X v="union_specifier" c="23" />
                            <X v="enum_specifier" c="24" />
                        </C>
                    </C>
                    <R v="template_type" c="15" />
                    <R v="type_specifier" c="16" />
                </C>
                <T v="semikolon" c="8" />
                <C v="class_content" c="9">
                    <C v="protected" c="25">
                        <X v="methode" c="28" />
                        <X v="preprocedure" c="29" />
                        <X v="property" c="30" />
                        <X v="methode_definition" c="31" />
                    </C>
                    <X v="public" c="26" />
                    <X v="private" c="27" />
                </C>
            </C>
            <C v="declaration">
                <X v="init_declarator" c="32" />
                <T v="semikolon" c="33" />
                <X v="declaration_specifier" c="34" />
            </C>
            <C v="function_definition">
                <X v="declaration" c="35" />
                <X v="declaration_specifier" c="36" />
                <X v="declarator" c="37" />
                <X v="element_initializer" c="38" />
                <X v="compound_statement" c="39" />
            </C>
            <C v="function_prototype">
                <X v="ID" c="40" />
                <X v="declaration_specifier" c="41" />
                <X v="prototype_parameter_list" c="42" />
                <T v="semikolon" c="43" />
                <T v="type_qualifier" c="44" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="45" />
                <X v="p_include" c="46" />
                <X v="p_line" c="47" />
                <X v="p_pragma" c="48" />
                <X v="p_undefine" c="49" />
                <X v="p_warning" c="50" />
                <X v="compilerSwitch" c="51" />
                <X v="p_define" c="52" />
            </C>
        </Called>
        <Caller>
            <T v="translation_unit" />
        </Caller>
    </Rule>
    <Rule value="for_expr" uses="declaration,expr_stmt,expression" usedBy=",for_stmt,">
        <Expression>
            <Sequence>
                <String value="for" />
                <String value="(" />
                <Sub>
                    <OrInclusive>
                        <Terminating_Rule value="declaration" />
                        <Terminating_Rule value="expr_stmt" />
                    </OrInclusive>
                </Sub>
                <Terminating_Rule value="expr_stmt" />
                <ZeroOrOneOf>
                    <Terminating_Rule value="expression" />
                </ZeroOrOneOf>
                <String value=")" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="declaration" />
            <Uses_Terminated value="expr_stmt" />
            <Uses_Terminated value="expression" />
            <UsedBy_Terminated value="for_stmt" />
        </Properties>
        <Called>
            <C v="declaration">
                <C v="init_declarator" c="4">
                    <C v="Number" c="7">
                        <T v="CONSTANT_CHAR" c="10" />
                        <T v="CONSTANT_FLT1" c="11" />
                        <T v="CONSTANT_FLT2" c="12" />
                        <T v="CONSTANT_FLT3" c="13" />
                        <T v="CONSTANT_HEX" c="14" />
                        <T v="CONSTANT_INT0" c="15" />
                        <T v="CONSTANT_INT1" c="16" />
                    </C>
                    <C v="initializer" c="8">
                        <C v="assignment_expression" c="17">
                            <T v="assignment_operator" c="19" />
                            <X v="conditional_expression" c="20" />
                            <X v="assignment_expression" c="21" />
                            <X v="cast_expression" c="22" />
                            <X v="unary_expression" c="23" />
                        </C>
                        <C v="initializer_list" c="18">
                            <X v="initializer" c="24" />
                        </C>
                    </C>
                    <C v="declarator" c="9">
                        <C v="pointer" c="25">
                            <X v="type_qualifier_list" c="28" />
                            <X v="pointer" c="29" />
                        </C>
                        <C v="direct_declarator" c="26">
                            <X v="ID" c="30" />
                            <T v="operator_id" c="31" />
                            <X v="owned_ID" c="32" />
                            <T v="type_qualifier" c="33" />
                            <X v="direct_declarator_second" c="34" />
                        </C>
                        <X v="funcPoint_declarator" c="27" />
                    </C>
                </C>
                <T v="semikolon" c="5" />
                <X v="declaration_specifier" c="6" />
            </C>
            <C v="expr_stmt">
                <T v="empty_expression" c="35" />
                <X v="expression" c="36" />
                <T v="semikolon" c="37" />
            </C>
            <C v="expression">
                <X v="assignment_expression" c="38" />
            </C>
        </Called>
        <Caller>
            <C v="for_stmt">
                <T v="iteration_statement" c="2" />
                <C v="statement" c="3">
                    <C v="elif_part" c="4">
                        <C v="if_stmt" c="19">
                            <X v="statement" c="20" />
                            <X v="else_part" c="21" />
                        </C>
                    </C>
                    <C v="else_part" c="5">
                        <R v="if_stmt" c="22" />
                    </C>
                    <C v="p_Block" c="6">
                        <C v="p_ifndef" c="23">
                            <X v="compilerSwitch" c="28" />
                        </C>
                        <C v="p_if" c="24">
                            <X v="compilerSwitch" c="29" />
                        </C>
                        <C v="p_elif" c="25">
                            <X v="compilerSwitch" c="30" />
                        </C>
                        <X v="p_else" c="26" />
                        <X v="p_ifdef" c="27" />
                    </C>
                    <X v="namespace" c="7" />
                    <X v="extern_compiled" c="8" />
                    <T v="pass" c="9" />
                    <X v="compound_statement" c="10" />
                    <X v="case_part" c="11" />
                    <X v="default_part" c="12" />
                    <X v="if_part" c="13" />
                    <X v="switch_stmt" c="14" />
                    <X v="while_stmt" c="15" />
                    <X v="do_stmt" c="16" />
                    <X v="for_stmt" c="17" />
                    <X v="p_define" c="18" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="for_stmt" uses="for_expr,statement" usedBy=",statement,iteration_statement," recursiveUses="statement" recursiveUsedBy="statement">
        <Expression>
            <Sequence>
                <Terminating_Rule value="for_expr" />
                <Recursive_Rule value="statement" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="for_expr" />
            <Uses_Recursive value="statement" />
            <UsedBy_Terminated value="iteration_statement" />
            <UsedBy_Recursive value="statement" />
        </Properties>
        <Called>
            <C v="for_expr">
                <C v="declaration" c="3">
                    <C v="init_declarator" c="6">
                        <C v="Number" c="9">
                            <T v="CONSTANT_CHAR" c="12" />
                            <T v="CONSTANT_FLT1" c="13" />
                            <T v="CONSTANT_FLT2" c="14" />
                            <T v="CONSTANT_FLT3" c="15" />
                            <T v="CONSTANT_HEX" c="16" />
                            <T v="CONSTANT_INT0" c="17" />
                            <T v="CONSTANT_INT1" c="18" />
                        </C>
                        <C v="initializer" c="10">
                            <X v="assignment_expression" c="19" />
                            <X v="initializer_list" c="20" />
                        </C>
                        <C v="declarator" c="11">
                            <X v="pointer" c="21" />
                            <X v="direct_declarator" c="22" />
                            <X v="funcPoint_declarator" c="23" />
                        </C>
                    </C>
                    <T v="semikolon" c="7" />
                    <C v="declaration_specifier" c="8">
                        <C v="USER_TYPE" c="24">
                            <X v="ID" c="30" />
                        </C>
                        <T v="storage_class_specifier" c="25" />
                        <X v="template_type" c="26" />
                        <T v="type_qualifier" c="27" />
                        <X v="Owner" c="28" />
                        <X v="type_specifier" c="29" />
                    </C>
                </C>
                <X v="expr_stmt" c="4" />
                <X v="expression" c="5" />
            </C>
            <C v="statement">
                <X v="break_stmt" c="31" />
                <X v="continue_stmt" c="32" />
                <X v="expr_stmt" c="33" />
                <X v="goto_stmt" c="34" />
                <X v="lable_stmt" c="35" />
                <X v="preprocedure" c="36" />
                <X v="return_stmt" c="37" />
                <X v="case_stmt" c="38" />
                <X v="compound_statement" c="39" />
                <X v="default_stmt" c="40" />
                <X v="do_stmt" c="41" />
                <X v="for_stmt" c="42" />
                <X v="if_stmt" c="43" />
                <X v="switch_stmt" c="44" />
                <X v="while_stmt" c="45" />
            </C>
        </Called>
        <Caller>
            <T v="iteration_statement" />
            <C v="statement">
                <C v="elif_part" c="3">
                    <C v="if_stmt" c="18">
                        <R v="statement" c="19" />
                        <C v="else_part" c="20">
                            <X v="if_stmt" c="21" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="4" />
                <C v="p_Block" c="5">
                    <C v="p_ifndef" c="22">
                        <C v="compilerSwitch" c="27">
                            <X v="preprocedure" c="28" />
                        </C>
                    </C>
                    <C v="p_if" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_elif" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_else" c="25" />
                    <X v="p_ifdef" c="26" />
                </C>
                <X v="namespace" c="6" />
                <X v="extern_compiled" c="7" />
                <T v="pass" c="8" />
                <X v="compound_statement" c="9" />
                <X v="case_part" c="10" />
                <X v="default_part" c="11" />
                <X v="if_part" c="12" />
                <X v="switch_stmt" c="13" />
                <X v="while_stmt" c="14" />
                <X v="do_stmt" c="15" />
                <X v="for_stmt" c="16" />
                <X v="p_define" c="17" />
            </C>
        </Caller>
    </Rule>
    <Rule value="friend" uses="class_declaration,function_prototype" usedBy=",public,">
        <Expression>
            <Sequence>
                <String value="friend" />
                <Sub>
                    <OrInclusive>
                        <Terminating_Rule value="class_declaration" />
                        <Terminating_Rule value="function_prototype" />
                    </OrInclusive>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="class_declaration" />
            <Uses_Terminated value="function_prototype" />
            <UsedBy_Terminated value="public" />
        </Properties>
        <Called>
            <C v="class_declaration">
                <C v="ID" c="3">
                    <C v="NON_ID" c="5">
                        <T v="not_reseved" c="6" />
                        <T v="reserved" c="7" />
                    </C>
                </C>
                <T v="semikolon" c="4" />
            </C>
            <C v="function_prototype">
                <C v="ID" c="8" />
                <C v="declaration_specifier" c="9">
                    <C v="USER_TYPE" c="13">
                        <R v="ID" c="19" />
                    </C>
                    <T v="storage_class_specifier" c="14" />
                    <C v="template_type" c="15">
                        <R v="ID" c="20" />
                        <R v="declaration_specifier" c="21" />
                    </C>
                    <T v="type_qualifier" c="16" />
                    <C v="Owner" c="17">
                        <R v="ID" c="22" />
                        <R v="template_type" c="23" />
                        <C v="type_specifier" c="24">
                            <X v="struct_specifier" c="25" />
                            <X v="union_specifier" c="26" />
                            <X v="enum_specifier" c="27" />
                        </C>
                    </C>
                    <R v="type_specifier" c="18" />
                </C>
                <C v="prototype_parameter_list" c="10">
                    <C v="prototype_parameter" c="28">
                        <X v="init_declarator" c="29" />
                        <X v="parameter_function" c="30" />
                        <X v="declaration_specifier" c="31" />
                    </C>
                </C>
                <T v="semikolon" c="11" />
                <T v="type_qualifier" c="12" />
            </C>
        </Called>
        <Caller>
            <C v="public">
                <C v="class_content" c="2">
                    <C v="class_definition" c="3">
                        <C v="external_declaration" c="4">
                            <T v="translation_unit" c="9" />
                        </C>
                        <C v="namespace" c="5">
                            <T v="pass" c="10" />
                            <X v="namespace" c="11" />
                            <X v="extern_compiled" c="12" />
                        </C>
                        <C v="extern_compiled" c="6">
                            <X v="namespace" c="13" />
                        </C>
                        <T v="pass" c="7" />
                        <C v="p_Block" c="8">
                            <X v="p_ifndef" c="14" />
                            <X v="p_if" c="15" />
                            <X v="p_elif" c="16" />
                            <X v="p_else" c="17" />
                            <X v="p_ifdef" c="18" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="funcPoint_declarator" uses="direct_declarator,prototype_parameter_list,type_qualifier" usedBy=",declarator," recursiveUses="direct_declarator" recursiveUsedBy="declarator">
        <Expression>
            <Sequence>
                <Character_Single value="(" />
                <Sub>
                    <OrInclusive>
                        <Character_Single value="*" />
                        <Character_Single value="&amp;" />
                    </OrInclusive>
                </Sub>
                <ZeroOrOneOf>
                    <Terminating_Rule value="type_qualifier" />
                </ZeroOrOneOf>
                <Recursive_Rule value="direct_declarator" />
                <Character_Single value=")" />
                <Terminating_Rule value="prototype_parameter_list" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="prototype_parameter_list" />
            <Uses_Terminated value="type_qualifier" />
            <Uses_Recursive value="direct_declarator" />
            <UsedBy_Recursive value="declarator" />
        </Properties>
        <Called>
            <C v="prototype_parameter_list">
                <C v="prototype_parameter" c="4">
                    <C v="init_declarator" c="5">
                        <C v="Number" c="8">
                            <T v="CONSTANT_CHAR" c="11" />
                            <T v="CONSTANT_FLT1" c="12" />
                            <T v="CONSTANT_FLT2" c="13" />
                            <T v="CONSTANT_FLT3" c="14" />
                            <T v="CONSTANT_HEX" c="15" />
                            <T v="CONSTANT_INT0" c="16" />
                            <T v="CONSTANT_INT1" c="17" />
                        </C>
                        <C v="initializer" c="9">
                            <X v="assignment_expression" c="18" />
                            <X v="initializer_list" c="19" />
                        </C>
                        <C v="declarator" c="10">
                            <X v="pointer" c="20" />
                            <X v="direct_declarator" c="21" />
                            <X v="funcPoint_declarator" c="22" />
                        </C>
                    </C>
                    <C v="parameter_function" c="6">
                        <C v="direct_parameter_declarator" c="23">
                            <X v="expression" c="24" />
                            <X v="identifier_list" c="25" />
                            <X v="parameter_type_list" c="26" />
                            <X v="declarator" c="27" />
                        </C>
                    </C>
                    <C v="declaration_specifier" c="7">
                        <X v="USER_TYPE" c="28" />
                        <T v="storage_class_specifier" c="29" />
                        <X v="template_type" c="30" />
                        <T v="type_qualifier" c="31" />
                        <X v="Owner" c="32" />
                        <X v="type_specifier" c="33" />
                    </C>
                </C>
            </C>
            <T v="type_qualifier" />
            <C v="direct_declarator">
                <X v="ID" c="34" />
                <T v="operator_id" c="35" />
                <X v="owned_ID" c="36" />
                <T v="type_qualifier" c="37" />
                <X v="direct_declarator_second" c="38" />
            </C>
        </Called>
        <Caller>
            <C v="declarator">
                <C v="struct_declarator" c="2">
                    <C v="struct_declarator_list" c="7">
                        <T v="struct_declaration" c="8" />
                    </C>
                </C>
                <C v="parameter_declaration" c="3">
                    <C v="parameter_list" c="9">
                        <C v="parameter_type_list" c="10">
                            <X v="direct_abstract_declarator" c="11" />
                            <X v="direct_parameter_declarator" c="12" />
                        </C>
                    </C>
                </C>
                <C v="function_definition" c="4">
                    <C v="external_declaration" c="13">
                        <T v="translation_unit" c="18" />
                    </C>
                    <C v="namespace" c="14">
                        <T v="pass" c="19" />
                        <R v="namespace" c="20" />
                        <C v="extern_compiled" c="21">
                            <X v="namespace" c="22" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="15" />
                    <R v="pass" c="16" />
                    <C v="p_Block" c="17">
                        <C v="p_ifndef" c="23">
                            <X v="compilerSwitch" c="28" />
                        </C>
                        <C v="p_if" c="24">
                            <X v="compilerSwitch" c="29" />
                        </C>
                        <C v="p_elif" c="25">
                            <X v="compilerSwitch" c="30" />
                        </C>
                        <X v="p_else" c="26" />
                        <X v="p_ifdef" c="27" />
                    </C>
                </C>
                <X v="init_declarator" c="5" />
                <X v="direct_parameter_declarator" c="6" />
            </C>
        </Caller>
    </Rule>
    <Rule value="function_definition" uses="compound_statement,declaration,declaration_specifier,declarator,element_initializer" usedBy=",p_Block,external_declaration,namespace,extern_compiled,pass," recursiveUses="compound_statement" recursiveUsedBy="p_Block">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="declarator" />
                        <ZeroOrMoreOf>
                            <Terminating_Rule value="declaration" />
                        </ZeroOrMoreOf>
                        <ZeroOrOneOf>
                            <Terminating_Rule value="element_initializer" />
                        </ZeroOrOneOf>
                        <Recursive_Rule value="compound_statement" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <ZeroOrOneOf>
                            <Terminating_Rule value="declaration_specifier" />
                        </ZeroOrOneOf>
                        <Terminating_Rule value="declarator" />
                        <ZeroOrMoreOf>
                            <Terminating_Rule value="declaration" />
                        </ZeroOrMoreOf>
                        <ZeroOrOneOf>
                            <Terminating_Rule value="element_initializer" />
                        </ZeroOrOneOf>
                        <Recursive_Rule value="compound_statement" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="declaration" />
            <Uses_Terminated value="declaration_specifier" />
            <Uses_Terminated value="declarator" />
            <Uses_Terminated value="element_initializer" />
            <Uses_Recursive value="compound_statement" />
            <UsedBy_Terminated value="external_declaration" />
            <UsedBy_Terminated value="namespace" />
            <UsedBy_Terminated value="extern_compiled" />
            <UsedBy_Terminated value="pass" />
            <UsedBy_Recursive value="p_Block" />
        </Properties>
        <Called>
            <C v="declaration">
                <C v="init_declarator" c="6">
                    <C v="Number" c="9">
                        <T v="CONSTANT_CHAR" c="12" />
                        <T v="CONSTANT_FLT1" c="13" />
                        <T v="CONSTANT_FLT2" c="14" />
                        <T v="CONSTANT_FLT3" c="15" />
                        <T v="CONSTANT_HEX" c="16" />
                        <T v="CONSTANT_INT0" c="17" />
                        <T v="CONSTANT_INT1" c="18" />
                    </C>
                    <C v="initializer" c="10">
                        <C v="assignment_expression" c="19">
                            <T v="assignment_operator" c="21" />
                            <X v="conditional_expression" c="22" />
                            <X v="assignment_expression" c="23" />
                            <X v="cast_expression" c="24" />
                            <X v="unary_expression" c="25" />
                        </C>
                        <C v="initializer_list" c="20">
                            <X v="initializer" c="26" />
                        </C>
                    </C>
                    <C v="declarator" c="11">
                        <C v="pointer" c="27">
                            <X v="type_qualifier_list" c="30" />
                            <X v="pointer" c="31" />
                        </C>
                        <X v="direct_declarator" c="28" />
                        <X v="funcPoint_declarator" c="29" />
                    </C>
                </C>
                <T v="semikolon" c="7" />
                <X v="declaration_specifier" c="8" />
            </C>
            <C v="declaration_specifier">
                <X v="USER_TYPE" c="32" />
                <T v="storage_class_specifier" c="33" />
                <X v="template_type" c="34" />
                <T v="type_qualifier" c="35" />
                <X v="Owner" c="36" />
                <X v="type_specifier" c="37" />
            </C>
            <C v="declarator" />
            <C v="element_initializer">
                <X v="unary_expression" c="38" />
            </C>
            <C v="compound_statement">
                <X v="declaration" c="39" />
                <X v="preprocedure" c="40" />
                <X v="statement" c="41" />
            </C>
        </Called>
        <Caller>
            <C v="external_declaration">
                <T v="translation_unit" c="6" />
            </C>
            <C v="namespace">
                <T v="pass" c="7" />
                <R v="namespace" c="8" />
                <C v="extern_compiled" c="9">
                    <R v="namespace" c="10" />
                </C>
            </C>
            <C v="extern_compiled" />
            <T v="pass" />
            <C v="p_Block">
                <C v="p_ifndef" c="11">
                    <C v="compilerSwitch" c="16">
                        <C v="preprocedure" c="17">
                            <X v="compound_statement" c="18" />
                            <X v="p_Block" c="19" />
                            <X v="external_declaration" c="20" />
                            <X v="public" c="21" />
                            <X v="protected" c="22" />
                            <X v="private" c="23" />
                            <X v="namespace" c="24" />
                            <X v="extern_compiled" c="25" />
                            <T v="pass" c="26" />
                            <X v="statement" c="27" />
                        </C>
                    </C>
                </C>
                <C v="p_if" c="12">
                    <R v="compilerSwitch" c="28" />
                </C>
                <C v="p_elif" c="13">
                    <R v="compilerSwitch" c="29" />
                </C>
                <C v="p_else" c="14">
                    <X v="compilerSwitch" c="30" />
                </C>
                <X v="p_ifdef" c="15" />
            </C>
        </Caller>
    </Rule>
    <Rule value="function_prototype" uses="ID,declaration_specifier,prototype_parameter_list,semikolon,type_qualifier" usedBy=",p_Block,external_declaration,friend,namespace,extern_compiled,pass,">
        <Expression>
            <Sequence>
                <Terminating_Rule value="declaration_specifier" />
                <Terminating_Rule value="ID" />
                <Terminating_Rule value="prototype_parameter_list" />
                <ZeroOrOneOf>
                    <Terminating_Rule value="type_qualifier" />
                </ZeroOrOneOf>
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="declaration_specifier" />
            <Uses_Terminated value="prototype_parameter_list" />
            <Uses_Terminated value="semikolon" />
            <Uses_Terminated value="type_qualifier" />
            <UsedBy_Terminated value="p_Block" />
            <UsedBy_Terminated value="external_declaration" />
            <UsedBy_Terminated value="friend" />
            <UsedBy_Terminated value="namespace" />
            <UsedBy_Terminated value="extern_compiled" />
            <UsedBy_Terminated value="pass" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="6">
                    <T v="not_reseved" c="7" />
                    <T v="reserved" c="8" />
                </C>
            </C>
            <C v="declaration_specifier">
                <C v="USER_TYPE" c="9">
                    <C v="ID" c="15" />
                </C>
                <T v="storage_class_specifier" c="10" />
                <C v="template_type" c="11">
                    <R v="ID" c="16" />
                    <R v="declaration_specifier" c="17" />
                </C>
                <T v="type_qualifier" c="12" />
                <C v="Owner" c="13">
                    <R v="ID" c="18" />
                    <R v="template_type" c="19" />
                    <C v="type_specifier" c="20">
                        <C v="struct_specifier" c="21">
                            <X v="ID" c="24" />
                            <X v="declaration" c="25" />
                        </C>
                        <C v="union_specifier" c="22">
                            <X v="ID" c="26" />
                            <X v="declaration" c="27" />
                        </C>
                        <C v="enum_specifier" c="23">
                            <X v="ID" c="28" />
                            <X v="enumerator" c="29" />
                        </C>
                    </C>
                </C>
                <R v="type_specifier" c="14" />
            </C>
            <C v="prototype_parameter_list">
                <X v="prototype_parameter" c="30" />
            </C>
            <T v="semikolon" />
            <T v="type_qualifier" />
        </Called>
        <Caller>
            <C v="p_Block">
                <C v="p_ifndef" c="7">
                    <C v="compilerSwitch" c="12">
                        <C v="preprocedure" c="13">
                            <X v="compound_statement" c="14" />
                            <X v="p_Block" c="15" />
                            <X v="external_declaration" c="16" />
                            <X v="public" c="17" />
                            <X v="protected" c="18" />
                            <X v="private" c="19" />
                            <X v="namespace" c="20" />
                            <X v="extern_compiled" c="21" />
                            <T v="pass" c="22" />
                            <X v="statement" c="23" />
                        </C>
                    </C>
                </C>
                <C v="p_if" c="8">
                    <R v="compilerSwitch" c="24" />
                </C>
                <C v="p_elif" c="9">
                    <R v="compilerSwitch" c="25" />
                </C>
                <C v="p_else" c="10">
                    <R v="compilerSwitch" c="26" />
                </C>
                <C v="p_ifdef" c="11">
                    <R v="compilerSwitch" c="27" />
                </C>
            </C>
            <C v="external_declaration">
                <T v="translation_unit" c="28" />
            </C>
            <C v="friend">
                <C v="public" c="29">
                    <X v="class_content" c="30" />
                </C>
            </C>
            <C v="namespace">
                <T v="pass" c="31" />
                <X v="namespace" c="32" />
                <X v="extern_compiled" c="33" />
            </C>
            <C v="extern_compiled">
                <X v="namespace" c="34" />
            </C>
            <T v="pass" />
        </Caller>
    </Rule>
    <Rule value="goto_stmt" uses="ID,semikolon" usedBy=",statement,jump_statement,">
        <Expression>
            <Sequence>
                <String value="goto" />
                <Terminating_Rule value="ID" />
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="semikolon" />
            <UsedBy_Terminated value="statement" />
            <UsedBy_Terminated value="jump_statement" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <T v="semikolon" />
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="3">
                    <C v="if_stmt" c="18">
                        <R v="statement" c="19" />
                        <C v="else_part" c="20">
                            <X v="if_stmt" c="21" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="4" />
                <C v="p_Block" c="5">
                    <C v="p_ifndef" c="22">
                        <C v="compilerSwitch" c="27">
                            <X v="preprocedure" c="28" />
                        </C>
                    </C>
                    <C v="p_if" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_elif" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_else" c="25" />
                    <X v="p_ifdef" c="26" />
                </C>
                <X v="namespace" c="6" />
                <X v="extern_compiled" c="7" />
                <T v="pass" c="8" />
                <X v="compound_statement" c="9" />
                <X v="case_part" c="10" />
                <X v="default_part" c="11" />
                <X v="if_part" c="12" />
                <X v="switch_stmt" c="13" />
                <X v="while_stmt" c="14" />
                <X v="do_stmt" c="15" />
                <X v="for_stmt" c="16" />
                <X v="p_define" c="17" />
            </C>
            <T v="jump_statement" />
        </Caller>
    </Rule>
    <Rule value="ID" uses="NON_ID" usedBy=",USER_TYPE,primary_expression,postfix_expression_second,struct_specifier,union_specifier,enum_specifier,enumerator,direct_declarator,identifier_list,lable_stmt,goto_stmt,p_undefine,p_declarator,p_defined,function_prototype,template_type,Owner,owned_ID,class_declaration,class_definition,calss_parent,constructor,destructor,service,declarator_prp,namespace,using_namespace,">
        <Expression>
            <Exclusion>
                <First>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <Character_Range value1="a" value2="z" />
                                    <Character_Range value1="A" value2="Z" />
                                    <Character_Single value="_" />
                                </OrInclusive>
                            </Sub>
                            <ZeroOrMoreOf>
                                <Sub>
                                    <OrInclusive>
                                        <Character_Range value1="a" value2="z" />
                                        <Character_Range value1="A" value2="Z" />
                                        <Character_Range value1="0" value2="9" />
                                        <Character_Single value="_" />
                                    </OrInclusive>
                                </Sub>
                            </ZeroOrMoreOf>
                        </Sequence>
                    </Sub>
                </First>
                <Second>
                    <Terminating_Rule value="NON_ID" />
                </Second>
            </Exclusion>
        </Expression>
        <Properties leafLevel="2" rootLevel="" characterLevel="not phrased">
            <Uses_Terminated value="NON_ID" />
            <UsedBy_Terminated value="USER_TYPE" />
            <UsedBy_Terminated value="primary_expression" />
            <UsedBy_Terminated value="postfix_expression_second" />
            <UsedBy_Terminated value="struct_specifier" />
            <UsedBy_Terminated value="union_specifier" />
            <UsedBy_Terminated value="enum_specifier" />
            <UsedBy_Terminated value="enumerator" />
            <UsedBy_Terminated value="direct_declarator" />
            <UsedBy_Terminated value="identifier_list" />
            <UsedBy_Terminated value="lable_stmt" />
            <UsedBy_Terminated value="goto_stmt" />
            <UsedBy_Terminated value="p_undefine" />
            <UsedBy_Terminated value="p_declarator" />
            <UsedBy_Terminated value="p_defined" />
            <UsedBy_Terminated value="function_prototype" />
            <UsedBy_Terminated value="template_type" />
            <UsedBy_Terminated value="Owner" />
            <UsedBy_Terminated value="owned_ID" />
            <UsedBy_Terminated value="class_declaration" />
            <UsedBy_Terminated value="class_definition" />
            <UsedBy_Terminated value="calss_parent" />
            <UsedBy_Terminated value="constructor" />
            <UsedBy_Terminated value="destructor" />
            <UsedBy_Terminated value="service" />
            <UsedBy_Terminated value="declarator_prp" />
            <UsedBy_Terminated value="namespace" />
            <UsedBy_Terminated value="using_namespace" />
        </Properties>
        <Called>
            <C v="NON_ID">
                <T v="not_reseved" c="2" />
                <T v="reserved" c="3" />
            </C>
        </Called>
        <Caller>
            <C v="USER_TYPE">
                <X v="declaration_specifier" c="28" />
                <X v="specifier_qualifier_list" c="29" />
                <X v="type_name" c="30" />
                <T v="struct_declaration" c="31" />
            </C>
            <C v="primary_expression">
                <X v="postfix_expression" c="32" />
            </C>
            <C v="postfix_expression_second">
                <X v="postfix_expression" c="33" />
            </C>
            <C v="struct_specifier">
                <X v="type_specifier" c="34" />
            </C>
            <C v="union_specifier">
                <X v="type_specifier" c="35" />
            </C>
            <C v="enum_specifier">
                <X v="property" c="36" />
                <X v="type_specifier" c="37" />
            </C>
            <C v="enumerator">
                <X v="enum_specifier" c="38" />
            </C>
            <C v="direct_declarator">
                <X v="funcPoint_declarator" c="39" />
                <X v="declarator" c="40" />
            </C>
            <C v="identifier_list">
                <X v="direct_parameter_declarator" c="41" />
            </C>
            <C v="lable_stmt">
                <X v="statement" c="42" />
            </C>
            <C v="goto_stmt">
                <X v="statement" c="43" />
                <T v="jump_statement" c="44" />
            </C>
            <C v="p_undefine">
                <X v="preprocedure" c="45" />
            </C>
            <C v="p_declarator">
                <X v="p_define" c="46" />
            </C>
            <C v="p_defined">
                <X v="primary_expression" c="47" />
            </C>
            <C v="function_prototype">
                <X v="p_Block" c="48" />
                <X v="external_declaration" c="49" />
                <X v="friend" c="50" />
                <X v="namespace" c="51" />
                <X v="extern_compiled" c="52" />
                <T v="pass" c="53" />
            </C>
            <C v="template_type">
                <X v="declaration_specifier" c="54" />
                <T v="struct_declaration" c="55" />
                <X v="Owner" c="56" />
                <X v="calss_parent" c="57" />
                <X v="primary_expression" c="58" />
            </C>
            <C v="Owner">
                <X v="declaration_specifier" c="59" />
                <X v="owned_ID" c="60" />
                <X v="calss_parent" c="61" />
                <X v="declarator_prp" c="62" />
                <X v="primary_expression" c="63" />
            </C>
            <C v="owned_ID">
                <X v="direct_declarator" c="64" />
            </C>
            <C v="class_declaration">
                <X v="friend" c="65" />
            </C>
            <C v="class_definition">
                <X v="external_declaration" c="66" />
                <X v="namespace" c="67" />
                <X v="extern_compiled" c="68" />
                <T v="pass" c="69" />
                <X v="p_Block" c="70" />
            </C>
            <C v="calss_parent">
                <X v="class_definition" c="71" />
            </C>
            <C v="constructor">
                <X v="methode" c="72" />
                <X v="methode_definition" c="73" />
            </C>
            <C v="destructor">
                <X v="methode" c="74" />
                <X v="methode_definition" c="75" />
            </C>
            <C v="service">
                <X v="methode" c="76" />
                <X v="methode_definition" c="77" />
            </C>
            <C v="declarator_prp">
                <X v="property_declarator" c="78" />
            </C>
            <C v="namespace">
                <T v="pass" c="79" />
                <X v="namespace" c="80" />
                <X v="extern_compiled" c="81" />
            </C>
            <C v="using_namespace">
                <X v="p_Block" c="82" />
                <X v="namespace" c="83" />
                <X v="extern_compiled" c="84" />
                <T v="pass" c="85" />
            </C>
        </Caller>
    </Rule>
    <Rule value="identifier_list" uses="ID" usedBy=",direct_parameter_declarator,">
        <Expression>
            <Sequence>
                <Terminating_Rule value="ID" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <String value="," />
                            </Sub>
                            <Terminating_Rule value="ID" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <UsedBy_Terminated value="direct_parameter_declarator" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="2">
                    <T v="not_reseved" c="3" />
                    <T v="reserved" c="4" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="direct_parameter_declarator">
                <C v="parameter_function" c="2">
                    <C v="prototype_parameter" c="6">
                        <C v="prototype_parameter_list" c="8">
                            <X v="function_prototype" c="9" />
                            <X v="operator" c="10" />
                            <X v="constructor" c="11" />
                            <X v="service" c="12" />
                            <X v="funcPoint_declarator" c="13" />
                        </C>
                    </C>
                    <C v="parameter_declaration" c="7">
                        <C v="parameter_list" c="14">
                            <X v="parameter_type_list" c="15" />
                        </C>
                    </C>
                </C>
                <C v="p_declarator" c="3">
                    <C v="p_define" c="16">
                        <C v="preprocedure" c="17">
                            <X v="compound_statement" c="18" />
                            <X v="p_Block" c="19" />
                            <X v="external_declaration" c="20" />
                            <X v="public" c="21" />
                            <X v="protected" c="22" />
                            <X v="private" c="23" />
                            <X v="namespace" c="24" />
                            <X v="extern_compiled" c="25" />
                            <T v="pass" c="26" />
                            <X v="statement" c="27" />
                        </C>
                    </C>
                </C>
                <C v="destructor" c="4">
                    <C v="methode" c="28">
                        <X v="public" c="30" />
                        <X v="protected" c="31" />
                        <X v="private" c="32" />
                        <X v="property" c="33" />
                    </C>
                    <X v="methode_definition" c="29" />
                </C>
                <X v="direct_declarator_second" c="5" />
            </C>
        </Caller>
    </Rule>
    <Rule value="if_expr" uses="expression" usedBy=",if_part,">
        <Expression>
            <Sequence>
                <String value="if" />
                <String value="(" />
                <Terminating_Rule value="expression" />
                <String value=")" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <UsedBy_Terminated value="if_part" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="2">
                    <T v="assignment_operator" c="3" />
                    <C v="conditional_expression" c="4">
                        <C v="logical_or_expression" c="8">
                            <X v="logical_and_expression" c="11" />
                        </C>
                        <R v="conditional_expression" c="9" />
                        <R v="expression" c="10" />
                    </C>
                    <R v="assignment_expression" c="5" />
                    <C v="cast_expression" c="6">
                        <R v="cast_expression" c="12" />
                        <C v="type_name" c="13">
                            <X v="USER_TYPE" c="15" />
                            <X v="abstract_declarator" c="16" />
                            <X v="specifier_qualifier_list" c="17" />
                        </C>
                        <C v="unary_expression" c="14">
                            <X v="type_name" c="18" />
                            <T v="unary_operator" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="postfix_expression" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                    </C>
                    <R v="unary_expression" c="7" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="if_part">
                <C v="if_stmt" c="2">
                    <C v="statement" c="3">
                        <C v="elif_part" c="5">
                            <X v="if_stmt" c="20" />
                        </C>
                        <C v="else_part" c="6">
                            <X v="if_stmt" c="21" />
                        </C>
                        <C v="p_Block" c="7">
                            <X v="p_ifndef" c="22" />
                            <X v="p_if" c="23" />
                            <X v="p_elif" c="24" />
                            <X v="p_else" c="25" />
                            <X v="p_ifdef" c="26" />
                        </C>
                        <C v="namespace" c="8">
                            <T v="pass" c="27" />
                            <X v="namespace" c="28" />
                            <X v="extern_compiled" c="29" />
                        </C>
                        <C v="extern_compiled" c="9">
                            <X v="namespace" c="30" />
                        </C>
                        <T v="pass" c="10" />
                        <X v="compound_statement" c="11" />
                        <X v="case_part" c="12" />
                        <X v="default_part" c="13" />
                        <X v="if_part" c="14" />
                        <X v="switch_stmt" c="15" />
                        <X v="while_stmt" c="16" />
                        <X v="do_stmt" c="17" />
                        <X v="for_stmt" c="18" />
                        <X v="p_define" c="19" />
                    </C>
                    <X v="else_part" c="4" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="if_part" uses="if_expr,statement" usedBy=",if_stmt," recursiveUses="statement" recursiveUsedBy="if_stmt">
        <Expression>
            <Sequence>
                <Terminating_Rule value="if_expr" />
                <Recursive_Rule value="statement" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="if_expr" />
            <Uses_Recursive value="statement" />
            <UsedBy_Recursive value="if_stmt" />
        </Properties>
        <Called>
            <C v="if_expr">
                <C v="expression" c="3">
                    <C v="assignment_expression" c="4">
                        <T v="assignment_operator" c="5" />
                        <C v="conditional_expression" c="6">
                            <X v="logical_or_expression" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="expression" c="12" />
                        </C>
                        <R v="assignment_expression" c="7" />
                        <C v="cast_expression" c="8">
                            <X v="cast_expression" c="13" />
                            <X v="type_name" c="14" />
                            <X v="unary_expression" c="15" />
                        </C>
                        <C v="unary_expression" c="9">
                            <X v="type_name" c="16" />
                            <T v="unary_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="postfix_expression" c="19" />
                            <X v="unary_expression" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="statement">
                <X v="break_stmt" c="21" />
                <X v="continue_stmt" c="22" />
                <X v="expr_stmt" c="23" />
                <X v="goto_stmt" c="24" />
                <X v="lable_stmt" c="25" />
                <X v="preprocedure" c="26" />
                <X v="return_stmt" c="27" />
                <X v="case_stmt" c="28" />
                <X v="compound_statement" c="29" />
                <X v="default_stmt" c="30" />
                <X v="do_stmt" c="31" />
                <X v="for_stmt" c="32" />
                <X v="if_stmt" c="33" />
                <X v="switch_stmt" c="34" />
                <X v="while_stmt" c="35" />
            </C>
        </Called>
        <Caller>
            <C v="if_stmt">
                <C v="statement" c="2">
                    <C v="elif_part" c="4">
                        <R v="if_stmt" c="19" />
                    </C>
                    <C v="else_part" c="5">
                        <R v="if_stmt" c="20" />
                    </C>
                    <C v="p_Block" c="6">
                        <C v="p_ifndef" c="21">
                            <X v="compilerSwitch" c="26" />
                        </C>
                        <C v="p_if" c="22">
                            <X v="compilerSwitch" c="27" />
                        </C>
                        <C v="p_elif" c="23">
                            <X v="compilerSwitch" c="28" />
                        </C>
                        <C v="p_else" c="24">
                            <X v="compilerSwitch" c="29" />
                        </C>
                        <C v="p_ifdef" c="25">
                            <X v="compilerSwitch" c="30" />
                        </C>
                    </C>
                    <X v="namespace" c="7" />
                    <X v="extern_compiled" c="8" />
                    <T v="pass" c="9" />
                    <X v="compound_statement" c="10" />
                    <X v="case_part" c="11" />
                    <X v="default_part" c="12" />
                    <X v="if_part" c="13" />
                    <X v="switch_stmt" c="14" />
                    <X v="while_stmt" c="15" />
                    <X v="do_stmt" c="16" />
                    <X v="for_stmt" c="17" />
                    <X v="p_define" c="18" />
                </C>
                <X v="else_part" c="3" />
            </C>
        </Caller>
    </Rule>
    <Rule value="if_stmt" uses="elif_part,else_part,if_part" usedBy=",statement,else_part," recursiveUses="elif_part,else_part" recursiveUsedBy="statement,else_part">
        <Expression>
            <Sequence>
                <Terminating_Rule value="if_part" />
                <ZeroOrMoreOf>
                    <Recursive_Rule value="elif_part" />
                </ZeroOrMoreOf>
                <ZeroOrOneOf>
                    <Recursive_Rule value="else_part" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="if_part" />
            <Uses_Recursive value="elif_part" />
            <Uses_Recursive value="else_part" />
            <UsedBy_Recursive value="statement" />
            <UsedBy_Recursive value="else_part" />
        </Properties>
        <Called>
            <C v="if_part">
                <C v="if_expr" c="4">
                    <C v="expression" c="6">
                        <C v="assignment_expression" c="7">
                            <T v="assignment_operator" c="8" />
                            <X v="conditional_expression" c="9" />
                            <X v="assignment_expression" c="10" />
                            <X v="cast_expression" c="11" />
                            <X v="unary_expression" c="12" />
                        </C>
                    </C>
                </C>
                <C v="statement" c="5">
                    <C v="break_stmt" c="13">
                        <T v="semikolon" c="28" />
                    </C>
                    <C v="continue_stmt" c="14">
                        <R v="semikolon" c="29" />
                    </C>
                    <C v="expr_stmt" c="15">
                        <T v="empty_expression" c="30" />
                        <X v="expression" c="31" />
                        <T v="semikolon" c="32" />
                    </C>
                    <X v="goto_stmt" c="16" />
                    <X v="lable_stmt" c="17" />
                    <X v="preprocedure" c="18" />
                    <X v="return_stmt" c="19" />
                    <X v="case_stmt" c="20" />
                    <X v="compound_statement" c="21" />
                    <X v="default_stmt" c="22" />
                    <X v="do_stmt" c="23" />
                    <X v="for_stmt" c="24" />
                    <X v="if_stmt" c="25" />
                    <X v="switch_stmt" c="26" />
                    <X v="while_stmt" c="27" />
                </C>
            </C>
            <C v="elif_part">
                <X v="elif_expr" c="33" />
                <X v="statement" c="34" />
            </C>
            <C v="else_part">
                <X v="statement" c="35" />
                <X v="if_stmt" c="36" />
            </C>
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="3">
                    <R v="if_stmt" c="18" />
                </C>
                <C v="else_part" c="4">
                    <R v="if_stmt" c="19" />
                </C>
                <C v="p_Block" c="5">
                    <C v="p_ifndef" c="20">
                        <C v="compilerSwitch" c="25">
                            <X v="preprocedure" c="26" />
                        </C>
                    </C>
                    <C v="p_if" c="21">
                        <R v="compilerSwitch" c="27" />
                    </C>
                    <C v="p_elif" c="22">
                        <R v="compilerSwitch" c="28" />
                    </C>
                    <C v="p_else" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_ifdef" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                </C>
                <X v="namespace" c="6" />
                <X v="extern_compiled" c="7" />
                <T v="pass" c="8" />
                <X v="compound_statement" c="9" />
                <X v="case_part" c="10" />
                <X v="default_part" c="11" />
                <X v="if_part" c="12" />
                <X v="switch_stmt" c="13" />
                <X v="while_stmt" c="14" />
                <X v="do_stmt" c="15" />
                <X v="for_stmt" c="16" />
                <X v="p_define" c="17" />
            </C>
            <C v="else_part" />
        </Caller>
    </Rule>
    <Rule value="inclusive_or_expression" uses="exclusive_or_expression" usedBy=",logical_and_expression," recursiveUses="exclusive_or_expression" recursiveUsedBy="logical_and_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="exclusive_or_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <Character_Single value="|" />
                                    <String value="||" />
                                </OrInclusive>
                            </Sub>
                            <Recursive_Rule value="exclusive_or_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="exclusive_or_expression" />
            <UsedBy_Recursive value="logical_and_expression" />
        </Properties>
        <Called>
            <C v="exclusive_or_expression">
                <C v="and_expression" c="2">
                    <C v="equality_expression" c="3">
                        <C v="relational_expression" c="4">
                            <X v="shift_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="logical_and_expression">
                <C v="logical_or_expression" c="2">
                    <C v="conditional_expression" c="3">
                        <C v="constant_expression" c="4">
                            <X v="struct_declarator" c="7" />
                            <X v="direct_declarator_second" c="8" />
                            <X v="direct_abstract_declarator" c="9" />
                            <X v="case_expr" c="10" />
                            <X v="property_declarator" c="11" />
                            <X v="declarator_prp" c="12" />
                            <X v="enumerator" c="13" />
                        </C>
                        <R v="conditional_expression" c="5" />
                        <C v="assignment_expression" c="6">
                            <X v="initializer" c="14" />
                            <X v="argument_expression_list" c="15" />
                            <X v="assignment_expression" c="16" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="init_declarator" uses="Number,declarator,initializer" usedBy=",declaration,prototype_parameter," recursiveUses="declarator" recursiveUsedBy="declaration,prototype_parameter">
        <Expression>
            <Sequence>
                <Recursive_Rule value="declarator" />
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <String value=":" />
                            <Terminating_Rule value="Number" />
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <String value="=" />
                            <Terminating_Rule value="initializer" />
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="Number" />
            <Uses_Terminated value="initializer" />
            <Uses_Recursive value="declarator" />
            <UsedBy_Recursive value="declaration" />
            <UsedBy_Recursive value="prototype_parameter" />
        </Properties>
        <Called>
            <C v="Number">
                <T v="CONSTANT_CHAR" c="4" />
                <T v="CONSTANT_FLT1" c="5" />
                <T v="CONSTANT_FLT2" c="6" />
                <T v="CONSTANT_FLT3" c="7" />
                <T v="CONSTANT_HEX" c="8" />
                <T v="CONSTANT_INT0" c="9" />
                <T v="CONSTANT_INT1" c="10" />
            </C>
            <C v="initializer">
                <C v="assignment_expression" c="11">
                    <T v="assignment_operator" c="13" />
                    <C v="conditional_expression" c="14">
                        <C v="logical_or_expression" c="18">
                            <X v="logical_and_expression" c="21" />
                        </C>
                        <R v="conditional_expression" c="19" />
                        <C v="expression" c="20">
                            <X v="assignment_expression" c="22" />
                        </C>
                    </C>
                    <R v="assignment_expression" c="15" />
                    <C v="cast_expression" c="16">
                        <R v="cast_expression" c="23" />
                        <C v="type_name" c="24">
                            <X v="USER_TYPE" c="26" />
                            <X v="abstract_declarator" c="27" />
                            <X v="specifier_qualifier_list" c="28" />
                        </C>
                        <C v="unary_expression" c="25">
                            <X v="type_name" c="29" />
                            <T v="unary_operator" c="30" />
                            <X v="cast_expression" c="31" />
                            <X v="postfix_expression" c="32" />
                            <X v="unary_expression" c="33" />
                        </C>
                    </C>
                    <X v="unary_expression" c="17" />
                </C>
                <X v="initializer_list" c="12" />
            </C>
            <C v="declarator">
                <X v="pointer" c="34" />
                <X v="direct_declarator" c="35" />
                <X v="funcPoint_declarator" c="36" />
            </C>
        </Called>
        <Caller>
            <C v="declaration">
                <C v="union_specifier" c="3">
                    <C v="type_specifier" c="13">
                        <C v="declaration_specifier" c="14">
                            <X v="parameter_declaration" c="19" />
                            <X v="function_definition" c="20" />
                            <X v="prototype_parameter" c="21" />
                            <X v="function_prototype" c="22" />
                            <X v="operator" c="23" />
                            <X v="service" c="24" />
                            <X v="property" c="25" />
                            <X v="declaration" c="26" />
                            <X v="template_type" c="27" />
                        </C>
                        <C v="specifier_qualifier_list" c="15">
                            <T v="struct_declaration" c="28" />
                            <X v="specifier_qualifier_list" c="29" />
                            <X v="type_name" c="30" />
                        </C>
                        <X v="Owner" c="16" />
                        <X v="calss_parent" c="17" />
                        <X v="primary_expression" c="18" />
                    </C>
                </C>
                <X v="compound_statement" c="4" />
                <X v="for_expr" c="5" />
                <X v="p_Block" c="6" />
                <X v="function_definition" c="7" />
                <X v="external_declaration" c="8" />
                <X v="namespace" c="9" />
                <X v="extern_compiled" c="10" />
                <T v="pass" c="11" />
                <X v="struct_specifier" c="12" />
            </C>
            <C v="prototype_parameter">
                <X v="prototype_parameter_list" c="31" />
            </C>
        </Caller>
    </Rule>
    <Rule value="initializer" uses="assignment_expression,initializer_list" usedBy=",init_declarator,initializer_list," recursiveUses="assignment_expression,initializer_list" recursiveUsedBy="init_declarator,initializer_list">
        <Expression>
            <OrInclusive>
                <Recursive_Rule value="assignment_expression" />
                <Sub>
                    <Sequence>
                        <Sub>
                            <OrInclusive>
                                <String value="{" />
                                <String value="&lt;%" />
                            </OrInclusive>
                        </Sub>
                        <Recursive_Rule value="initializer_list" />
                        <ZeroOrOneOf>
                            <Sub>
                                <String value="," />
                            </Sub>
                        </ZeroOrOneOf>
                        <Sub>
                            <OrInclusive>
                                <String value="}" />
                                <String value="%&gt;" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="assignment_expression" />
            <Uses_Recursive value="initializer_list" />
            <UsedBy_Recursive value="init_declarator" />
            <UsedBy_Recursive value="initializer_list" />
        </Properties>
        <Called>
            <C v="assignment_expression">
                <T v="assignment_operator" c="3" />
                <C v="conditional_expression" c="4">
                    <C v="logical_or_expression" c="8">
                        <C v="logical_and_expression" c="11">
                            <X v="inclusive_or_expression" c="12" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="9" />
                    <C v="expression" c="10">
                        <R v="assignment_expression" c="13" />
                    </C>
                </C>
                <R v="assignment_expression" c="5" />
                <C v="cast_expression" c="6">
                    <R v="cast_expression" c="14" />
                    <C v="type_name" c="15">
                        <C v="USER_TYPE" c="17">
                            <X v="ID" c="20" />
                        </C>
                        <C v="abstract_declarator" c="18">
                            <X v="pointer" c="21" />
                            <X v="direct_abstract_declarator" c="22" />
                        </C>
                        <C v="specifier_qualifier_list" c="19">
                            <X v="USER_TYPE" c="23" />
                            <T v="type_qualifier" c="24" />
                            <X v="specifier_qualifier_list" c="25" />
                            <X v="type_specifier" c="26" />
                        </C>
                    </C>
                    <C v="unary_expression" c="16">
                        <X v="type_name" c="27" />
                        <T v="unary_operator" c="28" />
                        <X v="cast_expression" c="29" />
                        <X v="postfix_expression" c="30" />
                        <X v="unary_expression" c="31" />
                    </C>
                </C>
                <X v="unary_expression" c="7" />
            </C>
            <C v="initializer_list">
                <X v="initializer" c="32" />
            </C>
        </Called>
        <Caller>
            <C v="init_declarator">
                <C v="declaration" c="3">
                    <C v="union_specifier" c="5">
                        <C v="type_specifier" c="15">
                            <X v="declaration_specifier" c="16" />
                            <X v="specifier_qualifier_list" c="17" />
                            <X v="Owner" c="18" />
                            <X v="calss_parent" c="19" />
                            <X v="primary_expression" c="20" />
                        </C>
                    </C>
                    <C v="compound_statement" c="6">
                        <C v="methode_definition" c="21">
                            <X v="protected" c="24" />
                            <X v="private" c="25" />
                            <X v="public" c="26" />
                        </C>
                        <C v="statement" c="22">
                            <X v="elif_part" c="27" />
                            <X v="else_part" c="28" />
                            <X v="p_Block" c="29" />
                            <X v="namespace" c="30" />
                            <X v="extern_compiled" c="31" />
                            <T v="pass" c="32" />
                            <X v="compound_statement" c="33" />
                            <X v="case_part" c="34" />
                            <X v="default_part" c="35" />
                            <X v="if_part" c="36" />
                            <X v="switch_stmt" c="37" />
                            <X v="while_stmt" c="38" />
                            <X v="do_stmt" c="39" />
                            <X v="for_stmt" c="40" />
                            <X v="p_define" c="41" />
                        </C>
                        <X v="function_definition" c="23" />
                    </C>
                    <X v="for_expr" c="7" />
                    <X v="p_Block" c="8" />
                    <X v="function_definition" c="9" />
                    <X v="external_declaration" c="10" />
                    <X v="namespace" c="11" />
                    <X v="extern_compiled" c="12" />
                    <T v="pass" c="13" />
                    <X v="struct_specifier" c="14" />
                </C>
                <X v="prototype_parameter" c="4" />
            </C>
            <C v="initializer_list">
                <X v="initializer" c="42" />
            </C>
        </Caller>
    </Rule>
    <Rule value="initializer_list" uses="initializer" usedBy=",initializer," recursiveUses="initializer" recursiveUsedBy="initializer">
        <Expression>
            <Sequence>
                <Recursive_Rule value="initializer" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <String value="," />
                            <Recursive_Rule value="initializer" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="initializer" />
            <UsedBy_Recursive value="initializer" />
        </Properties>
        <Called>
            <C v="initializer">
                <C v="assignment_expression" c="2">
                    <T v="assignment_operator" c="4" />
                    <C v="conditional_expression" c="5">
                        <C v="logical_or_expression" c="9">
                            <X v="logical_and_expression" c="12" />
                        </C>
                        <R v="conditional_expression" c="10" />
                        <C v="expression" c="11">
                            <X v="assignment_expression" c="13" />
                        </C>
                    </C>
                    <R v="assignment_expression" c="6" />
                    <C v="cast_expression" c="7">
                        <R v="cast_expression" c="14" />
                        <C v="type_name" c="15">
                            <X v="USER_TYPE" c="17" />
                            <X v="abstract_declarator" c="18" />
                            <X v="specifier_qualifier_list" c="19" />
                        </C>
                        <C v="unary_expression" c="16">
                            <X v="type_name" c="20" />
                            <T v="unary_operator" c="21" />
                            <X v="cast_expression" c="22" />
                            <X v="postfix_expression" c="23" />
                            <X v="unary_expression" c="24" />
                        </C>
                    </C>
                    <R v="unary_expression" c="8" />
                </C>
                <R v="initializer_list" c="3" />
            </C>
        </Called>
        <Caller>
            <C v="initializer">
                <C v="init_declarator" c="2">
                    <C v="declaration" c="4">
                        <C v="union_specifier" c="6">
                            <X v="type_specifier" c="16" />
                        </C>
                        <C v="compound_statement" c="7">
                            <X v="methode_definition" c="17" />
                            <X v="statement" c="18" />
                            <X v="function_definition" c="19" />
                        </C>
                        <C v="for_expr" c="8">
                            <X v="for_stmt" c="20" />
                        </C>
                        <C v="p_Block" c="9">
                            <X v="p_ifndef" c="21" />
                            <X v="p_if" c="22" />
                            <X v="p_elif" c="23" />
                            <X v="p_else" c="24" />
                            <X v="p_ifdef" c="25" />
                        </C>
                        <C v="function_definition" c="10">
                            <X v="external_declaration" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                            <T v="pass" c="29" />
                            <X v="p_Block" c="30" />
                        </C>
                        <X v="external_declaration" c="11" />
                        <X v="namespace" c="12" />
                        <X v="extern_compiled" c="13" />
                        <T v="pass" c="14" />
                        <X v="struct_specifier" c="15" />
                    </C>
                    <X v="prototype_parameter" c="5" />
                </C>
                <X v="initializer_list" c="3" />
            </C>
        </Caller>
    </Rule>
    <Rule value="iteration_statement" uses="do_stmt,for_stmt,while_stmt" usedBy="">
        <Expression>
            <OrInclusive>
                <Terminating_Rule value="while_stmt" />
                <Terminating_Rule value="do_stmt" />
                <Terminating_Rule value="for_stmt" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="0" characterLevel="phrased">
            <Uses_Terminated value="do_stmt" />
            <Uses_Terminated value="for_stmt" />
            <Uses_Terminated value="while_stmt" />
        </Properties>
        <Called>
            <C v="do_stmt">
                <T v="semikolon" c="4" />
                <C v="while_expr" c="5">
                    <C v="expression" c="7">
                        <C v="assignment_expression" c="8">
                            <T v="assignment_operator" c="9" />
                            <X v="conditional_expression" c="10" />
                            <X v="assignment_expression" c="11" />
                            <X v="cast_expression" c="12" />
                            <X v="unary_expression" c="13" />
                        </C>
                    </C>
                </C>
                <C v="statement" c="6">
                    <C v="break_stmt" c="14">
                        <R v="semikolon" c="29" />
                    </C>
                    <C v="continue_stmt" c="15">
                        <T v="semikolon" c="30" />
                    </C>
                    <X v="expr_stmt" c="16" />
                    <X v="goto_stmt" c="17" />
                    <X v="lable_stmt" c="18" />
                    <X v="preprocedure" c="19" />
                    <X v="return_stmt" c="20" />
                    <X v="case_stmt" c="21" />
                    <X v="compound_statement" c="22" />
                    <X v="default_stmt" c="23" />
                    <X v="do_stmt" c="24" />
                    <X v="for_stmt" c="25" />
                    <X v="if_stmt" c="26" />
                    <X v="switch_stmt" c="27" />
                    <X v="while_stmt" c="28" />
                </C>
            </C>
            <C v="for_stmt">
                <X v="for_expr" c="31" />
                <X v="statement" c="32" />
            </C>
            <C v="while_stmt">
                <X v="while_expr" c="33" />
                <X v="statement" c="34" />
            </C>
        </Called>
        <Caller />
    </Rule>
    <Rule value="jump_statement" uses="break_stmt,continue_stmt,goto_stmt,return_stmt" usedBy="">
        <Expression>
            <OrInclusive>
                <Terminating_Rule value="goto_stmt" />
                <Terminating_Rule value="continue_stmt" />
                <Terminating_Rule value="break_stmt" />
                <Terminating_Rule value="return_stmt" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="0" characterLevel="phrased">
            <Uses_Terminated value="break_stmt" />
            <Uses_Terminated value="continue_stmt" />
            <Uses_Terminated value="goto_stmt" />
            <Uses_Terminated value="return_stmt" />
        </Properties>
        <Called>
            <C v="break_stmt">
                <T v="semikolon" c="5" />
            </C>
            <C v="continue_stmt">
                <T v="semikolon" c="6" />
            </C>
            <C v="goto_stmt">
                <C v="ID" c="7">
                    <C v="NON_ID" c="9">
                        <T v="not_reseved" c="10" />
                        <T v="reserved" c="11" />
                    </C>
                </C>
                <T v="semikolon" c="8" />
            </C>
            <C v="return_stmt">
                <C v="expression" c="12">
                    <C v="assignment_expression" c="14">
                        <T v="assignment_operator" c="15" />
                        <C v="conditional_expression" c="16">
                            <X v="logical_or_expression" c="20" />
                            <X v="conditional_expression" c="21" />
                            <X v="expression" c="22" />
                        </C>
                        <R v="assignment_expression" c="17" />
                        <C v="cast_expression" c="18">
                            <X v="cast_expression" c="23" />
                            <X v="type_name" c="24" />
                            <X v="unary_expression" c="25" />
                        </C>
                        <C v="unary_expression" c="19">
                            <X v="type_name" c="26" />
                            <T v="unary_operator" c="27" />
                            <X v="cast_expression" c="28" />
                            <X v="postfix_expression" c="29" />
                            <X v="unary_expression" c="30" />
                        </C>
                    </C>
                </C>
                <T v="semikolon" c="13" />
            </C>
        </Called>
        <Caller />
    </Rule>
    <Rule value="lable_stmt" uses="ID" usedBy=",statement,">
        <Expression>
            <Sequence>
                <Terminating_Rule value="ID" />
                <String value=":" />
            </Sequence>
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <UsedBy_Terminated value="statement" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="2">
                    <T v="not_reseved" c="3" />
                    <T v="reserved" c="4" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="2">
                    <C v="if_stmt" c="17">
                        <R v="statement" c="18" />
                        <C v="else_part" c="19">
                            <X v="if_stmt" c="20" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="3" />
                <C v="p_Block" c="4">
                    <C v="p_ifndef" c="21">
                        <C v="compilerSwitch" c="26">
                            <X v="preprocedure" c="27" />
                        </C>
                    </C>
                    <C v="p_if" c="22">
                        <R v="compilerSwitch" c="28" />
                    </C>
                    <C v="p_elif" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_else" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_ifdef" c="25" />
                </C>
                <X v="namespace" c="5" />
                <X v="extern_compiled" c="6" />
                <T v="pass" c="7" />
                <X v="compound_statement" c="8" />
                <X v="case_part" c="9" />
                <X v="default_part" c="10" />
                <X v="if_part" c="11" />
                <X v="switch_stmt" c="12" />
                <X v="while_stmt" c="13" />
                <X v="do_stmt" c="14" />
                <X v="for_stmt" c="15" />
                <X v="p_define" c="16" />
            </C>
        </Caller>
    </Rule>
    <Rule value="lable_stmt" uses="ID" usedBy=",statement,">
        <Expression>
            <Sequence>
                <Terminating_Rule value="ID" />
                <Sub>
                    <Exclusion>
                        <First>
                            <String value=":" />
                        </First>
                        <Second>
                            <String value="::" />
                        </Second>
                    </Exclusion>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <UsedBy_Terminated value="statement" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="2">
                    <T v="not_reseved" c="3" />
                    <T v="reserved" c="4" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="2">
                    <C v="if_stmt" c="17">
                        <R v="statement" c="18" />
                        <C v="else_part" c="19">
                            <X v="if_stmt" c="20" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="3" />
                <C v="p_Block" c="4">
                    <C v="p_ifndef" c="21">
                        <C v="compilerSwitch" c="26">
                            <X v="preprocedure" c="27" />
                        </C>
                    </C>
                    <C v="p_if" c="22">
                        <R v="compilerSwitch" c="28" />
                    </C>
                    <C v="p_elif" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_else" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_ifdef" c="25" />
                </C>
                <X v="namespace" c="5" />
                <X v="extern_compiled" c="6" />
                <T v="pass" c="7" />
                <X v="compound_statement" c="8" />
                <X v="case_part" c="9" />
                <X v="default_part" c="10" />
                <X v="if_part" c="11" />
                <X v="switch_stmt" c="12" />
                <X v="while_stmt" c="13" />
                <X v="do_stmt" c="14" />
                <X v="for_stmt" c="15" />
                <X v="p_define" c="16" />
            </C>
        </Caller>
    </Rule>
    <Rule value="logical_and_expression" uses="inclusive_or_expression" usedBy=",logical_or_expression," recursiveUses="inclusive_or_expression" recursiveUsedBy="logical_or_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="inclusive_or_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <String value="&amp;&amp;" />
                                    <String value="and" />
                                </OrInclusive>
                            </Sub>
                            <Recursive_Rule value="inclusive_or_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="inclusive_or_expression" />
            <UsedBy_Recursive value="logical_or_expression" />
        </Properties>
        <Called>
            <C v="inclusive_or_expression">
                <C v="exclusive_or_expression" c="2">
                    <C v="and_expression" c="3">
                        <C v="equality_expression" c="4">
                            <X v="relational_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="logical_or_expression">
                <C v="conditional_expression" c="2">
                    <C v="constant_expression" c="3">
                        <C v="struct_declarator" c="6">
                            <X v="struct_declarator_list" c="13" />
                        </C>
                        <C v="direct_declarator_second" c="7">
                            <X v="direct_declarator" c="14" />
                        </C>
                        <C v="direct_abstract_declarator" c="8">
                            <X v="abstract_declarator" c="15" />
                        </C>
                        <C v="case_expr" c="9">
                            <X v="case_part" c="16" />
                        </C>
                        <C v="property_declarator" c="10">
                            <X v="property" c="17" />
                        </C>
                        <C v="declarator_prp" c="11">
                            <X v="property_declarator" c="18" />
                        </C>
                        <C v="enumerator" c="12">
                            <X v="enum_specifier" c="19" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="4" />
                    <C v="assignment_expression" c="5">
                        <C v="initializer" c="20">
                            <X v="init_declarator" c="23" />
                            <X v="initializer_list" c="24" />
                        </C>
                        <C v="argument_expression_list" c="21">
                            <X v="postfix_expression_second" c="25" />
                        </C>
                        <R v="assignment_expression" c="22" />
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="logical_or_expression" uses="logical_and_expression" usedBy=",conditional_expression," recursiveUses="logical_and_expression" recursiveUsedBy="conditional_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="logical_and_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <String value="||" />
                                    <String value="or" />
                                </OrInclusive>
                            </Sub>
                            <Recursive_Rule value="logical_and_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="logical_and_expression" />
            <UsedBy_Recursive value="conditional_expression" />
        </Properties>
        <Called>
            <C v="logical_and_expression">
                <C v="inclusive_or_expression" c="2">
                    <C v="exclusive_or_expression" c="3">
                        <C v="and_expression" c="4">
                            <X v="equality_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="conditional_expression">
                <C v="constant_expression" c="2">
                    <C v="struct_declarator" c="5">
                        <C v="struct_declarator_list" c="12">
                            <T v="struct_declaration" c="13" />
                        </C>
                    </C>
                    <C v="direct_declarator_second" c="6">
                        <C v="direct_declarator" c="14">
                            <X v="funcPoint_declarator" c="15" />
                            <X v="declarator" c="16" />
                        </C>
                    </C>
                    <C v="direct_abstract_declarator" c="7">
                        <C v="abstract_declarator" c="17">
                            <X v="type_name" c="18" />
                            <X v="direct_abstract_declarator" c="19" />
                            <X v="parameter_declaration" c="20" />
                        </C>
                    </C>
                    <C v="case_expr" c="8">
                        <C v="case_part" c="21">
                            <X v="case_stmt" c="22" />
                        </C>
                    </C>
                    <C v="property_declarator" c="9">
                        <C v="property" c="23">
                            <X v="public" c="24" />
                            <X v="protected" c="25" />
                            <X v="private" c="26" />
                        </C>
                    </C>
                    <C v="declarator_prp" c="10">
                        <R v="property_declarator" c="27" />
                    </C>
                    <C v="enumerator" c="11">
                        <C v="enum_specifier" c="28">
                            <X v="property" c="29" />
                            <X v="type_specifier" c="30" />
                        </C>
                    </C>
                </C>
                <X v="conditional_expression" c="3" />
                <X v="assignment_expression" c="4" />
            </C>
        </Caller>
    </Rule>
    <Rule value="methode" uses="constructor,destructor,operator,semikolon,service" usedBy=",public,protected,private,property,">
        <Expression>
            <Sequence>
                <Sub>
                    <OrInclusive>
                        <Terminating_Rule value="operator" />
                        <Terminating_Rule value="constructor" />
                        <Terminating_Rule value="destructor" />
                        <Terminating_Rule value="service" />
                    </OrInclusive>
                </Sub>
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="constructor" />
            <Uses_Terminated value="destructor" />
            <Uses_Terminated value="operator" />
            <Uses_Terminated value="semikolon" />
            <Uses_Terminated value="service" />
            <UsedBy_Terminated value="public" />
            <UsedBy_Terminated value="protected" />
            <UsedBy_Terminated value="private" />
            <UsedBy_Terminated value="property" />
        </Properties>
        <Called>
            <C v="constructor">
                <C v="ID" c="6">
                    <C v="NON_ID" c="9">
                        <T v="not_reseved" c="10" />
                        <T v="reserved" c="11" />
                    </C>
                </C>
                <C v="prototype_parameter_list" c="7">
                    <C v="prototype_parameter" c="12">
                        <C v="init_declarator" c="13">
                            <X v="Number" c="16" />
                            <X v="initializer" c="17" />
                            <X v="declarator" c="18" />
                        </C>
                        <C v="parameter_function" c="14">
                            <X v="direct_parameter_declarator" c="19" />
                        </C>
                        <C v="declaration_specifier" c="15">
                            <X v="USER_TYPE" c="20" />
                            <T v="storage_class_specifier" c="21" />
                            <X v="template_type" c="22" />
                            <T v="type_qualifier" c="23" />
                            <X v="Owner" c="24" />
                            <X v="type_specifier" c="25" />
                        </C>
                    </C>
                </C>
                <T v="type_qualifier" c="8" />
            </C>
            <C v="destructor">
                <C v="ID" c="26" />
                <C v="direct_parameter_declarator" c="27">
                    <X v="expression" c="29" />
                    <X v="identifier_list" c="30" />
                    <X v="parameter_type_list" c="31" />
                    <X v="declarator" c="32" />
                </C>
                <T v="type_qualifier" c="28" />
            </C>
            <C v="operator">
                <X v="declaration_specifier" c="33" />
                <T v="operator_id" c="34" />
                <X v="prototype_parameter_list" c="35" />
                <T v="type_qualifier" c="36" />
            </C>
            <T v="semikolon" />
            <C v="service">
                <X v="ID" c="37" />
                <X v="declaration_specifier" c="38" />
                <X v="prototype_parameter_list" c="39" />
                <T v="type_qualifier" c="40" />
            </C>
        </Called>
        <Caller>
            <C v="public">
                <C v="class_content" c="5">
                    <C v="class_definition" c="6">
                        <C v="external_declaration" c="7">
                            <T v="translation_unit" c="12" />
                        </C>
                        <C v="namespace" c="8">
                            <T v="pass" c="13" />
                            <X v="namespace" c="14" />
                            <X v="extern_compiled" c="15" />
                        </C>
                        <C v="extern_compiled" c="9">
                            <X v="namespace" c="16" />
                        </C>
                        <T v="pass" c="10" />
                        <C v="p_Block" c="11">
                            <X v="p_ifndef" c="17" />
                            <X v="p_if" c="18" />
                            <X v="p_elif" c="19" />
                            <X v="p_else" c="20" />
                            <X v="p_ifdef" c="21" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="protected">
                <C v="class_content" c="22" />
            </C>
            <C v="private">
                <C v="class_content" c="23" />
            </C>
            <C v="property">
                <C v="public" c="24" />
                <C v="protected" c="25" />
                <C v="private" c="26" />
            </C>
        </Caller>
    </Rule>
    <Rule value="methode_definition" uses="compound_statement,constructor,destructor,expression,operator,semikolon,service" usedBy=",public,protected,private," recursiveUses="compound_statement" recursiveUsedBy="public">
        <Expression>
            <Sequence>
                <Sub>
                    <OrInclusive>
                        <Terminating_Rule value="operator" />
                        <Terminating_Rule value="constructor" />
                        <Terminating_Rule value="destructor" />
                        <Terminating_Rule value="service" />
                    </OrInclusive>
                </Sub>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Character_Single value=":" />
                            <Terminating_Rule value="expression" />
                            <ZeroOrMoreOf>
                                <Sub>
                                    <Sequence>
                                        <Character_Single value="," />
                                        <Terminating_Rule value="expression" />
                                    </Sequence>
                                </Sub>
                            </ZeroOrMoreOf>
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
                <Recursive_Rule value="compound_statement" />
                <ZeroOrOneOf>
                    <Terminating_Rule value="semikolon" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="constructor" />
            <Uses_Terminated value="destructor" />
            <Uses_Terminated value="expression" />
            <Uses_Terminated value="operator" />
            <Uses_Terminated value="semikolon" />
            <Uses_Terminated value="service" />
            <Uses_Recursive value="compound_statement" />
            <UsedBy_Terminated value="protected" />
            <UsedBy_Terminated value="private" />
            <UsedBy_Recursive value="public" />
        </Properties>
        <Called>
            <C v="constructor">
                <C v="ID" c="8">
                    <C v="NON_ID" c="11">
                        <T v="not_reseved" c="12" />
                        <T v="reserved" c="13" />
                    </C>
                </C>
                <C v="prototype_parameter_list" c="9">
                    <C v="prototype_parameter" c="14">
                        <C v="init_declarator" c="15">
                            <X v="Number" c="18" />
                            <X v="initializer" c="19" />
                            <X v="declarator" c="20" />
                        </C>
                        <C v="parameter_function" c="16">
                            <X v="direct_parameter_declarator" c="21" />
                        </C>
                        <C v="declaration_specifier" c="17">
                            <X v="USER_TYPE" c="22" />
                            <T v="storage_class_specifier" c="23" />
                            <X v="template_type" c="24" />
                            <T v="type_qualifier" c="25" />
                            <X v="Owner" c="26" />
                            <X v="type_specifier" c="27" />
                        </C>
                    </C>
                </C>
                <T v="type_qualifier" c="10" />
            </C>
            <C v="destructor">
                <X v="ID" c="28" />
                <X v="direct_parameter_declarator" c="29" />
                <T v="type_qualifier" c="30" />
            </C>
            <C v="expression">
                <X v="assignment_expression" c="31" />
            </C>
            <C v="operator">
                <X v="declaration_specifier" c="32" />
                <T v="operator_id" c="33" />
                <X v="prototype_parameter_list" c="34" />
                <T v="type_qualifier" c="35" />
            </C>
            <T v="semikolon" />
            <C v="service">
                <X v="ID" c="36" />
                <X v="declaration_specifier" c="37" />
                <X v="prototype_parameter_list" c="38" />
                <T v="type_qualifier" c="39" />
            </C>
            <C v="compound_statement">
                <X v="declaration" c="40" />
                <X v="preprocedure" c="41" />
                <X v="statement" c="42" />
            </C>
        </Called>
        <Caller>
            <C v="protected">
                <C v="class_content" c="4">
                    <C v="class_definition" c="5">
                        <C v="external_declaration" c="6">
                            <T v="translation_unit" c="11" />
                        </C>
                        <C v="namespace" c="7">
                            <T v="pass" c="12" />
                            <X v="namespace" c="13" />
                            <X v="extern_compiled" c="14" />
                        </C>
                        <C v="extern_compiled" c="8">
                            <X v="namespace" c="15" />
                        </C>
                        <T v="pass" c="9" />
                        <C v="p_Block" c="10">
                            <X v="p_ifndef" c="16" />
                            <X v="p_if" c="17" />
                            <X v="p_elif" c="18" />
                            <X v="p_else" c="19" />
                            <X v="p_ifdef" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="private">
                <C v="class_content" c="21" />
            </C>
            <C v="public">
                <C v="class_content" c="22" />
            </C>
        </Caller>
    </Rule>
    <Rule value="multiplicative_expression" uses="cast_expression" usedBy=",additive_expression," recursiveUses="cast_expression" recursiveUsedBy="additive_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="cast_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <String value="*" />
                                    <String value="/" />
                                    <String value="%" />
                                </OrInclusive>
                            </Sub>
                            <Recursive_Rule value="cast_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="cast_expression" />
            <UsedBy_Recursive value="additive_expression" />
        </Properties>
        <Called>
            <C v="cast_expression">
                <R v="cast_expression" c="2" />
                <C v="type_name" c="3">
                    <C v="USER_TYPE" c="5">
                        <C v="ID" c="8">
                            <X v="NON_ID" c="9" />
                        </C>
                    </C>
                    <C v="abstract_declarator" c="6">
                        <C v="pointer" c="10">
                            <X v="type_qualifier_list" c="12" />
                            <X v="pointer" c="13" />
                        </C>
                        <C v="direct_abstract_declarator" c="11">
                            <X v="constant_expression" c="14" />
                            <X v="parameter_type_list" c="15" />
                            <X v="abstract_declarator" c="16" />
                        </C>
                    </C>
                    <C v="specifier_qualifier_list" c="7">
                        <R v="USER_TYPE" c="17" />
                        <T v="type_qualifier" c="18" />
                        <R v="specifier_qualifier_list" c="19" />
                        <C v="type_specifier" c="20">
                            <X v="struct_specifier" c="21" />
                            <X v="union_specifier" c="22" />
                            <X v="enum_specifier" c="23" />
                        </C>
                    </C>
                </C>
                <C v="unary_expression" c="4">
                    <R v="type_name" c="24" />
                    <T v="unary_operator" c="25" />
                    <R v="cast_expression" c="26" />
                    <C v="postfix_expression" c="27">
                        <X v="primary_expression" c="29" />
                        <X v="postfix_expression_second" c="30" />
                    </C>
                    <X v="unary_expression" c="28" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="additive_expression">
                <C v="shift_expression" c="2">
                    <C v="relational_expression" c="3">
                        <C v="equality_expression" c="4">
                            <X v="and_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="namespace" uses="ID,class_definition,declaration,extern_compiled,function_definition,function_prototype,namespace,preprocedure,semikolon,statement,using_namespace" usedBy=",namespace,extern_compiled,pass," recursiveUses="extern_compiled,namespace" recursiveUsedBy="namespace,extern_compiled">
        <Expression>
            <Sequence>
                <String value="namespace" />
                <Terminating_Rule value="ID" />
                <String value="{" />
                <OneOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Recursive_Rule value="namespace" />
                            <Terminating_Rule value="using_namespace" />
                            <Terminating_Rule value="preprocedure" />
                            <Terminating_Rule value="class_definition" />
                            <Terminating_Rule value="function_prototype" />
                            <Terminating_Rule value="declaration" />
                            <Terminating_Rule value="function_definition" />
                            <Terminating_Rule value="statement" />
                            <Recursive_Rule value="extern_compiled" />
                        </OrInclusive>
                    </Sub>
                </OneOrMoreOf>
                <String value="}" />
                <ZeroOrOneOf>
                    <Terminating_Rule value="semikolon" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="class_definition" />
            <Uses_Terminated value="declaration" />
            <Uses_Terminated value="function_definition" />
            <Uses_Terminated value="function_prototype" />
            <Uses_Terminated value="preprocedure" />
            <Uses_Terminated value="semikolon" />
            <Uses_Terminated value="statement" />
            <Uses_Terminated value="using_namespace" />
            <Uses_Recursive value="extern_compiled" />
            <Uses_Recursive value="namespace" />
            <UsedBy_Terminated value="pass" />
            <UsedBy_Recursive value="namespace" />
            <UsedBy_Recursive value="extern_compiled" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="12">
                    <T v="not_reseved" c="13" />
                    <T v="reserved" c="14" />
                </C>
            </C>
            <C v="class_definition">
                <C v="ID" c="15" />
                <C v="calss_parent" c="16">
                    <R v="ID" c="19" />
                    <C v="Owner" c="20">
                        <R v="ID" c="23" />
                        <C v="template_type" c="24">
                            <X v="ID" c="26" />
                            <X v="declaration_specifier" c="27" />
                        </C>
                        <C v="type_specifier" c="25">
                            <X v="struct_specifier" c="28" />
                            <X v="union_specifier" c="29" />
                            <X v="enum_specifier" c="30" />
                        </C>
                    </C>
                    <X v="template_type" c="21" />
                    <X v="type_specifier" c="22" />
                </C>
                <T v="semikolon" c="17" />
                <X v="class_content" c="18" />
            </C>
            <C v="declaration">
                <X v="init_declarator" c="31" />
                <T v="semikolon" c="32" />
                <X v="declaration_specifier" c="33" />
            </C>
            <C v="function_definition">
                <X v="declaration" c="34" />
                <X v="declaration_specifier" c="35" />
                <X v="declarator" c="36" />
                <X v="element_initializer" c="37" />
                <X v="compound_statement" c="38" />
            </C>
            <C v="function_prototype">
                <X v="ID" c="39" />
                <X v="declaration_specifier" c="40" />
                <X v="prototype_parameter_list" c="41" />
                <T v="semikolon" c="42" />
                <T v="type_qualifier" c="43" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="44" />
                <X v="p_include" c="45" />
                <X v="p_line" c="46" />
                <X v="p_pragma" c="47" />
                <X v="p_undefine" c="48" />
                <X v="p_warning" c="49" />
                <X v="compilerSwitch" c="50" />
                <X v="p_define" c="51" />
            </C>
            <T v="semikolon" />
            <C v="statement">
                <X v="break_stmt" c="52" />
                <X v="continue_stmt" c="53" />
                <X v="expr_stmt" c="54" />
                <X v="goto_stmt" c="55" />
                <X v="lable_stmt" c="56" />
                <X v="preprocedure" c="57" />
                <X v="return_stmt" c="58" />
                <X v="case_stmt" c="59" />
                <X v="compound_statement" c="60" />
                <X v="default_stmt" c="61" />
                <X v="do_stmt" c="62" />
                <X v="for_stmt" c="63" />
                <X v="if_stmt" c="64" />
                <X v="switch_stmt" c="65" />
                <X v="while_stmt" c="66" />
            </C>
            <C v="using_namespace">
                <X v="ID" c="67" />
                <T v="semikolon" c="68" />
            </C>
            <C v="extern_compiled">
                <T v="String" c="69" />
                <X v="class_definition" c="70" />
                <X v="declaration" c="71" />
                <X v="function_definition" c="72" />
                <X v="function_prototype" c="73" />
                <X v="preprocedure" c="74" />
                <T v="semikolon" c="75" />
                <X v="statement" c="76" />
                <T v="storage_class_specifier" c="77" />
                <X v="using_namespace" c="78" />
                <X v="namespace" c="79" />
            </C>
            <C v="namespace" />
        </Called>
        <Caller>
            <T v="pass" />
            <C v="namespace" />
            <C v="extern_compiled">
                <R v="namespace" c="4" />
            </C>
        </Caller>
    </Rule>
    <Rule value="NON_ID" uses="not_reseved,reserved" usedBy=",ID,">
        <Expression>
            <Sub>
                <Exclusion>
                    <First>
                        <Terminating_Rule value="reserved" />
                    </First>
                    <Second>
                        <Terminating_Rule value="not_reseved" />
                    </Second>
                </Exclusion>
            </Sub>
        </Expression>
        <Properties leafLevel="1" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="not_reseved" />
            <Uses_Terminated value="reserved" />
            <UsedBy_Terminated value="ID" />
        </Properties>
        <Called>
            <T v="not_reseved" />
            <T v="reserved" />
        </Called>
        <Caller>
            <C v="ID">
                <C v="USER_TYPE" c="2">
                    <X v="declaration_specifier" c="29" />
                    <X v="specifier_qualifier_list" c="30" />
                    <X v="type_name" c="31" />
                    <T v="struct_declaration" c="32" />
                </C>
                <X v="primary_expression" c="3" />
                <X v="postfix_expression_second" c="4" />
                <X v="struct_specifier" c="5" />
                <X v="union_specifier" c="6" />
                <X v="enum_specifier" c="7" />
                <X v="enumerator" c="8" />
                <X v="direct_declarator" c="9" />
                <X v="identifier_list" c="10" />
                <X v="lable_stmt" c="11" />
                <X v="goto_stmt" c="12" />
                <X v="p_undefine" c="13" />
                <X v="p_declarator" c="14" />
                <X v="p_defined" c="15" />
                <X v="function_prototype" c="16" />
                <X v="template_type" c="17" />
                <X v="Owner" c="18" />
                <X v="owned_ID" c="19" />
                <X v="class_declaration" c="20" />
                <X v="class_definition" c="21" />
                <X v="calss_parent" c="22" />
                <X v="constructor" c="23" />
                <X v="destructor" c="24" />
                <X v="service" c="25" />
                <X v="declarator_prp" c="26" />
                <X v="namespace" c="27" />
                <X v="using_namespace" c="28" />
            </C>
        </Caller>
    </Rule>
    <Rule value="not_reseved" uses="" usedBy=",NON_ID,">
        <Expression>
            <OrInclusive>
                <String value="ifdef" />
                <String value="ifndef" />
                <String value="elif" />
                <String value="endif" />
                <String value="define" />
                <String value="undefine" />
                <String value="include" />
                <String value="pragma" />
                <String value="line" />
                <String value="error" />
                <String value="warning" />
                <String value="#preproend" />
                <String value="asm" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="NON_ID" />
        </Properties>
        <Called />
        <Caller>
            <C v="NON_ID">
                <C v="ID" c="2">
                    <C v="USER_TYPE" c="3">
                        <X v="declaration_specifier" c="30" />
                        <X v="specifier_qualifier_list" c="31" />
                        <X v="type_name" c="32" />
                        <T v="struct_declaration" c="33" />
                    </C>
                    <X v="primary_expression" c="4" />
                    <X v="postfix_expression_second" c="5" />
                    <X v="struct_specifier" c="6" />
                    <X v="union_specifier" c="7" />
                    <X v="enum_specifier" c="8" />
                    <X v="enumerator" c="9" />
                    <X v="direct_declarator" c="10" />
                    <X v="identifier_list" c="11" />
                    <X v="lable_stmt" c="12" />
                    <X v="goto_stmt" c="13" />
                    <X v="p_undefine" c="14" />
                    <X v="p_declarator" c="15" />
                    <X v="p_defined" c="16" />
                    <X v="function_prototype" c="17" />
                    <X v="template_type" c="18" />
                    <X v="Owner" c="19" />
                    <X v="owned_ID" c="20" />
                    <X v="class_declaration" c="21" />
                    <X v="class_definition" c="22" />
                    <X v="calss_parent" c="23" />
                    <X v="constructor" c="24" />
                    <X v="destructor" c="25" />
                    <X v="service" c="26" />
                    <X v="declarator_prp" c="27" />
                    <X v="namespace" c="28" />
                    <X v="using_namespace" c="29" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="Number" uses="CONSTANT_CHAR,CONSTANT_FLT1,CONSTANT_FLT2,CONSTANT_FLT3,CONSTANT_HEX,CONSTANT_INT0,CONSTANT_INT1" usedBy=",primary_expression,init_declarator,">
        <Expression>
            <OrInclusive>
                <Terminating_Rule value="CONSTANT_HEX" />
                <Terminating_Rule value="CONSTANT_FLT1" />
                <Terminating_Rule value="CONSTANT_FLT2" />
                <Terminating_Rule value="CONSTANT_FLT3" />
                <Terminating_Rule value="CONSTANT_INT0" />
                <Terminating_Rule value="CONSTANT_INT1" />
                <Terminating_Rule value="CONSTANT_CHAR" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="1" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="CONSTANT_CHAR" />
            <Uses_Terminated value="CONSTANT_FLT1" />
            <Uses_Terminated value="CONSTANT_FLT2" />
            <Uses_Terminated value="CONSTANT_FLT3" />
            <Uses_Terminated value="CONSTANT_HEX" />
            <Uses_Terminated value="CONSTANT_INT0" />
            <Uses_Terminated value="CONSTANT_INT1" />
            <UsedBy_Terminated value="primary_expression" />
            <UsedBy_Terminated value="init_declarator" />
        </Properties>
        <Called>
            <T v="CONSTANT_CHAR" />
            <T v="CONSTANT_FLT1" />
            <T v="CONSTANT_FLT2" />
            <T v="CONSTANT_FLT3" />
            <T v="CONSTANT_HEX" />
            <T v="CONSTANT_INT0" />
            <T v="CONSTANT_INT1" />
        </Called>
        <Caller>
            <C v="primary_expression">
                <C v="postfix_expression" c="3">
                    <C v="unary_expression" c="4">
                        <C v="element_initializer" c="5">
                            <X v="function_definition" c="10" />
                        </C>
                        <R v="unary_expression" c="6" />
                        <C v="cast_expression" c="7">
                            <X v="assignment_expression" c="11" />
                            <X v="parameter_declaration" c="12" />
                            <X v="unary_expression" c="13" />
                            <X v="cast_expression" c="14" />
                            <X v="multiplicative_expression" c="15" />
                        </C>
                        <C v="assignment_expression" c="8">
                            <X v="initializer" c="16" />
                            <X v="argument_expression_list" c="17" />
                            <X v="assignment_expression" c="18" />
                        </C>
                        <C v="parameter_declaration" c="9">
                            <X v="parameter_list" c="19" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="init_declarator">
                <C v="declaration" c="20">
                    <X v="union_specifier" c="22" />
                    <X v="compound_statement" c="23" />
                    <X v="for_expr" c="24" />
                    <X v="p_Block" c="25" />
                    <X v="function_definition" c="26" />
                    <X v="external_declaration" c="27" />
                    <X v="namespace" c="28" />
                    <X v="extern_compiled" c="29" />
                    <T v="pass" c="30" />
                    <X v="struct_specifier" c="31" />
                </C>
                <X v="prototype_parameter" c="21" />
            </C>
        </Caller>
    </Rule>
    <Rule value="operator" uses="declaration_specifier,operator_id,prototype_parameter_list,type_qualifier" usedBy=",methode,methode_definition,">
        <Expression>
            <Sequence>
                <ZeroOrOneOf>
                    <Sub>
                        <OrInclusive>
                            <String value="virtual" />
                            <String value="static" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrOneOf>
                <Terminating_Rule value="declaration_specifier" />
                <Terminating_Rule value="operator_id" />
                <Terminating_Rule value="prototype_parameter_list" />
                <ZeroOrMoreOf>
                    <Terminating_Rule value="type_qualifier" />
                </ZeroOrMoreOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Character_Single value="=" />
                            <Character_Single value="0" />
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="declaration_specifier" />
            <Uses_Terminated value="operator_id" />
            <Uses_Terminated value="prototype_parameter_list" />
            <Uses_Terminated value="type_qualifier" />
            <UsedBy_Terminated value="methode" />
            <UsedBy_Terminated value="methode_definition" />
        </Properties>
        <Called>
            <C v="declaration_specifier">
                <C v="USER_TYPE" c="5">
                    <C v="ID" c="11">
                        <C v="NON_ID" c="12">
                            <T v="not_reseved" c="13" />
                            <T v="reserved" c="14" />
                        </C>
                    </C>
                </C>
                <T v="storage_class_specifier" c="6" />
                <C v="template_type" c="7">
                    <R v="ID" c="15" />
                    <R v="declaration_specifier" c="16" />
                </C>
                <T v="type_qualifier" c="8" />
                <C v="Owner" c="9">
                    <R v="ID" c="17" />
                    <R v="template_type" c="18" />
                    <C v="type_specifier" c="19">
                        <C v="struct_specifier" c="20">
                            <X v="ID" c="23" />
                            <X v="declaration" c="24" />
                        </C>
                        <C v="union_specifier" c="21">
                            <X v="ID" c="25" />
                            <X v="declaration" c="26" />
                        </C>
                        <C v="enum_specifier" c="22">
                            <X v="ID" c="27" />
                            <X v="enumerator" c="28" />
                        </C>
                    </C>
                </C>
                <R v="type_specifier" c="10" />
            </C>
            <T v="operator_id" />
            <C v="prototype_parameter_list">
                <C v="prototype_parameter" c="29">
                    <X v="init_declarator" c="30" />
                    <X v="parameter_function" c="31" />
                    <X v="declaration_specifier" c="32" />
                </C>
            </C>
            <T v="type_qualifier" />
        </Called>
        <Caller>
            <C v="methode">
                <C v="public" c="3">
                    <C v="class_content" c="7">
                        <C v="class_definition" c="8">
                            <X v="external_declaration" c="9" />
                            <X v="namespace" c="10" />
                            <X v="extern_compiled" c="11" />
                            <T v="pass" c="12" />
                            <X v="p_Block" c="13" />
                        </C>
                    </C>
                </C>
                <C v="protected" c="4">
                    <R v="class_content" c="14" />
                </C>
                <C v="private" c="5">
                    <R v="class_content" c="15" />
                </C>
                <C v="property" c="6">
                    <R v="public" c="16" />
                    <R v="protected" c="17" />
                    <R v="private" c="18" />
                </C>
            </C>
            <C v="methode_definition">
                <C v="protected" c="19" />
                <C v="private" c="20" />
                <C v="public" c="21" />
            </C>
        </Caller>
    </Rule>
    <Rule value="operator_id" uses="" usedBy=",direct_declarator,owned_ID,operator,">
        <Expression>
            <Sequence>
                <String value="operator" />
                <Sub>
                    <OrInclusive>
                        <Sub>
                            <Sequence>
                                <String value="(" />
                                <String value=")" />
                            </Sequence>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <Sub>
                                    <Sequence>
                                        <String value="new" />
                                        <ZeroOrOneOf>
                                            <Sub>
                                                <Sequence>
                                                    <String value="[" />
                                                    <String value="]" />
                                                </Sequence>
                                            </Sub>
                                        </ZeroOrOneOf>
                                    </Sequence>
                                </Sub>
                                <Sub>
                                    <Sequence>
                                        <String value="delete" />
                                        <ZeroOrOneOf>
                                            <Sub>
                                                <Sequence>
                                                    <String value="[" />
                                                    <String value="]" />
                                                </Sequence>
                                            </Sub>
                                        </ZeroOrOneOf>
                                    </Sequence>
                                </Sub>
                                <String value="sizeof" />
                            </OrInclusive>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <String value="&amp;" />
                                <String value="*" />
                                <String value="+" />
                                <String value="-" />
                                <String value="~" />
                                <String value="!" />
                            </OrInclusive>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <String value="=" />
                                <String value="&gt;&gt;=" />
                                <String value="&lt;&lt;=" />
                                <String value="+=" />
                                <String value="-=" />
                                <String value="*=" />
                                <String value="/=" />
                                <String value="%=" />
                                <String value="&amp;=" />
                                <String value="^=" />
                                <String value="|=" />
                            </OrInclusive>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <String value="." />
                                <String value="-&gt;" />
                                <String value="++" />
                                <String value="--" />
                            </OrInclusive>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <String value="*" />
                                <String value="/" />
                                <String value="%" />
                            </OrInclusive>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <String value="&lt;&lt;" />
                                <String value="&gt;&gt;" />
                            </OrInclusive>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <String value="&lt;=" />
                                <String value="&gt;=" />
                                <String value="&lt;" />
                                <String value="&gt;" />
                            </OrInclusive>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <String value="==" />
                                <String value="!=" />
                            </OrInclusive>
                        </Sub>
                        <Sub>
                            <OrInclusive>
                                <String value="^" />
                                <String value="|" />
                                <String value="&amp;&amp;" />
                                <String value="||" />
                            </OrInclusive>
                        </Sub>
                    </OrInclusive>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="direct_declarator" />
            <UsedBy_Terminated value="owned_ID" />
            <UsedBy_Terminated value="operator" />
        </Properties>
        <Called />
        <Caller>
            <C v="direct_declarator">
                <C v="funcPoint_declarator" c="4">
                    <C v="declarator" c="6">
                        <C v="struct_declarator" c="7">
                            <X v="struct_declarator_list" c="12" />
                        </C>
                        <C v="parameter_declaration" c="8">
                            <X v="parameter_list" c="13" />
                        </C>
                        <C v="function_definition" c="9">
                            <X v="external_declaration" c="14" />
                            <X v="namespace" c="15" />
                            <X v="extern_compiled" c="16" />
                            <T v="pass" c="17" />
                            <X v="p_Block" c="18" />
                        </C>
                        <C v="init_declarator" c="10">
                            <X v="declaration" c="19" />
                            <X v="prototype_parameter" c="20" />
                        </C>
                        <C v="direct_parameter_declarator" c="11">
                            <X v="parameter_function" c="21" />
                            <X v="p_declarator" c="22" />
                            <X v="destructor" c="23" />
                            <X v="direct_declarator_second" c="24" />
                        </C>
                    </C>
                </C>
                <R v="declarator" c="5" />
            </C>
            <C v="owned_ID">
                <C v="direct_declarator" c="25" />
            </C>
            <C v="operator">
                <C v="methode" c="26">
                    <X v="public" c="28" />
                    <X v="protected" c="29" />
                    <X v="private" c="30" />
                    <X v="property" c="31" />
                </C>
                <X v="methode_definition" c="27" />
            </C>
        </Caller>
    </Rule>
    <Rule value="owned_ID" uses="ID,Owner,operator_id" usedBy=",direct_declarator," recursiveUses="Owner" recursiveUsedBy="direct_declarator">
        <Expression>
            <Sub>
                <Sequence>
                    <OneOrMoreOf>
                        <Sub>
                            <Sequence>
                                <Recursive_Rule value="Owner" />
                                <Character_Single value=":" />
                                <Character_Single value=":" />
                            </Sequence>
                        </Sub>
                    </OneOrMoreOf>
                    <ZeroOrOneOf>
                        <Character_Single value="~" />
                    </ZeroOrOneOf>
                    <Sub>
                        <OrInclusive>
                            <Terminating_Rule value="operator_id" />
                            <Terminating_Rule value="ID" />
                        </OrInclusive>
                    </Sub>
                </Sequence>
            </Sub>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="operator_id" />
            <Uses_Recursive value="Owner" />
            <UsedBy_Recursive value="direct_declarator" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="4">
                    <T v="not_reseved" c="5" />
                    <T v="reserved" c="6" />
                </C>
            </C>
            <T v="operator_id" />
            <C v="Owner">
                <C v="ID" c="7" />
                <C v="template_type" c="8">
                    <R v="ID" c="10" />
                    <C v="declaration_specifier" c="11">
                        <C v="USER_TYPE" c="12">
                            <X v="ID" c="18" />
                        </C>
                        <T v="storage_class_specifier" c="13" />
                        <R v="template_type" c="14" />
                        <T v="type_qualifier" c="15" />
                        <R v="Owner" c="16" />
                        <C v="type_specifier" c="17">
                            <X v="struct_specifier" c="19" />
                            <X v="union_specifier" c="20" />
                            <X v="enum_specifier" c="21" />
                        </C>
                    </C>
                </C>
                <R v="type_specifier" c="9" />
            </C>
        </Called>
        <Caller>
            <C v="direct_declarator">
                <C v="funcPoint_declarator" c="2">
                    <C v="declarator" c="4">
                        <C v="struct_declarator" c="5">
                            <X v="struct_declarator_list" c="10" />
                        </C>
                        <C v="parameter_declaration" c="6">
                            <X v="parameter_list" c="11" />
                        </C>
                        <C v="function_definition" c="7">
                            <X v="external_declaration" c="12" />
                            <X v="namespace" c="13" />
                            <X v="extern_compiled" c="14" />
                            <T v="pass" c="15" />
                            <X v="p_Block" c="16" />
                        </C>
                        <C v="init_declarator" c="8">
                            <X v="declaration" c="17" />
                            <X v="prototype_parameter" c="18" />
                        </C>
                        <C v="direct_parameter_declarator" c="9">
                            <X v="parameter_function" c="19" />
                            <X v="p_declarator" c="20" />
                            <X v="destructor" c="21" />
                            <X v="direct_declarator_second" c="22" />
                        </C>
                    </C>
                </C>
                <R v="declarator" c="3" />
            </C>
        </Caller>
    </Rule>
    <Rule value="Owner" uses="ID,template_type,type_specifier" usedBy=",primary_expression,declaration_specifier,owned_ID,calss_parent,declarator_prp," recursiveUses="template_type,type_specifier" recursiveUsedBy="primary_expression">
        <Expression>
            <Sub>
                <OrInclusive>
                    <Recursive_Rule value="template_type" />
                    <Recursive_Rule value="type_specifier" />
                    <Terminating_Rule value="ID" />
                </OrInclusive>
            </Sub>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Recursive value="template_type" />
            <Uses_Recursive value="type_specifier" />
            <UsedBy_Terminated value="declaration_specifier" />
            <UsedBy_Terminated value="owned_ID" />
            <UsedBy_Terminated value="calss_parent" />
            <UsedBy_Terminated value="declarator_prp" />
            <UsedBy_Recursive value="primary_expression" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="4">
                    <T v="not_reseved" c="5" />
                    <T v="reserved" c="6" />
                </C>
            </C>
            <C v="template_type">
                <C v="ID" c="7" />
                <C v="declaration_specifier" c="8">
                    <C v="USER_TYPE" c="9">
                        <R v="ID" c="15" />
                    </C>
                    <T v="storage_class_specifier" c="10" />
                    <R v="template_type" c="11" />
                    <T v="type_qualifier" c="12" />
                    <R v="Owner" c="13" />
                    <C v="type_specifier" c="14">
                        <C v="struct_specifier" c="16">
                            <X v="ID" c="19" />
                            <X v="declaration" c="20" />
                        </C>
                        <C v="union_specifier" c="17">
                            <X v="ID" c="21" />
                            <X v="declaration" c="22" />
                        </C>
                        <C v="enum_specifier" c="18">
                            <X v="ID" c="23" />
                            <X v="enumerator" c="24" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="type_specifier" />
        </Called>
        <Caller>
            <C v="declaration_specifier">
                <C v="parameter_declaration" c="6">
                    <C v="parameter_list" c="15">
                        <C v="parameter_type_list" c="16">
                            <X v="direct_abstract_declarator" c="17" />
                            <X v="direct_parameter_declarator" c="18" />
                        </C>
                    </C>
                </C>
                <C v="function_definition" c="7">
                    <C v="external_declaration" c="19">
                        <T v="translation_unit" c="24" />
                    </C>
                    <C v="namespace" c="20">
                        <T v="pass" c="25" />
                        <R v="namespace" c="26" />
                        <C v="extern_compiled" c="27">
                            <X v="namespace" c="28" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="21" />
                    <R v="pass" c="22" />
                    <C v="p_Block" c="23">
                        <X v="p_ifndef" c="29" />
                        <X v="p_if" c="30" />
                        <X v="p_elif" c="31" />
                        <X v="p_else" c="32" />
                        <X v="p_ifdef" c="33" />
                    </C>
                </C>
                <X v="prototype_parameter" c="8" />
                <X v="function_prototype" c="9" />
                <X v="operator" c="10" />
                <X v="service" c="11" />
                <X v="property" c="12" />
                <X v="declaration" c="13" />
                <X v="template_type" c="14" />
            </C>
            <C v="owned_ID">
                <X v="direct_declarator" c="34" />
            </C>
            <C v="calss_parent">
                <X v="class_definition" c="35" />
            </C>
            <C v="declarator_prp">
                <X v="property_declarator" c="36" />
            </C>
            <C v="primary_expression">
                <X v="postfix_expression" c="37" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_Block" uses="declaration,function_definition,function_prototype,p_text,preprocedure,statement" usedBy=",p_ifdef,p_ifndef,p_if,p_elif,p_else," recursiveUses="class_definition" recursiveUsedBy="p_ifdef">
        <Expression>
            <OneOrMoreOf>
                <Sub>
                    <OrInclusive>
                        <Terminating_Rule value="function_prototype" />
                        <Terminating_Rule value="function_definition" />
                        <Terminating_Rule value="declaration" />
                        <Terminating_Rule value="statement" />
                        <Terminating_Rule value="preprocedure" />
                        <Sub>
                            <Exclusion>
                                <First>
                                    <Terminating_Rule value="p_text" />
                                </First>
                                <Second>
                                    <Sub>
                                        <OrInclusive>
                                            <Terminating_Rule value="statement" />
                                            <Terminating_Rule value="function_prototype" />
                                            <Terminating_Rule value="declaration" />
                                            <Terminating_Rule value="function_definition" />
                                        </OrInclusive>
                                    </Sub>
                                </Second>
                            </Exclusion>
                        </Sub>
                    </OrInclusive>
                </Sub>
            </OneOrMoreOf>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="declaration" />
            <Uses_Terminated value="function_definition" />
            <Uses_Terminated value="function_prototype" />
            <Uses_Terminated value="p_text" />
            <Uses_Terminated value="preprocedure" />
            <Uses_Terminated value="statement" />
            <Uses_Recursive value="class_definition" />
            <UsedBy_Terminated value="p_ifndef" />
            <UsedBy_Terminated value="p_if" />
            <UsedBy_Terminated value="p_elif" />
            <UsedBy_Terminated value="p_else" />
            <UsedBy_Recursive value="p_ifdef" />
        </Properties>
        <Called>
            <C v="declaration">
                <C v="init_declarator" c="8">
                    <C v="Number" c="11">
                        <T v="CONSTANT_CHAR" c="14" />
                        <T v="CONSTANT_FLT1" c="15" />
                        <T v="CONSTANT_FLT2" c="16" />
                        <T v="CONSTANT_FLT3" c="17" />
                        <T v="CONSTANT_HEX" c="18" />
                        <T v="CONSTANT_INT0" c="19" />
                        <T v="CONSTANT_INT1" c="20" />
                    </C>
                    <C v="initializer" c="12">
                        <C v="assignment_expression" c="21">
                            <T v="assignment_operator" c="23" />
                            <X v="conditional_expression" c="24" />
                            <X v="assignment_expression" c="25" />
                            <X v="cast_expression" c="26" />
                            <X v="unary_expression" c="27" />
                        </C>
                        <C v="initializer_list" c="22">
                            <X v="initializer" c="28" />
                        </C>
                    </C>
                    <C v="declarator" c="13">
                        <X v="pointer" c="29" />
                        <X v="direct_declarator" c="30" />
                        <X v="funcPoint_declarator" c="31" />
                    </C>
                </C>
                <T v="semikolon" c="9" />
                <X v="declaration_specifier" c="10" />
            </C>
            <C v="function_definition">
                <X v="declaration" c="32" />
                <X v="declaration_specifier" c="33" />
                <X v="declarator" c="34" />
                <X v="element_initializer" c="35" />
                <X v="compound_statement" c="36" />
            </C>
            <C v="function_prototype">
                <X v="ID" c="37" />
                <X v="declaration_specifier" c="38" />
                <X v="prototype_parameter_list" c="39" />
                <T v="semikolon" c="40" />
                <T v="type_qualifier" c="41" />
            </C>
            <C v="p_text">
                <T v="endOfTextLine" c="42" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="43" />
                <X v="p_include" c="44" />
                <X v="p_line" c="45" />
                <X v="p_pragma" c="46" />
                <X v="p_undefine" c="47" />
                <X v="p_warning" c="48" />
                <X v="compilerSwitch" c="49" />
                <X v="p_define" c="50" />
            </C>
            <C v="statement">
                <X v="break_stmt" c="51" />
                <X v="continue_stmt" c="52" />
                <X v="expr_stmt" c="53" />
                <X v="goto_stmt" c="54" />
                <X v="lable_stmt" c="55" />
                <X v="preprocedure" c="56" />
                <X v="return_stmt" c="57" />
                <X v="case_stmt" c="58" />
                <X v="compound_statement" c="59" />
                <X v="default_stmt" c="60" />
                <X v="do_stmt" c="61" />
                <X v="for_stmt" c="62" />
                <X v="if_stmt" c="63" />
                <X v="switch_stmt" c="64" />
                <X v="while_stmt" c="65" />
            </C>
            <C v="class_definition">
                <X v="ID" c="66" />
                <X v="calss_parent" c="67" />
                <T v="semikolon" c="68" />
                <X v="class_content" c="69" />
            </C>
        </Called>
        <Caller>
            <C v="p_ifndef">
                <C v="compilerSwitch" c="6">
                    <C v="preprocedure" c="7">
                        <C v="compound_statement" c="8">
                            <X v="methode_definition" c="18" />
                            <X v="statement" c="19" />
                            <X v="function_definition" c="20" />
                        </C>
                        <R v="p_Block" c="9" />
                        <C v="external_declaration" c="10">
                            <T v="translation_unit" c="21" />
                        </C>
                        <C v="public" c="11">
                            <X v="class_content" c="22" />
                        </C>
                        <C v="protected" c="12">
                            <X v="class_content" c="23" />
                        </C>
                        <C v="private" c="13">
                            <X v="class_content" c="24" />
                        </C>
                        <C v="namespace" c="14">
                            <T v="pass" c="25" />
                            <X v="namespace" c="26" />
                            <X v="extern_compiled" c="27" />
                        </C>
                        <C v="extern_compiled" c="15">
                            <X v="namespace" c="28" />
                        </C>
                        <T v="pass" c="16" />
                        <C v="statement" c="17">
                            <X v="elif_part" c="29" />
                            <X v="else_part" c="30" />
                            <X v="p_Block" c="31" />
                            <X v="namespace" c="32" />
                            <X v="extern_compiled" c="33" />
                            <T v="pass" c="34" />
                            <X v="compound_statement" c="35" />
                            <X v="case_part" c="36" />
                            <X v="default_part" c="37" />
                            <X v="if_part" c="38" />
                            <X v="switch_stmt" c="39" />
                            <X v="while_stmt" c="40" />
                            <X v="do_stmt" c="41" />
                            <X v="for_stmt" c="42" />
                            <X v="p_define" c="43" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="p_if">
                <X v="compilerSwitch" c="44" />
            </C>
            <C v="p_elif">
                <X v="compilerSwitch" c="45" />
            </C>
            <C v="p_else">
                <X v="compilerSwitch" c="46" />
            </C>
            <C v="p_ifdef">
                <X v="compilerSwitch" c="47" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_Block" uses="class_definition,declaration,function_definition,function_prototype,p_text,preprocedure,statement,using_namespace" usedBy=",p_ifdef,p_ifndef,p_if,p_elif,p_else," recursiveUses="class_definition" recursiveUsedBy="p_ifdef">
        <Expression>
            <OneOrMoreOf>
                <Sub>
                    <OrInclusive>
                        <Recursive_Rule value="class_definition" />
                        <Terminating_Rule value="function_prototype" />
                        <Terminating_Rule value="function_definition" />
                        <Terminating_Rule value="declaration" />
                        <Terminating_Rule value="statement" />
                        <Terminating_Rule value="preprocedure" />
                        <Terminating_Rule value="using_namespace" />
                        <Sub>
                            <Exclusion>
                                <First>
                                    <Terminating_Rule value="p_text" />
                                </First>
                                <Second>
                                    <Sub>
                                        <OrInclusive>
                                            <Terminating_Rule value="statement" />
                                            <Terminating_Rule value="using_namespace" />
                                            <Terminating_Rule value="preprocedure" />
                                            <Recursive_Rule value="class_definition" />
                                            <Terminating_Rule value="function_prototype" />
                                            <Terminating_Rule value="declaration" />
                                            <Terminating_Rule value="function_definition" />
                                        </OrInclusive>
                                    </Sub>
                                </Second>
                            </Exclusion>
                        </Sub>
                    </OrInclusive>
                </Sub>
            </OneOrMoreOf>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="declaration" />
            <Uses_Terminated value="function_definition" />
            <Uses_Terminated value="function_prototype" />
            <Uses_Terminated value="p_text" />
            <Uses_Terminated value="preprocedure" />
            <Uses_Terminated value="statement" />
            <Uses_Terminated value="using_namespace" />
            <Uses_Recursive value="class_definition" />
            <UsedBy_Terminated value="p_ifndef" />
            <UsedBy_Terminated value="p_if" />
            <UsedBy_Terminated value="p_elif" />
            <UsedBy_Terminated value="p_else" />
            <UsedBy_Recursive value="p_ifdef" />
        </Properties>
        <Called>
            <C v="declaration">
                <C v="init_declarator" c="9">
                    <C v="Number" c="12">
                        <T v="CONSTANT_CHAR" c="15" />
                        <T v="CONSTANT_FLT1" c="16" />
                        <T v="CONSTANT_FLT2" c="17" />
                        <T v="CONSTANT_FLT3" c="18" />
                        <T v="CONSTANT_HEX" c="19" />
                        <T v="CONSTANT_INT0" c="20" />
                        <T v="CONSTANT_INT1" c="21" />
                    </C>
                    <C v="initializer" c="13">
                        <C v="assignment_expression" c="22">
                            <T v="assignment_operator" c="24" />
                            <X v="conditional_expression" c="25" />
                            <X v="assignment_expression" c="26" />
                            <X v="cast_expression" c="27" />
                            <X v="unary_expression" c="28" />
                        </C>
                        <C v="initializer_list" c="23">
                            <X v="initializer" c="29" />
                        </C>
                    </C>
                    <C v="declarator" c="14">
                        <X v="pointer" c="30" />
                        <X v="direct_declarator" c="31" />
                        <X v="funcPoint_declarator" c="32" />
                    </C>
                </C>
                <T v="semikolon" c="10" />
                <X v="declaration_specifier" c="11" />
            </C>
            <C v="function_definition">
                <X v="declaration" c="33" />
                <X v="declaration_specifier" c="34" />
                <X v="declarator" c="35" />
                <X v="element_initializer" c="36" />
                <X v="compound_statement" c="37" />
            </C>
            <C v="function_prototype">
                <X v="ID" c="38" />
                <X v="declaration_specifier" c="39" />
                <X v="prototype_parameter_list" c="40" />
                <T v="semikolon" c="41" />
                <T v="type_qualifier" c="42" />
            </C>
            <C v="p_text">
                <T v="endOfTextLine" c="43" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="44" />
                <X v="p_include" c="45" />
                <X v="p_line" c="46" />
                <X v="p_pragma" c="47" />
                <X v="p_undefine" c="48" />
                <X v="p_warning" c="49" />
                <X v="compilerSwitch" c="50" />
                <X v="p_define" c="51" />
            </C>
            <C v="statement">
                <X v="break_stmt" c="52" />
                <X v="continue_stmt" c="53" />
                <X v="expr_stmt" c="54" />
                <X v="goto_stmt" c="55" />
                <X v="lable_stmt" c="56" />
                <X v="preprocedure" c="57" />
                <X v="return_stmt" c="58" />
                <X v="case_stmt" c="59" />
                <X v="compound_statement" c="60" />
                <X v="default_stmt" c="61" />
                <X v="do_stmt" c="62" />
                <X v="for_stmt" c="63" />
                <X v="if_stmt" c="64" />
                <X v="switch_stmt" c="65" />
                <X v="while_stmt" c="66" />
            </C>
            <C v="using_namespace">
                <X v="ID" c="67" />
                <T v="semikolon" c="68" />
            </C>
            <C v="class_definition">
                <X v="ID" c="69" />
                <X v="calss_parent" c="70" />
                <T v="semikolon" c="71" />
                <X v="class_content" c="72" />
            </C>
        </Called>
        <Caller>
            <C v="p_ifndef">
                <C v="compilerSwitch" c="6">
                    <C v="preprocedure" c="7">
                        <C v="compound_statement" c="8">
                            <X v="methode_definition" c="18" />
                            <X v="statement" c="19" />
                            <X v="function_definition" c="20" />
                        </C>
                        <R v="p_Block" c="9" />
                        <C v="external_declaration" c="10">
                            <T v="translation_unit" c="21" />
                        </C>
                        <C v="public" c="11">
                            <X v="class_content" c="22" />
                        </C>
                        <C v="protected" c="12">
                            <X v="class_content" c="23" />
                        </C>
                        <C v="private" c="13">
                            <X v="class_content" c="24" />
                        </C>
                        <C v="namespace" c="14">
                            <T v="pass" c="25" />
                            <X v="namespace" c="26" />
                            <X v="extern_compiled" c="27" />
                        </C>
                        <C v="extern_compiled" c="15">
                            <X v="namespace" c="28" />
                        </C>
                        <T v="pass" c="16" />
                        <C v="statement" c="17">
                            <X v="elif_part" c="29" />
                            <X v="else_part" c="30" />
                            <X v="p_Block" c="31" />
                            <X v="namespace" c="32" />
                            <X v="extern_compiled" c="33" />
                            <T v="pass" c="34" />
                            <X v="compound_statement" c="35" />
                            <X v="case_part" c="36" />
                            <X v="default_part" c="37" />
                            <X v="if_part" c="38" />
                            <X v="switch_stmt" c="39" />
                            <X v="while_stmt" c="40" />
                            <X v="do_stmt" c="41" />
                            <X v="for_stmt" c="42" />
                            <X v="p_define" c="43" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="p_if">
                <X v="compilerSwitch" c="44" />
            </C>
            <C v="p_elif">
                <X v="compilerSwitch" c="45" />
            </C>
            <C v="p_else">
                <X v="compilerSwitch" c="46" />
            </C>
            <C v="p_ifdef">
                <X v="compilerSwitch" c="47" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_declarator" uses="ID,direct_parameter_declarator" usedBy=",p_define,">
        <Expression>
            <Sequence>
                <Terminating_Rule value="ID" />
                <ZeroOrOneOf>
                    <Terminating_Rule value="direct_parameter_declarator" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="not phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="direct_parameter_declarator" />
            <UsedBy_Terminated value="p_define" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <C v="direct_parameter_declarator">
                <C v="expression" c="6">
                    <C v="assignment_expression" c="10">
                        <T v="assignment_operator" c="11" />
                        <C v="conditional_expression" c="12">
                            <X v="logical_or_expression" c="16" />
                            <X v="conditional_expression" c="17" />
                            <X v="expression" c="18" />
                        </C>
                        <R v="assignment_expression" c="13" />
                        <C v="cast_expression" c="14">
                            <X v="cast_expression" c="19" />
                            <X v="type_name" c="20" />
                            <X v="unary_expression" c="21" />
                        </C>
                        <C v="unary_expression" c="15">
                            <X v="type_name" c="22" />
                            <T v="unary_operator" c="23" />
                            <X v="cast_expression" c="24" />
                            <X v="postfix_expression" c="25" />
                            <X v="unary_expression" c="26" />
                        </C>
                    </C>
                </C>
                <C v="identifier_list" c="7">
                    <C v="ID" c="27" />
                </C>
                <C v="parameter_type_list" c="8">
                    <C v="parameter_list" c="28">
                        <C v="parameter_declaration" c="29">
                            <T v="assignment_operator" c="30" />
                            <X v="cast_expression" c="31" />
                            <X v="declaration_specifier" c="32" />
                            <X v="declarator" c="33" />
                            <X v="parameter_function" c="34" />
                            <X v="unary_expression" c="35" />
                            <X v="abstract_declarator" c="36" />
                        </C>
                    </C>
                </C>
                <X v="declarator" c="9" />
            </C>
        </Called>
        <Caller>
            <C v="p_define">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_define" uses="expression,p_declarator,p_pasting_literal,p_preproend,p_stringize_literal,p_text,semikolon,statement" usedBy=",preprocedure," recursiveUses="statement" recursiveUsedBy="preprocedure">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="define" />
                <Terminating_Rule value="p_declarator" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <ZeroOrOneOf>
                                <Character_Single value="\\" />
                            </ZeroOrOneOf>
                            <Sub>
                                <OrInclusive>
                                    <Terminating_Rule value="p_stringize_literal" />
                                    <Terminating_Rule value="p_pasting_literal" />
                                    <Recursive_Rule value="statement" />
                                    <Terminating_Rule value="expression" />
                                    <Terminating_Rule value="p_text" />
                                </OrInclusive>
                            </Sub>
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
                <ZeroOrOneOf>
                    <Terminating_Rule value="semikolon" />
                </ZeroOrOneOf>
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <Uses_Terminated value="p_declarator" />
            <Uses_Terminated value="p_pasting_literal" />
            <Uses_Terminated value="p_preproend" />
            <Uses_Terminated value="p_stringize_literal" />
            <Uses_Terminated value="p_text" />
            <Uses_Terminated value="semikolon" />
            <Uses_Recursive value="statement" />
            <UsedBy_Recursive value="preprocedure" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="9">
                    <T v="assignment_operator" c="10" />
                    <C v="conditional_expression" c="11">
                        <C v="logical_or_expression" c="15">
                            <X v="logical_and_expression" c="18" />
                        </C>
                        <R v="conditional_expression" c="16" />
                        <R v="expression" c="17" />
                    </C>
                    <R v="assignment_expression" c="12" />
                    <C v="cast_expression" c="13">
                        <R v="cast_expression" c="19" />
                        <C v="type_name" c="20">
                            <X v="USER_TYPE" c="22" />
                            <X v="abstract_declarator" c="23" />
                            <X v="specifier_qualifier_list" c="24" />
                        </C>
                        <C v="unary_expression" c="21">
                            <X v="type_name" c="25" />
                            <T v="unary_operator" c="26" />
                            <X v="cast_expression" c="27" />
                            <X v="postfix_expression" c="28" />
                            <X v="unary_expression" c="29" />
                        </C>
                    </C>
                    <R v="unary_expression" c="14" />
                </C>
            </C>
            <C v="p_declarator">
                <X v="ID" c="30" />
                <X v="direct_parameter_declarator" c="31" />
            </C>
            <T v="p_pasting_literal" />
            <T v="p_preproend" />
            <T v="p_stringize_literal" />
            <C v="p_text">
                <T v="endOfTextLine" c="32" />
            </C>
            <T v="semikolon" />
            <C v="statement">
                <X v="break_stmt" c="33" />
                <X v="continue_stmt" c="34" />
                <X v="expr_stmt" c="35" />
                <X v="goto_stmt" c="36" />
                <X v="lable_stmt" c="37" />
                <X v="preprocedure" c="38" />
                <X v="return_stmt" c="39" />
                <X v="case_stmt" c="40" />
                <X v="compound_statement" c="41" />
                <X v="default_stmt" c="42" />
                <X v="do_stmt" c="43" />
                <X v="for_stmt" c="44" />
                <X v="if_stmt" c="45" />
                <X v="switch_stmt" c="46" />
                <X v="while_stmt" c="47" />
            </C>
        </Called>
        <Caller>
            <C v="preprocedure">
                <C v="compound_statement" c="2">
                    <C v="methode_definition" c="12">
                        <C v="protected" c="15">
                            <X v="class_content" c="18" />
                        </C>
                        <C v="private" c="16">
                            <X v="class_content" c="19" />
                        </C>
                        <C v="public" c="17">
                            <X v="class_content" c="20" />
                        </C>
                    </C>
                    <C v="statement" c="13">
                        <X v="elif_part" c="21" />
                        <X v="else_part" c="22" />
                        <X v="p_Block" c="23" />
                        <X v="namespace" c="24" />
                        <X v="extern_compiled" c="25" />
                        <T v="pass" c="26" />
                        <X v="compound_statement" c="27" />
                        <X v="case_part" c="28" />
                        <X v="default_part" c="29" />
                        <X v="if_part" c="30" />
                        <X v="switch_stmt" c="31" />
                        <X v="while_stmt" c="32" />
                        <X v="do_stmt" c="33" />
                        <X v="for_stmt" c="34" />
                        <X v="p_define" c="35" />
                    </C>
                    <X v="function_definition" c="14" />
                </C>
                <X v="p_Block" c="3" />
                <X v="external_declaration" c="4" />
                <X v="public" c="5" />
                <X v="protected" c="6" />
                <X v="private" c="7" />
                <X v="namespace" c="8" />
                <X v="extern_compiled" c="9" />
                <T v="pass" c="10" />
                <X v="statement" c="11" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_defined" uses="ID" usedBy=",primary_expression,">
        <Expression>
            <Sequence>
                <String value="defined" />
                <Sub>
                    <OrInclusive>
                        <Sub>
                            <Terminating_Rule value="ID" />
                        </Sub>
                        <Sub>
                            <Sequence>
                                <String value="(" />
                                <Terminating_Rule value="ID" />
                                <String value=")" />
                            </Sequence>
                        </Sub>
                    </OrInclusive>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <UsedBy_Terminated value="primary_expression" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="2">
                    <T v="not_reseved" c="3" />
                    <T v="reserved" c="4" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="primary_expression">
                <C v="postfix_expression" c="2">
                    <C v="unary_expression" c="3">
                        <C v="element_initializer" c="4">
                            <X v="function_definition" c="9" />
                        </C>
                        <R v="unary_expression" c="5" />
                        <C v="cast_expression" c="6">
                            <X v="assignment_expression" c="10" />
                            <X v="parameter_declaration" c="11" />
                            <X v="unary_expression" c="12" />
                            <X v="cast_expression" c="13" />
                            <X v="multiplicative_expression" c="14" />
                        </C>
                        <C v="assignment_expression" c="7">
                            <X v="initializer" c="15" />
                            <X v="argument_expression_list" c="16" />
                            <X v="assignment_expression" c="17" />
                        </C>
                        <C v="parameter_declaration" c="8">
                            <X v="parameter_list" c="18" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_elif" uses="p_Block,p_elif_expr" usedBy=",compilerSwitch," recursiveUses="p_Block" recursiveUsedBy="compilerSwitch">
        <Expression>
            <Sequence>
                <Terminating_Rule value="p_elif_expr" />
                <ZeroOrOneOf>
                    <Recursive_Rule value="p_Block" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_elif_expr" />
            <Uses_Recursive value="p_Block" />
            <UsedBy_Recursive value="compilerSwitch" />
        </Properties>
        <Called>
            <C v="p_elif_expr">
                <C v="expression" c="3">
                    <C v="assignment_expression" c="4">
                        <T v="assignment_operator" c="5" />
                        <C v="conditional_expression" c="6">
                            <X v="logical_or_expression" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="expression" c="12" />
                        </C>
                        <R v="assignment_expression" c="7" />
                        <C v="cast_expression" c="8">
                            <X v="cast_expression" c="13" />
                            <X v="type_name" c="14" />
                            <X v="unary_expression" c="15" />
                        </C>
                        <C v="unary_expression" c="9">
                            <X v="type_name" c="16" />
                            <T v="unary_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="postfix_expression" c="19" />
                            <X v="unary_expression" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="p_Block">
                <C v="declaration" c="21">
                    <X v="init_declarator" c="29" />
                    <T v="semikolon" c="30" />
                    <X v="declaration_specifier" c="31" />
                </C>
                <X v="function_definition" c="22" />
                <X v="function_prototype" c="23" />
                <X v="p_text" c="24" />
                <X v="preprocedure" c="25" />
                <X v="statement" c="26" />
                <X v="using_namespace" c="27" />
                <X v="class_definition" c="28" />
            </C>
        </Called>
        <Caller>
            <C v="compilerSwitch">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_elif_expr" uses="expression" usedBy=",p_elif,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="elif" />
                <Sub>
                    <Terminating_Rule value="expression" />
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <UsedBy_Terminated value="p_elif" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="2">
                    <T v="assignment_operator" c="3" />
                    <C v="conditional_expression" c="4">
                        <C v="logical_or_expression" c="8">
                            <X v="logical_and_expression" c="11" />
                        </C>
                        <R v="conditional_expression" c="9" />
                        <R v="expression" c="10" />
                    </C>
                    <R v="assignment_expression" c="5" />
                    <C v="cast_expression" c="6">
                        <R v="cast_expression" c="12" />
                        <C v="type_name" c="13">
                            <X v="USER_TYPE" c="15" />
                            <X v="abstract_declarator" c="16" />
                            <X v="specifier_qualifier_list" c="17" />
                        </C>
                        <C v="unary_expression" c="14">
                            <X v="type_name" c="18" />
                            <T v="unary_operator" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="postfix_expression" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                    </C>
                    <R v="unary_expression" c="7" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="p_elif">
                <C v="compilerSwitch" c="2">
                    <C v="preprocedure" c="3">
                        <C v="compound_statement" c="4">
                            <X v="methode_definition" c="14" />
                            <X v="statement" c="15" />
                            <X v="function_definition" c="16" />
                        </C>
                        <C v="p_Block" c="5">
                            <X v="p_ifndef" c="17" />
                            <X v="p_if" c="18" />
                            <X v="p_elif" c="19" />
                            <X v="p_else" c="20" />
                            <X v="p_ifdef" c="21" />
                        </C>
                        <C v="external_declaration" c="6">
                            <T v="translation_unit" c="22" />
                        </C>
                        <C v="public" c="7">
                            <X v="class_content" c="23" />
                        </C>
                        <C v="protected" c="8">
                            <X v="class_content" c="24" />
                        </C>
                        <C v="private" c="9">
                            <X v="class_content" c="25" />
                        </C>
                        <C v="namespace" c="10">
                            <T v="pass" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                        </C>
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="29" />
                        </C>
                        <T v="pass" c="12" />
                        <C v="statement" c="13">
                            <X v="elif_part" c="30" />
                            <X v="else_part" c="31" />
                            <X v="p_Block" c="32" />
                            <X v="namespace" c="33" />
                            <X v="extern_compiled" c="34" />
                            <T v="pass" c="35" />
                            <X v="compound_statement" c="36" />
                            <X v="case_part" c="37" />
                            <X v="default_part" c="38" />
                            <X v="if_part" c="39" />
                            <X v="switch_stmt" c="40" />
                            <X v="while_stmt" c="41" />
                            <X v="do_stmt" c="42" />
                            <X v="for_stmt" c="43" />
                            <X v="p_define" c="44" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_else" uses="p_Block,p_else_expr" usedBy=",compilerSwitch," recursiveUses="p_Block" recursiveUsedBy="compilerSwitch">
        <Expression>
            <Sequence>
                <Terminating_Rule value="p_else_expr" />
                <ZeroOrOneOf>
                    <Recursive_Rule value="p_Block" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_else_expr" />
            <Uses_Recursive value="p_Block" />
            <UsedBy_Recursive value="compilerSwitch" />
        </Properties>
        <Called>
            <T v="p_else_expr" />
            <C v="p_Block">
                <C v="declaration" c="3">
                    <C v="init_declarator" c="11">
                        <C v="Number" c="14">
                            <T v="CONSTANT_CHAR" c="17" />
                            <T v="CONSTANT_FLT1" c="18" />
                            <T v="CONSTANT_FLT2" c="19" />
                            <T v="CONSTANT_FLT3" c="20" />
                            <T v="CONSTANT_HEX" c="21" />
                            <T v="CONSTANT_INT0" c="22" />
                            <T v="CONSTANT_INT1" c="23" />
                        </C>
                        <C v="initializer" c="15">
                            <X v="assignment_expression" c="24" />
                            <X v="initializer_list" c="25" />
                        </C>
                        <C v="declarator" c="16">
                            <X v="pointer" c="26" />
                            <X v="direct_declarator" c="27" />
                            <X v="funcPoint_declarator" c="28" />
                        </C>
                    </C>
                    <T v="semikolon" c="12" />
                    <C v="declaration_specifier" c="13">
                        <X v="USER_TYPE" c="29" />
                        <T v="storage_class_specifier" c="30" />
                        <X v="template_type" c="31" />
                        <T v="type_qualifier" c="32" />
                        <X v="Owner" c="33" />
                        <X v="type_specifier" c="34" />
                    </C>
                </C>
                <X v="function_definition" c="4" />
                <X v="function_prototype" c="5" />
                <X v="p_text" c="6" />
                <X v="preprocedure" c="7" />
                <X v="statement" c="8" />
                <X v="using_namespace" c="9" />
                <X v="class_definition" c="10" />
            </C>
        </Called>
        <Caller>
            <C v="compilerSwitch">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_else_expr" uses="" usedBy=",p_else,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="else" />
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="p_else" />
        </Properties>
        <Called />
        <Caller>
            <C v="p_else">
                <C v="compilerSwitch" c="2">
                    <C v="preprocedure" c="3">
                        <C v="compound_statement" c="4">
                            <X v="methode_definition" c="14" />
                            <X v="statement" c="15" />
                            <X v="function_definition" c="16" />
                        </C>
                        <C v="p_Block" c="5">
                            <X v="p_ifndef" c="17" />
                            <X v="p_if" c="18" />
                            <X v="p_elif" c="19" />
                            <X v="p_else" c="20" />
                            <X v="p_ifdef" c="21" />
                        </C>
                        <C v="external_declaration" c="6">
                            <T v="translation_unit" c="22" />
                        </C>
                        <C v="public" c="7">
                            <X v="class_content" c="23" />
                        </C>
                        <C v="protected" c="8">
                            <X v="class_content" c="24" />
                        </C>
                        <C v="private" c="9">
                            <X v="class_content" c="25" />
                        </C>
                        <C v="namespace" c="10">
                            <T v="pass" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                        </C>
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="29" />
                        </C>
                        <T v="pass" c="12" />
                        <C v="statement" c="13">
                            <X v="elif_part" c="30" />
                            <X v="else_part" c="31" />
                            <X v="p_Block" c="32" />
                            <X v="namespace" c="33" />
                            <X v="extern_compiled" c="34" />
                            <T v="pass" c="35" />
                            <X v="compound_statement" c="36" />
                            <X v="case_part" c="37" />
                            <X v="default_part" c="38" />
                            <X v="if_part" c="39" />
                            <X v="switch_stmt" c="40" />
                            <X v="while_stmt" c="41" />
                            <X v="do_stmt" c="42" />
                            <X v="for_stmt" c="43" />
                            <X v="p_define" c="44" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_endif" uses="p_preproend" usedBy=",compilerSwitch,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="endif" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="1" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_preproend" />
            <UsedBy_Terminated value="compilerSwitch" />
        </Properties>
        <Called>
            <T v="p_preproend" />
        </Called>
        <Caller>
            <C v="compilerSwitch">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_error" uses="p_preproend,p_text" usedBy=",preprocedure,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="error" />
                <Terminating_Rule value="p_text" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="2" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_preproend" />
            <Uses_Terminated value="p_text" />
            <UsedBy_Terminated value="preprocedure" />
        </Properties>
        <Called>
            <T v="p_preproend" />
            <C v="p_text">
                <T v="endOfTextLine" c="3" />
            </C>
        </Called>
        <Caller>
            <C v="preprocedure">
                <C v="compound_statement" c="2">
                    <C v="methode_definition" c="12">
                        <C v="protected" c="15">
                            <X v="class_content" c="18" />
                        </C>
                        <C v="private" c="16">
                            <X v="class_content" c="19" />
                        </C>
                        <C v="public" c="17">
                            <X v="class_content" c="20" />
                        </C>
                    </C>
                    <C v="statement" c="13">
                        <X v="elif_part" c="21" />
                        <X v="else_part" c="22" />
                        <X v="p_Block" c="23" />
                        <X v="namespace" c="24" />
                        <X v="extern_compiled" c="25" />
                        <T v="pass" c="26" />
                        <X v="compound_statement" c="27" />
                        <X v="case_part" c="28" />
                        <X v="default_part" c="29" />
                        <X v="if_part" c="30" />
                        <X v="switch_stmt" c="31" />
                        <X v="while_stmt" c="32" />
                        <X v="do_stmt" c="33" />
                        <X v="for_stmt" c="34" />
                        <X v="p_define" c="35" />
                    </C>
                    <X v="function_definition" c="14" />
                </C>
                <X v="p_Block" c="3" />
                <X v="external_declaration" c="4" />
                <X v="public" c="5" />
                <X v="protected" c="6" />
                <X v="private" c="7" />
                <X v="namespace" c="8" />
                <X v="extern_compiled" c="9" />
                <T v="pass" c="10" />
                <X v="statement" c="11" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_if" uses="p_Block,p_if_expr" usedBy=",compilerSwitch," recursiveUses="p_Block" recursiveUsedBy="compilerSwitch">
        <Expression>
            <Sequence>
                <Terminating_Rule value="p_if_expr" />
                <ZeroOrOneOf>
                    <Recursive_Rule value="p_Block" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_if_expr" />
            <Uses_Recursive value="p_Block" />
            <UsedBy_Recursive value="compilerSwitch" />
        </Properties>
        <Called>
            <C v="p_if_expr">
                <C v="expression" c="3">
                    <C v="assignment_expression" c="4">
                        <T v="assignment_operator" c="5" />
                        <C v="conditional_expression" c="6">
                            <X v="logical_or_expression" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="expression" c="12" />
                        </C>
                        <R v="assignment_expression" c="7" />
                        <C v="cast_expression" c="8">
                            <X v="cast_expression" c="13" />
                            <X v="type_name" c="14" />
                            <X v="unary_expression" c="15" />
                        </C>
                        <C v="unary_expression" c="9">
                            <X v="type_name" c="16" />
                            <T v="unary_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="postfix_expression" c="19" />
                            <X v="unary_expression" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="p_Block">
                <C v="declaration" c="21">
                    <X v="init_declarator" c="29" />
                    <T v="semikolon" c="30" />
                    <X v="declaration_specifier" c="31" />
                </C>
                <X v="function_definition" c="22" />
                <X v="function_prototype" c="23" />
                <X v="p_text" c="24" />
                <X v="preprocedure" c="25" />
                <X v="statement" c="26" />
                <X v="using_namespace" c="27" />
                <X v="class_definition" c="28" />
            </C>
        </Called>
        <Caller>
            <C v="compilerSwitch">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_if_expr" uses="expression" usedBy=",p_if,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <Sub>
                    <Exclusion>
                        <First>
                            <String value="if" />
                        </First>
                        <Second>
                            <Sub>
                                <OrInclusive>
                                    <String value="ifdef" />
                                    <String value="ifndef" />
                                </OrInclusive>
                            </Sub>
                        </Second>
                    </Exclusion>
                </Sub>
                <Sub>
                    <Terminating_Rule value="expression" />
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <UsedBy_Terminated value="p_if" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="2">
                    <T v="assignment_operator" c="3" />
                    <C v="conditional_expression" c="4">
                        <C v="logical_or_expression" c="8">
                            <X v="logical_and_expression" c="11" />
                        </C>
                        <R v="conditional_expression" c="9" />
                        <R v="expression" c="10" />
                    </C>
                    <R v="assignment_expression" c="5" />
                    <C v="cast_expression" c="6">
                        <R v="cast_expression" c="12" />
                        <C v="type_name" c="13">
                            <X v="USER_TYPE" c="15" />
                            <X v="abstract_declarator" c="16" />
                            <X v="specifier_qualifier_list" c="17" />
                        </C>
                        <C v="unary_expression" c="14">
                            <X v="type_name" c="18" />
                            <T v="unary_operator" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="postfix_expression" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                    </C>
                    <R v="unary_expression" c="7" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="p_if">
                <C v="compilerSwitch" c="2">
                    <C v="preprocedure" c="3">
                        <C v="compound_statement" c="4">
                            <X v="methode_definition" c="14" />
                            <X v="statement" c="15" />
                            <X v="function_definition" c="16" />
                        </C>
                        <C v="p_Block" c="5">
                            <X v="p_ifndef" c="17" />
                            <X v="p_if" c="18" />
                            <X v="p_elif" c="19" />
                            <X v="p_else" c="20" />
                            <X v="p_ifdef" c="21" />
                        </C>
                        <C v="external_declaration" c="6">
                            <T v="translation_unit" c="22" />
                        </C>
                        <C v="public" c="7">
                            <X v="class_content" c="23" />
                        </C>
                        <C v="protected" c="8">
                            <X v="class_content" c="24" />
                        </C>
                        <C v="private" c="9">
                            <X v="class_content" c="25" />
                        </C>
                        <C v="namespace" c="10">
                            <T v="pass" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                        </C>
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="29" />
                        </C>
                        <T v="pass" c="12" />
                        <C v="statement" c="13">
                            <X v="elif_part" c="30" />
                            <X v="else_part" c="31" />
                            <X v="p_Block" c="32" />
                            <X v="namespace" c="33" />
                            <X v="extern_compiled" c="34" />
                            <T v="pass" c="35" />
                            <X v="compound_statement" c="36" />
                            <X v="case_part" c="37" />
                            <X v="default_part" c="38" />
                            <X v="if_part" c="39" />
                            <X v="switch_stmt" c="40" />
                            <X v="while_stmt" c="41" />
                            <X v="do_stmt" c="42" />
                            <X v="for_stmt" c="43" />
                            <X v="p_define" c="44" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_ifdef" uses="p_Block,p_ifdef_expr" usedBy=",compilerSwitch," recursiveUses="p_Block" recursiveUsedBy="compilerSwitch">
        <Expression>
            <Sequence>
                <Terminating_Rule value="p_ifdef_expr" />
                <ZeroOrOneOf>
                    <Recursive_Rule value="p_Block" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_ifdef_expr" />
            <Uses_Recursive value="p_Block" />
            <UsedBy_Recursive value="compilerSwitch" />
        </Properties>
        <Called>
            <C v="p_ifdef_expr">
                <C v="expression" c="3">
                    <C v="assignment_expression" c="4">
                        <T v="assignment_operator" c="5" />
                        <C v="conditional_expression" c="6">
                            <X v="logical_or_expression" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="expression" c="12" />
                        </C>
                        <R v="assignment_expression" c="7" />
                        <C v="cast_expression" c="8">
                            <X v="cast_expression" c="13" />
                            <X v="type_name" c="14" />
                            <X v="unary_expression" c="15" />
                        </C>
                        <C v="unary_expression" c="9">
                            <X v="type_name" c="16" />
                            <T v="unary_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="postfix_expression" c="19" />
                            <X v="unary_expression" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="p_Block">
                <C v="declaration" c="21">
                    <X v="init_declarator" c="29" />
                    <T v="semikolon" c="30" />
                    <X v="declaration_specifier" c="31" />
                </C>
                <X v="function_definition" c="22" />
                <X v="function_prototype" c="23" />
                <X v="p_text" c="24" />
                <X v="preprocedure" c="25" />
                <X v="statement" c="26" />
                <X v="using_namespace" c="27" />
                <X v="class_definition" c="28" />
            </C>
        </Called>
        <Caller>
            <C v="compilerSwitch">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_ifdef_expr" uses="expression" usedBy=",p_ifdef,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="ifdef" />
                <Sub>
                    <Terminating_Rule value="expression" />
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <UsedBy_Terminated value="p_ifdef" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="2">
                    <T v="assignment_operator" c="3" />
                    <C v="conditional_expression" c="4">
                        <C v="logical_or_expression" c="8">
                            <X v="logical_and_expression" c="11" />
                        </C>
                        <R v="conditional_expression" c="9" />
                        <R v="expression" c="10" />
                    </C>
                    <R v="assignment_expression" c="5" />
                    <C v="cast_expression" c="6">
                        <R v="cast_expression" c="12" />
                        <C v="type_name" c="13">
                            <X v="USER_TYPE" c="15" />
                            <X v="abstract_declarator" c="16" />
                            <X v="specifier_qualifier_list" c="17" />
                        </C>
                        <C v="unary_expression" c="14">
                            <X v="type_name" c="18" />
                            <T v="unary_operator" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="postfix_expression" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                    </C>
                    <R v="unary_expression" c="7" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="p_ifdef">
                <C v="compilerSwitch" c="2">
                    <C v="preprocedure" c="3">
                        <C v="compound_statement" c="4">
                            <X v="methode_definition" c="14" />
                            <X v="statement" c="15" />
                            <X v="function_definition" c="16" />
                        </C>
                        <C v="p_Block" c="5">
                            <X v="p_ifndef" c="17" />
                            <X v="p_if" c="18" />
                            <X v="p_elif" c="19" />
                            <X v="p_else" c="20" />
                            <X v="p_ifdef" c="21" />
                        </C>
                        <C v="external_declaration" c="6">
                            <T v="translation_unit" c="22" />
                        </C>
                        <C v="public" c="7">
                            <X v="class_content" c="23" />
                        </C>
                        <C v="protected" c="8">
                            <X v="class_content" c="24" />
                        </C>
                        <C v="private" c="9">
                            <X v="class_content" c="25" />
                        </C>
                        <C v="namespace" c="10">
                            <T v="pass" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                        </C>
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="29" />
                        </C>
                        <T v="pass" c="12" />
                        <C v="statement" c="13">
                            <X v="elif_part" c="30" />
                            <X v="else_part" c="31" />
                            <X v="p_Block" c="32" />
                            <X v="namespace" c="33" />
                            <X v="extern_compiled" c="34" />
                            <T v="pass" c="35" />
                            <X v="compound_statement" c="36" />
                            <X v="case_part" c="37" />
                            <X v="default_part" c="38" />
                            <X v="if_part" c="39" />
                            <X v="switch_stmt" c="40" />
                            <X v="while_stmt" c="41" />
                            <X v="do_stmt" c="42" />
                            <X v="for_stmt" c="43" />
                            <X v="p_define" c="44" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_ifndef" uses="p_Block,p_ifndef_expr" usedBy=",compilerSwitch," recursiveUses="p_Block" recursiveUsedBy="compilerSwitch">
        <Expression>
            <Sequence>
                <Terminating_Rule value="p_ifndef_expr" />
                <ZeroOrOneOf>
                    <Recursive_Rule value="p_Block" />
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_ifndef_expr" />
            <Uses_Recursive value="p_Block" />
            <UsedBy_Recursive value="compilerSwitch" />
        </Properties>
        <Called>
            <C v="p_ifndef_expr">
                <C v="expression" c="3">
                    <C v="assignment_expression" c="4">
                        <T v="assignment_operator" c="5" />
                        <C v="conditional_expression" c="6">
                            <X v="logical_or_expression" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="expression" c="12" />
                        </C>
                        <R v="assignment_expression" c="7" />
                        <C v="cast_expression" c="8">
                            <X v="cast_expression" c="13" />
                            <X v="type_name" c="14" />
                            <X v="unary_expression" c="15" />
                        </C>
                        <C v="unary_expression" c="9">
                            <X v="type_name" c="16" />
                            <T v="unary_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="postfix_expression" c="19" />
                            <X v="unary_expression" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="p_Block">
                <C v="declaration" c="21">
                    <X v="init_declarator" c="29" />
                    <T v="semikolon" c="30" />
                    <X v="declaration_specifier" c="31" />
                </C>
                <X v="function_definition" c="22" />
                <X v="function_prototype" c="23" />
                <X v="p_text" c="24" />
                <X v="preprocedure" c="25" />
                <X v="statement" c="26" />
                <X v="using_namespace" c="27" />
                <X v="class_definition" c="28" />
            </C>
        </Called>
        <Caller>
            <C v="compilerSwitch">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_ifndef_expr" uses="expression" usedBy=",p_ifndef,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="ifndef" />
                <Sub>
                    <Terminating_Rule value="expression" />
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <UsedBy_Terminated value="p_ifndef" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="2">
                    <T v="assignment_operator" c="3" />
                    <C v="conditional_expression" c="4">
                        <C v="logical_or_expression" c="8">
                            <X v="logical_and_expression" c="11" />
                        </C>
                        <R v="conditional_expression" c="9" />
                        <R v="expression" c="10" />
                    </C>
                    <R v="assignment_expression" c="5" />
                    <C v="cast_expression" c="6">
                        <R v="cast_expression" c="12" />
                        <C v="type_name" c="13">
                            <X v="USER_TYPE" c="15" />
                            <X v="abstract_declarator" c="16" />
                            <X v="specifier_qualifier_list" c="17" />
                        </C>
                        <C v="unary_expression" c="14">
                            <X v="type_name" c="18" />
                            <T v="unary_operator" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="postfix_expression" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                    </C>
                    <R v="unary_expression" c="7" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="p_ifndef">
                <C v="compilerSwitch" c="2">
                    <C v="preprocedure" c="3">
                        <C v="compound_statement" c="4">
                            <X v="methode_definition" c="14" />
                            <X v="statement" c="15" />
                            <X v="function_definition" c="16" />
                        </C>
                        <C v="p_Block" c="5">
                            <X v="p_ifndef" c="17" />
                            <X v="p_if" c="18" />
                            <X v="p_elif" c="19" />
                            <X v="p_else" c="20" />
                            <X v="p_ifdef" c="21" />
                        </C>
                        <C v="external_declaration" c="6">
                            <T v="translation_unit" c="22" />
                        </C>
                        <C v="public" c="7">
                            <X v="class_content" c="23" />
                        </C>
                        <C v="protected" c="8">
                            <X v="class_content" c="24" />
                        </C>
                        <C v="private" c="9">
                            <X v="class_content" c="25" />
                        </C>
                        <C v="namespace" c="10">
                            <T v="pass" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                        </C>
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="29" />
                        </C>
                        <T v="pass" c="12" />
                        <C v="statement" c="13">
                            <X v="elif_part" c="30" />
                            <X v="else_part" c="31" />
                            <X v="p_Block" c="32" />
                            <X v="namespace" c="33" />
                            <X v="extern_compiled" c="34" />
                            <T v="pass" c="35" />
                            <X v="compound_statement" c="36" />
                            <X v="case_part" c="37" />
                            <X v="default_part" c="38" />
                            <X v="if_part" c="39" />
                            <X v="switch_stmt" c="40" />
                            <X v="while_stmt" c="41" />
                            <X v="do_stmt" c="42" />
                            <X v="for_stmt" c="43" />
                            <X v="p_define" c="44" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_include" uses="p_preproend,p_text" usedBy=",preprocedure,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="include" />
                <Terminating_Rule value="p_text" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="2" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_preproend" />
            <Uses_Terminated value="p_text" />
            <UsedBy_Terminated value="preprocedure" />
        </Properties>
        <Called>
            <T v="p_preproend" />
            <C v="p_text">
                <T v="endOfTextLine" c="3" />
            </C>
        </Called>
        <Caller>
            <C v="preprocedure">
                <C v="compound_statement" c="2">
                    <C v="methode_definition" c="12">
                        <C v="protected" c="15">
                            <X v="class_content" c="18" />
                        </C>
                        <C v="private" c="16">
                            <X v="class_content" c="19" />
                        </C>
                        <C v="public" c="17">
                            <X v="class_content" c="20" />
                        </C>
                    </C>
                    <C v="statement" c="13">
                        <X v="elif_part" c="21" />
                        <X v="else_part" c="22" />
                        <X v="p_Block" c="23" />
                        <X v="namespace" c="24" />
                        <X v="extern_compiled" c="25" />
                        <T v="pass" c="26" />
                        <X v="compound_statement" c="27" />
                        <X v="case_part" c="28" />
                        <X v="default_part" c="29" />
                        <X v="if_part" c="30" />
                        <X v="switch_stmt" c="31" />
                        <X v="while_stmt" c="32" />
                        <X v="do_stmt" c="33" />
                        <X v="for_stmt" c="34" />
                        <X v="p_define" c="35" />
                    </C>
                    <X v="function_definition" c="14" />
                </C>
                <X v="p_Block" c="3" />
                <X v="external_declaration" c="4" />
                <X v="public" c="5" />
                <X v="protected" c="6" />
                <X v="private" c="7" />
                <X v="namespace" c="8" />
                <X v="extern_compiled" c="9" />
                <T v="pass" c="10" />
                <X v="statement" c="11" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_line" uses="p_preproend,p_text" usedBy=",preprocedure,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="line" />
                <Terminating_Rule value="p_text" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="2" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_preproend" />
            <Uses_Terminated value="p_text" />
            <UsedBy_Terminated value="preprocedure" />
        </Properties>
        <Called>
            <T v="p_preproend" />
            <C v="p_text">
                <T v="endOfTextLine" c="3" />
            </C>
        </Called>
        <Caller>
            <C v="preprocedure">
                <C v="compound_statement" c="2">
                    <C v="methode_definition" c="12">
                        <C v="protected" c="15">
                            <X v="class_content" c="18" />
                        </C>
                        <C v="private" c="16">
                            <X v="class_content" c="19" />
                        </C>
                        <C v="public" c="17">
                            <X v="class_content" c="20" />
                        </C>
                    </C>
                    <C v="statement" c="13">
                        <X v="elif_part" c="21" />
                        <X v="else_part" c="22" />
                        <X v="p_Block" c="23" />
                        <X v="namespace" c="24" />
                        <X v="extern_compiled" c="25" />
                        <T v="pass" c="26" />
                        <X v="compound_statement" c="27" />
                        <X v="case_part" c="28" />
                        <X v="default_part" c="29" />
                        <X v="if_part" c="30" />
                        <X v="switch_stmt" c="31" />
                        <X v="while_stmt" c="32" />
                        <X v="do_stmt" c="33" />
                        <X v="for_stmt" c="34" />
                        <X v="p_define" c="35" />
                    </C>
                    <X v="function_definition" c="14" />
                </C>
                <X v="p_Block" c="3" />
                <X v="external_declaration" c="4" />
                <X v="public" c="5" />
                <X v="protected" c="6" />
                <X v="private" c="7" />
                <X v="namespace" c="8" />
                <X v="extern_compiled" c="9" />
                <T v="pass" c="10" />
                <X v="statement" c="11" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_pasting_literal" uses="" usedBy=",p_define,">
        <Expression>
            <Sequence>
                <Sub>
                    <ZeroOrMoreOf>
                        <Sub>
                            <Exclusion>
                                <First>
                                    <Primitive value="anychar_p" />
                                </First>
                                <Second>
                                    <Sub>
                                        <OrInclusive>
                                            <Primitive value="space_p" />
                                            <Character_Single value="\\" />
                                        </OrInclusive>
                                    </Sub>
                                </Second>
                            </Exclusion>
                        </Sub>
                    </ZeroOrMoreOf>
                </Sub>
                <ZeroOrMoreOf>
                    <Primitive value="space_p" />
                </ZeroOrMoreOf>
                <Character_Single value="#" />
                <Character_Single value="#" />
                <ZeroOrMoreOf>
                    <Primitive value="space_p" />
                </ZeroOrMoreOf>
                <Sub>
                    <Exclusion>
                        <First>
                            <Sub>
                                <ZeroOrMoreOf>
                                    <Sub>
                                        <Exclusion>
                                            <First>
                                                <Primitive value="anychar_p" />
                                            </First>
                                            <Second>
                                                <Sub>
                                                    <OrInclusive>
                                                        <Primitive value="space_p" />
                                                        <Character_Single value="\\" />
                                                    </OrInclusive>
                                                </Sub>
                                            </Second>
                                        </Exclusion>
                                    </Sub>
                                </ZeroOrMoreOf>
                            </Sub>
                        </First>
                        <Second>
                            <Sub>
                                <OrInclusive>
                                    <String value=";" />
                                    <String value="preproend" />
                                </OrInclusive>
                            </Sub>
                        </Second>
                    </Exclusion>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="p_define" />
        </Properties>
        <Called />
        <Caller>
            <C v="p_define">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_pragma" uses="p_preproend,p_text" usedBy=",preprocedure,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="pragma" />
                <Terminating_Rule value="p_text" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="2" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_preproend" />
            <Uses_Terminated value="p_text" />
            <UsedBy_Terminated value="preprocedure" />
        </Properties>
        <Called>
            <T v="p_preproend" />
            <C v="p_text">
                <T v="endOfTextLine" c="3" />
            </C>
        </Called>
        <Caller>
            <C v="preprocedure">
                <C v="compound_statement" c="2">
                    <C v="methode_definition" c="12">
                        <C v="protected" c="15">
                            <X v="class_content" c="18" />
                        </C>
                        <C v="private" c="16">
                            <X v="class_content" c="19" />
                        </C>
                        <C v="public" c="17">
                            <X v="class_content" c="20" />
                        </C>
                    </C>
                    <C v="statement" c="13">
                        <X v="elif_part" c="21" />
                        <X v="else_part" c="22" />
                        <X v="p_Block" c="23" />
                        <X v="namespace" c="24" />
                        <X v="extern_compiled" c="25" />
                        <T v="pass" c="26" />
                        <X v="compound_statement" c="27" />
                        <X v="case_part" c="28" />
                        <X v="default_part" c="29" />
                        <X v="if_part" c="30" />
                        <X v="switch_stmt" c="31" />
                        <X v="while_stmt" c="32" />
                        <X v="do_stmt" c="33" />
                        <X v="for_stmt" c="34" />
                        <X v="p_define" c="35" />
                    </C>
                    <X v="function_definition" c="14" />
                </C>
                <X v="p_Block" c="3" />
                <X v="external_declaration" c="4" />
                <X v="public" c="5" />
                <X v="protected" c="6" />
                <X v="private" c="7" />
                <X v="namespace" c="8" />
                <X v="extern_compiled" c="9" />
                <T v="pass" c="10" />
                <X v="statement" c="11" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_pragma" uses="p_pragma_asm,p_pragma_simple" usedBy=",preprocedure,">
        <Expression>
            <OrInclusive>
                <Terminating_Rule value="p_pragma_asm" />
                <Terminating_Rule value="p_pragma_simple" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="4" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_pragma_asm" />
            <Uses_Terminated value="p_pragma_simple" />
            <UsedBy_Terminated value="preprocedure" />
        </Properties>
        <Called>
            <C v="p_pragma_asm">
                <C v="p_pragma_asm_begin" c="3">
                    <T v="p_preproend" c="6" />
                </C>
                <C v="p_pragma_asm_content" c="4">
                    <C v="p_pragma_asm_end" c="7">
                        <R v="p_preproend" c="9" />
                    </C>
                    <T v="p_pragma_line" c="8" />
                </C>
                <R v="p_pragma_asm_end" c="5" />
            </C>
            <C v="p_pragma_simple">
                <T v="p_preproend" c="10" />
                <C v="p_text" c="11">
                    <T v="endOfTextLine" c="12" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="preprocedure">
                <C v="compound_statement" c="2">
                    <C v="methode_definition" c="12">
                        <C v="protected" c="15">
                            <X v="class_content" c="18" />
                        </C>
                        <C v="private" c="16">
                            <X v="class_content" c="19" />
                        </C>
                        <C v="public" c="17">
                            <X v="class_content" c="20" />
                        </C>
                    </C>
                    <C v="statement" c="13">
                        <X v="elif_part" c="21" />
                        <X v="else_part" c="22" />
                        <X v="p_Block" c="23" />
                        <X v="namespace" c="24" />
                        <X v="extern_compiled" c="25" />
                        <T v="pass" c="26" />
                        <X v="compound_statement" c="27" />
                        <X v="case_part" c="28" />
                        <X v="default_part" c="29" />
                        <X v="if_part" c="30" />
                        <X v="switch_stmt" c="31" />
                        <X v="while_stmt" c="32" />
                        <X v="do_stmt" c="33" />
                        <X v="for_stmt" c="34" />
                        <X v="p_define" c="35" />
                    </C>
                    <X v="function_definition" c="14" />
                </C>
                <X v="p_Block" c="3" />
                <X v="external_declaration" c="4" />
                <X v="public" c="5" />
                <X v="protected" c="6" />
                <X v="private" c="7" />
                <X v="namespace" c="8" />
                <X v="extern_compiled" c="9" />
                <T v="pass" c="10" />
                <X v="statement" c="11" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_pragma_asm" uses="p_pragma_asm_begin,p_pragma_asm_content,p_pragma_asm_end" usedBy=",p_pragma,">
        <Expression>
            <Sequence>
                <Terminating_Rule value="p_pragma_asm_begin" />
                <Terminating_Rule value="p_pragma_asm_content" />
                <Terminating_Rule value="p_pragma_asm_end" />
            </Sequence>
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_pragma_asm_begin" />
            <Uses_Terminated value="p_pragma_asm_content" />
            <Uses_Terminated value="p_pragma_asm_end" />
            <UsedBy_Terminated value="p_pragma" />
        </Properties>
        <Called>
            <C v="p_pragma_asm_begin">
                <T v="p_preproend" c="4" />
            </C>
            <C v="p_pragma_asm_content">
                <C v="p_pragma_asm_end" c="5">
                    <T v="p_preproend" c="7" />
                </C>
                <T v="p_pragma_line" c="6" />
            </C>
            <C v="p_pragma_asm_end" />
        </Called>
        <Caller>
            <C v="p_pragma">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_pragma_asm_begin" uses="p_preproend" usedBy=",p_pragma_asm,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="pragma" />
                <String value="asm" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="1" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_preproend" />
            <UsedBy_Terminated value="p_pragma_asm" />
        </Properties>
        <Called>
            <T v="p_preproend" />
        </Called>
        <Caller>
            <C v="p_pragma_asm">
                <C v="p_pragma" c="2">
                    <C v="preprocedure" c="3">
                        <C v="compound_statement" c="4">
                            <X v="methode_definition" c="14" />
                            <X v="statement" c="15" />
                            <X v="function_definition" c="16" />
                        </C>
                        <C v="p_Block" c="5">
                            <X v="p_ifndef" c="17" />
                            <X v="p_if" c="18" />
                            <X v="p_elif" c="19" />
                            <X v="p_else" c="20" />
                            <X v="p_ifdef" c="21" />
                        </C>
                        <C v="external_declaration" c="6">
                            <T v="translation_unit" c="22" />
                        </C>
                        <C v="public" c="7">
                            <X v="class_content" c="23" />
                        </C>
                        <C v="protected" c="8">
                            <X v="class_content" c="24" />
                        </C>
                        <C v="private" c="9">
                            <X v="class_content" c="25" />
                        </C>
                        <C v="namespace" c="10">
                            <T v="pass" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                        </C>
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="29" />
                        </C>
                        <T v="pass" c="12" />
                        <C v="statement" c="13">
                            <X v="elif_part" c="30" />
                            <X v="else_part" c="31" />
                            <X v="p_Block" c="32" />
                            <X v="namespace" c="33" />
                            <X v="extern_compiled" c="34" />
                            <T v="pass" c="35" />
                            <X v="compound_statement" c="36" />
                            <X v="case_part" c="37" />
                            <X v="default_part" c="38" />
                            <X v="if_part" c="39" />
                            <X v="switch_stmt" c="40" />
                            <X v="while_stmt" c="41" />
                            <X v="do_stmt" c="42" />
                            <X v="for_stmt" c="43" />
                            <X v="p_define" c="44" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_pragma_asm_content" uses="p_pragma_asm_end,p_pragma_line" usedBy=",p_pragma_asm,">
        <Expression>
            <ZeroOrMoreOf>
                <Sub>
                    <Exclusion>
                        <First>
                            <Terminating_Rule value="p_pragma_line" />
                        </First>
                        <Second>
                            <Terminating_Rule value="p_pragma_asm_end" />
                        </Second>
                    </Exclusion>
                </Sub>
            </ZeroOrMoreOf>
        </Expression>
        <Properties leafLevel="2" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_pragma_asm_end" />
            <Uses_Terminated value="p_pragma_line" />
            <UsedBy_Terminated value="p_pragma_asm" />
        </Properties>
        <Called>
            <C v="p_pragma_asm_end">
                <T v="p_preproend" c="3" />
            </C>
            <T v="p_pragma_line" />
        </Called>
        <Caller>
            <C v="p_pragma_asm">
                <C v="p_pragma" c="2">
                    <C v="preprocedure" c="3">
                        <C v="compound_statement" c="4">
                            <X v="methode_definition" c="14" />
                            <X v="statement" c="15" />
                            <X v="function_definition" c="16" />
                        </C>
                        <C v="p_Block" c="5">
                            <X v="p_ifndef" c="17" />
                            <X v="p_if" c="18" />
                            <X v="p_elif" c="19" />
                            <X v="p_else" c="20" />
                            <X v="p_ifdef" c="21" />
                        </C>
                        <C v="external_declaration" c="6">
                            <T v="translation_unit" c="22" />
                        </C>
                        <C v="public" c="7">
                            <X v="class_content" c="23" />
                        </C>
                        <C v="protected" c="8">
                            <X v="class_content" c="24" />
                        </C>
                        <C v="private" c="9">
                            <X v="class_content" c="25" />
                        </C>
                        <C v="namespace" c="10">
                            <T v="pass" c="26" />
                            <X v="namespace" c="27" />
                            <X v="extern_compiled" c="28" />
                        </C>
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="29" />
                        </C>
                        <T v="pass" c="12" />
                        <C v="statement" c="13">
                            <X v="elif_part" c="30" />
                            <X v="else_part" c="31" />
                            <X v="p_Block" c="32" />
                            <X v="namespace" c="33" />
                            <X v="extern_compiled" c="34" />
                            <T v="pass" c="35" />
                            <X v="compound_statement" c="36" />
                            <X v="case_part" c="37" />
                            <X v="default_part" c="38" />
                            <X v="if_part" c="39" />
                            <X v="switch_stmt" c="40" />
                            <X v="while_stmt" c="41" />
                            <X v="do_stmt" c="42" />
                            <X v="for_stmt" c="43" />
                            <X v="p_define" c="44" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_pragma_asm_end" uses="p_preproend" usedBy=",p_pragma_asm_content,p_pragma_asm,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="pragma" />
                <String value="endasm" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="1" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_preproend" />
            <UsedBy_Terminated value="p_pragma_asm_content" />
            <UsedBy_Terminated value="p_pragma_asm" />
        </Properties>
        <Called>
            <T v="p_preproend" />
        </Called>
        <Caller>
            <C v="p_pragma_asm_content">
                <C v="p_pragma_asm" c="3">
                    <C v="p_pragma" c="4">
                        <C v="preprocedure" c="5">
                            <X v="compound_statement" c="6" />
                            <X v="p_Block" c="7" />
                            <X v="external_declaration" c="8" />
                            <X v="public" c="9" />
                            <X v="protected" c="10" />
                            <X v="private" c="11" />
                            <X v="namespace" c="12" />
                            <X v="extern_compiled" c="13" />
                            <T v="pass" c="14" />
                            <X v="statement" c="15" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="p_pragma_asm" />
        </Caller>
    </Rule>
    <Rule value="p_pragma_line" uses="" usedBy=",p_pragma_asm_content,">
        <Expression>
            <OneOrMoreOf>
                <Sub>
                    <Exclusion>
                        <First>
                            <Primitive value="anychar_p" />
                        </First>
                        <Second>
                            <Sub>
                                <OrInclusive>
                                    <Character_Single value="\r" />
                                    <Character_Single value="\n" />
                                </OrInclusive>
                            </Sub>
                        </Second>
                    </Exclusion>
                </Sub>
            </OneOrMoreOf>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="p_pragma_asm_content" />
        </Properties>
        <Called />
        <Caller>
            <C v="p_pragma_asm_content">
                <C v="p_pragma_asm" c="2">
                    <C v="p_pragma" c="3">
                        <C v="preprocedure" c="4">
                            <X v="compound_statement" c="5" />
                            <X v="p_Block" c="6" />
                            <X v="external_declaration" c="7" />
                            <X v="public" c="8" />
                            <X v="protected" c="9" />
                            <X v="private" c="10" />
                            <X v="namespace" c="11" />
                            <X v="extern_compiled" c="12" />
                            <T v="pass" c="13" />
                            <X v="statement" c="14" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_pragma_simple" uses="p_preproend,p_text" usedBy=",p_pragma,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="pragma" />
                <Terminating_Rule value="p_text" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="2" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_preproend" />
            <Uses_Terminated value="p_text" />
            <UsedBy_Terminated value="p_pragma" />
        </Properties>
        <Called>
            <T v="p_preproend" />
            <C v="p_text">
                <T v="endOfTextLine" c="3" />
            </C>
        </Called>
        <Caller>
            <C v="p_pragma">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_preproend" uses="" usedBy=",p_endif,p_define,p_undefine,p_include,p_pragma,p_line,p_error,p_warning,p_pragma_simple,p_pragma_asm_begin,p_pragma_asm_end,">
        <Expression>
            <String value="#preproend" />
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="p_endif" />
            <UsedBy_Terminated value="p_define" />
            <UsedBy_Terminated value="p_undefine" />
            <UsedBy_Terminated value="p_include" />
            <UsedBy_Terminated value="p_pragma" />
            <UsedBy_Terminated value="p_line" />
            <UsedBy_Terminated value="p_error" />
            <UsedBy_Terminated value="p_warning" />
            <UsedBy_Terminated value="p_pragma_simple" />
            <UsedBy_Terminated value="p_pragma_asm_begin" />
            <UsedBy_Terminated value="p_pragma_asm_end" />
        </Properties>
        <Called />
        <Caller>
            <C v="p_endif">
                <C v="compilerSwitch" c="12">
                    <C v="preprocedure" c="13">
                        <C v="compound_statement" c="14">
                            <X v="methode_definition" c="24" />
                            <X v="statement" c="25" />
                            <X v="function_definition" c="26" />
                        </C>
                        <C v="p_Block" c="15">
                            <X v="p_ifndef" c="27" />
                            <X v="p_if" c="28" />
                            <X v="p_elif" c="29" />
                            <X v="p_else" c="30" />
                            <X v="p_ifdef" c="31" />
                        </C>
                        <X v="external_declaration" c="16" />
                        <X v="public" c="17" />
                        <X v="protected" c="18" />
                        <X v="private" c="19" />
                        <X v="namespace" c="20" />
                        <X v="extern_compiled" c="21" />
                        <T v="pass" c="22" />
                        <X v="statement" c="23" />
                    </C>
                </C>
            </C>
            <C v="p_define">
                <X v="preprocedure" c="32" />
            </C>
            <C v="p_undefine">
                <X v="preprocedure" c="33" />
            </C>
            <C v="p_include">
                <X v="preprocedure" c="34" />
            </C>
            <C v="p_pragma">
                <X v="preprocedure" c="35" />
            </C>
            <C v="p_line">
                <X v="preprocedure" c="36" />
            </C>
            <C v="p_error">
                <X v="preprocedure" c="37" />
            </C>
            <C v="p_warning">
                <X v="preprocedure" c="38" />
            </C>
            <C v="p_pragma_simple">
                <X v="p_pragma" c="39" />
            </C>
            <C v="p_pragma_asm_begin">
                <X v="p_pragma_asm" c="40" />
            </C>
            <C v="p_pragma_asm_end">
                <X v="p_pragma_asm_content" c="41" />
                <X v="p_pragma_asm" c="42" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_statement" uses="" usedBy="">
        <Expression>
            <Sequence>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Character_Single value="\\" />
                            <Primitive value="eol_p" />
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
                <Sub>
                    <Sequence>
                        <OneOrMoreOf>
                            <Sub>
                                <OrInclusive>
                                    <Sub>
                                        <Exclusion>
                                            <First>
                                                <Primitive value="anychar_p" />
                                            </First>
                                            <Second>
                                                <Sub>
                                                    <OrInclusive>
                                                        <Character_Single value="\\" />
                                                        <Character_Single value="\r" />
                                                        <Character_Single value="\n" />
                                                    </OrInclusive>
                                                </Sub>
                                            </Second>
                                        </Exclusion>
                                    </Sub>
                                    <Sub>
                                        <Sequence>
                                            <Character_Single value="\\" />
                                            <Sub>
                                                <Exclusion>
                                                    <First>
                                                        <Primitive value="anychar_p" />
                                                    </First>
                                                    <Second>
                                                        <Sub>
                                                            <OrInclusive>
                                                                <Character_Single value="\r" />
                                                                <Character_Single value="\n" />
                                                            </OrInclusive>
                                                        </Sub>
                                                    </Second>
                                                </Exclusion>
                                            </Sub>
                                        </Sequence>
                                    </Sub>
                                </OrInclusive>
                            </Sub>
                        </OneOrMoreOf>
                        <ZeroOrMoreOf>
                            <Sub>
                                <Sequence>
                                    <Sub>
                                        <Sequence>
                                            <Character_Single value="\\" />
                                            <Primitive value="eol_p" />
                                        </Sequence>
                                    </Sub>
                                    <ZeroOrMoreOf>
                                        <Sub>
                                            <OrInclusive>
                                                <Sub>
                                                    <Exclusion>
                                                        <First>
                                                            <Primitive value="anychar_p" />
                                                        </First>
                                                        <Second>
                                                            <Sub>
                                                                <OrInclusive>
                                                                    <Character_Single value="\\" />
                                                                    <Character_Single value="\r" />
                                                                    <Character_Single value="\n" />
                                                                </OrInclusive>
                                                            </Sub>
                                                        </Second>
                                                    </Exclusion>
                                                </Sub>
                                                <Sub>
                                                    <Sequence>
                                                        <Character_Single value="\\" />
                                                        <Sub>
                                                            <Exclusion>
                                                                <First>
                                                                    <Primitive value="anychar_p" />
                                                                </First>
                                                                <Second>
                                                                    <Sub>
                                                                        <OrInclusive>
                                                                            <Character_Single value="\r" />
                                                                            <Character_Single value="\n" />
                                                                        </OrInclusive>
                                                                    </Sub>
                                                                </Second>
                                                            </Exclusion>
                                                        </Sub>
                                                    </Sequence>
                                                </Sub>
                                            </OrInclusive>
                                        </Sub>
                                    </ZeroOrMoreOf>
                                </Sequence>
                            </Sub>
                        </ZeroOrMoreOf>
                        <Primitive value="eol_p" />
                    </Sequence>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="0" characterLevel="not phrased" />
        <Called />
        <Caller />
    </Rule>
    <Rule value="p_stringize_literal" uses="" usedBy=",p_define,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <ZeroOrMoreOf>
                    <Primitive value="space_p" />
                </ZeroOrMoreOf>
                <Sub>
                    <Exclusion>
                        <First>
                            <Sub>
                                <ZeroOrMoreOf>
                                    <Sub>
                                        <Exclusion>
                                            <First>
                                                <Primitive value="anychar_p" />
                                            </First>
                                            <Second>
                                                <Sub>
                                                    <OrInclusive>
                                                        <Primitive value="space_p" />
                                                        <Character_Single value="\\" />
                                                    </OrInclusive>
                                                </Sub>
                                            </Second>
                                        </Exclusion>
                                    </Sub>
                                </ZeroOrMoreOf>
                            </Sub>
                        </First>
                        <Second>
                            <Sub>
                                <OrInclusive>
                                    <String value=";" />
                                    <String value="preproend" />
                                </OrInclusive>
                            </Sub>
                        </Second>
                    </Exclusion>
                </Sub>
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="p_define" />
        </Properties>
        <Called />
        <Caller>
            <C v="p_define">
                <C v="preprocedure" c="2">
                    <C v="compound_statement" c="3">
                        <C v="methode_definition" c="13">
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="public" c="18" />
                        </C>
                        <C v="statement" c="14">
                            <X v="elif_part" c="19" />
                            <X v="else_part" c="20" />
                            <X v="p_Block" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                            <T v="pass" c="24" />
                            <X v="compound_statement" c="25" />
                            <X v="case_part" c="26" />
                            <X v="default_part" c="27" />
                            <X v="if_part" c="28" />
                            <X v="switch_stmt" c="29" />
                            <X v="while_stmt" c="30" />
                            <X v="do_stmt" c="31" />
                            <X v="for_stmt" c="32" />
                            <X v="p_define" c="33" />
                        </C>
                        <X v="function_definition" c="15" />
                    </C>
                    <X v="p_Block" c="4" />
                    <X v="external_declaration" c="5" />
                    <X v="public" c="6" />
                    <X v="protected" c="7" />
                    <X v="private" c="8" />
                    <X v="namespace" c="9" />
                    <X v="extern_compiled" c="10" />
                    <T v="pass" c="11" />
                    <X v="statement" c="12" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="p_text" uses="endOfTextLine" usedBy=",p_define,p_include,p_pragma,p_line,p_error,p_warning,p_Block,p_pragma_simple,">
        <Expression>
            <OneOrMoreOf>
                <Sub>
                    <Sequence>
                        <OneOrMoreOf>
                            <Sub>
                                <Exclusion>
                                    <First>
                                        <Primitive value="anychar_p" />
                                    </First>
                                    <Second>
                                        <Sub>
                                            <OrInclusive>
                                                <Character_Single value="\r" />
                                                <Character_Single value="\n" />
                                                <Character_Single value="#" />
                                            </OrInclusive>
                                        </Sub>
                                    </Second>
                                </Exclusion>
                            </Sub>
                        </OneOrMoreOf>
                        <ZeroOrOneOf>
                            <Terminating_Rule value="endOfTextLine" />
                        </ZeroOrOneOf>
                    </Sequence>
                </Sub>
            </OneOrMoreOf>
        </Expression>
        <Properties leafLevel="1" rootLevel="" characterLevel="not phrased">
            <Uses_Terminated value="endOfTextLine" />
            <UsedBy_Terminated value="p_define" />
            <UsedBy_Terminated value="p_include" />
            <UsedBy_Terminated value="p_pragma" />
            <UsedBy_Terminated value="p_line" />
            <UsedBy_Terminated value="p_error" />
            <UsedBy_Terminated value="p_warning" />
            <UsedBy_Terminated value="p_Block" />
            <UsedBy_Terminated value="p_pragma_simple" />
        </Properties>
        <Called>
            <T v="endOfTextLine" />
        </Called>
        <Caller>
            <C v="p_define">
                <C v="preprocedure" c="9">
                    <C v="compound_statement" c="10">
                        <C v="methode_definition" c="20">
                            <X v="protected" c="23" />
                            <X v="private" c="24" />
                            <X v="public" c="25" />
                        </C>
                        <C v="statement" c="21">
                            <X v="elif_part" c="26" />
                            <X v="else_part" c="27" />
                            <X v="p_Block" c="28" />
                            <X v="namespace" c="29" />
                            <X v="extern_compiled" c="30" />
                            <T v="pass" c="31" />
                            <X v="compound_statement" c="32" />
                            <X v="case_part" c="33" />
                            <X v="default_part" c="34" />
                            <X v="if_part" c="35" />
                            <X v="switch_stmt" c="36" />
                            <X v="while_stmt" c="37" />
                            <X v="do_stmt" c="38" />
                            <X v="for_stmt" c="39" />
                            <X v="p_define" c="40" />
                        </C>
                        <X v="function_definition" c="22" />
                    </C>
                    <X v="p_Block" c="11" />
                    <X v="external_declaration" c="12" />
                    <X v="public" c="13" />
                    <X v="protected" c="14" />
                    <X v="private" c="15" />
                    <X v="namespace" c="16" />
                    <X v="extern_compiled" c="17" />
                    <T v="pass" c="18" />
                    <X v="statement" c="19" />
                </C>
            </C>
            <C v="p_include">
                <X v="preprocedure" c="41" />
            </C>
            <C v="p_pragma">
                <X v="preprocedure" c="42" />
            </C>
            <C v="p_line">
                <X v="preprocedure" c="43" />
            </C>
            <C v="p_error">
                <X v="preprocedure" c="44" />
            </C>
            <C v="p_warning">
                <X v="preprocedure" c="45" />
            </C>
            <C v="p_Block">
                <X v="p_ifndef" c="46" />
                <X v="p_if" c="47" />
                <X v="p_elif" c="48" />
                <X v="p_else" c="49" />
                <X v="p_ifdef" c="50" />
            </C>
            <C v="p_pragma_simple">
                <X v="p_pragma" c="51" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_undefine" uses="ID,p_preproend" usedBy=",preprocedure,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="undef" />
                <Terminating_Rule value="ID" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="p_preproend" />
            <UsedBy_Terminated value="preprocedure" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <T v="p_preproend" />
        </Called>
        <Caller>
            <C v="preprocedure">
                <C v="compound_statement" c="2">
                    <C v="methode_definition" c="12">
                        <C v="protected" c="15">
                            <X v="class_content" c="18" />
                        </C>
                        <C v="private" c="16">
                            <X v="class_content" c="19" />
                        </C>
                        <C v="public" c="17">
                            <X v="class_content" c="20" />
                        </C>
                    </C>
                    <C v="statement" c="13">
                        <X v="elif_part" c="21" />
                        <X v="else_part" c="22" />
                        <X v="p_Block" c="23" />
                        <X v="namespace" c="24" />
                        <X v="extern_compiled" c="25" />
                        <T v="pass" c="26" />
                        <X v="compound_statement" c="27" />
                        <X v="case_part" c="28" />
                        <X v="default_part" c="29" />
                        <X v="if_part" c="30" />
                        <X v="switch_stmt" c="31" />
                        <X v="while_stmt" c="32" />
                        <X v="do_stmt" c="33" />
                        <X v="for_stmt" c="34" />
                        <X v="p_define" c="35" />
                    </C>
                    <X v="function_definition" c="14" />
                </C>
                <X v="p_Block" c="3" />
                <X v="external_declaration" c="4" />
                <X v="public" c="5" />
                <X v="protected" c="6" />
                <X v="private" c="7" />
                <X v="namespace" c="8" />
                <X v="extern_compiled" c="9" />
                <T v="pass" c="10" />
                <X v="statement" c="11" />
            </C>
        </Caller>
    </Rule>
    <Rule value="p_warning" uses="p_preproend,p_text" usedBy=",preprocedure,">
        <Expression>
            <Sequence>
                <Character_Single value="#" />
                <String value="warning" />
                <Terminating_Rule value="p_text" />
                <Terminating_Rule value="p_preproend" />
            </Sequence>
        </Expression>
        <Properties leafLevel="2" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_preproend" />
            <Uses_Terminated value="p_text" />
            <UsedBy_Terminated value="preprocedure" />
        </Properties>
        <Called>
            <T v="p_preproend" />
            <C v="p_text">
                <T v="endOfTextLine" c="3" />
            </C>
        </Called>
        <Caller>
            <C v="preprocedure">
                <C v="compound_statement" c="2">
                    <C v="methode_definition" c="12">
                        <C v="protected" c="15">
                            <X v="class_content" c="18" />
                        </C>
                        <C v="private" c="16">
                            <X v="class_content" c="19" />
                        </C>
                        <C v="public" c="17">
                            <X v="class_content" c="20" />
                        </C>
                    </C>
                    <C v="statement" c="13">
                        <X v="elif_part" c="21" />
                        <X v="else_part" c="22" />
                        <X v="p_Block" c="23" />
                        <X v="namespace" c="24" />
                        <X v="extern_compiled" c="25" />
                        <T v="pass" c="26" />
                        <X v="compound_statement" c="27" />
                        <X v="case_part" c="28" />
                        <X v="default_part" c="29" />
                        <X v="if_part" c="30" />
                        <X v="switch_stmt" c="31" />
                        <X v="while_stmt" c="32" />
                        <X v="do_stmt" c="33" />
                        <X v="for_stmt" c="34" />
                        <X v="p_define" c="35" />
                    </C>
                    <X v="function_definition" c="14" />
                </C>
                <X v="p_Block" c="3" />
                <X v="external_declaration" c="4" />
                <X v="public" c="5" />
                <X v="protected" c="6" />
                <X v="private" c="7" />
                <X v="namespace" c="8" />
                <X v="extern_compiled" c="9" />
                <T v="pass" c="10" />
                <X v="statement" c="11" />
            </C>
        </Caller>
    </Rule>
    <Rule value="parameter_declaration" uses="abstract_declarator,assignment_operator,cast_expression,declaration_specifier,declarator,parameter_function,unary_expression" usedBy=",parameter_list," recursiveUses="abstract_declarator" recursiveUsedBy="parameter_list">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Sub>
                            <Terminating_Rule value="declaration_specifier" />
                        </Sub>
                        <Terminating_Rule value="declarator" />
                        <ZeroOrOneOf>
                            <Sub>
                                <Sequence>
                                    <Terminating_Rule value="assignment_operator" />
                                    <Sub>
                                        <OrInclusive>
                                            <Terminating_Rule value="unary_expression" />
                                            <Terminating_Rule value="cast_expression" />
                                        </OrInclusive>
                                    </Sub>
                                </Sequence>
                            </Sub>
                        </ZeroOrOneOf>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Sub>
                            <Terminating_Rule value="declaration_specifier" />
                        </Sub>
                        <Recursive_Rule value="abstract_declarator" />
                        <ZeroOrOneOf>
                            <Sub>
                                <Sequence>
                                    <Terminating_Rule value="assignment_operator" />
                                    <Sub>
                                        <OrInclusive>
                                            <Terminating_Rule value="unary_expression" />
                                            <Terminating_Rule value="cast_expression" />
                                        </OrInclusive>
                                    </Sub>
                                </Sequence>
                            </Sub>
                        </ZeroOrOneOf>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Sub>
                            <Terminating_Rule value="declaration_specifier" />
                        </Sub>
                        <Terminating_Rule value="parameter_function" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sub>
                        <Terminating_Rule value="declaration_specifier" />
                    </Sub>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="assignment_operator" />
            <Uses_Terminated value="cast_expression" />
            <Uses_Terminated value="declaration_specifier" />
            <Uses_Terminated value="declarator" />
            <Uses_Terminated value="parameter_function" />
            <Uses_Terminated value="unary_expression" />
            <Uses_Recursive value="abstract_declarator" />
            <UsedBy_Recursive value="parameter_list" />
        </Properties>
        <Called>
            <T v="assignment_operator" />
            <C v="cast_expression">
                <R v="cast_expression" c="8" />
                <C v="type_name" c="9">
                    <C v="USER_TYPE" c="11">
                        <C v="ID" c="14">
                            <X v="NON_ID" c="15" />
                        </C>
                    </C>
                    <C v="abstract_declarator" c="12">
                        <C v="pointer" c="16">
                            <X v="type_qualifier_list" c="18" />
                            <X v="pointer" c="19" />
                        </C>
                        <C v="direct_abstract_declarator" c="17">
                            <X v="constant_expression" c="20" />
                            <X v="parameter_type_list" c="21" />
                            <X v="abstract_declarator" c="22" />
                        </C>
                    </C>
                    <C v="specifier_qualifier_list" c="13">
                        <R v="USER_TYPE" c="23" />
                        <T v="type_qualifier" c="24" />
                        <R v="specifier_qualifier_list" c="25" />
                        <C v="type_specifier" c="26">
                            <X v="struct_specifier" c="27" />
                            <X v="union_specifier" c="28" />
                            <X v="enum_specifier" c="29" />
                        </C>
                    </C>
                </C>
                <C v="unary_expression" c="10">
                    <X v="type_name" c="30" />
                    <T v="unary_operator" c="31" />
                    <X v="cast_expression" c="32" />
                    <X v="postfix_expression" c="33" />
                    <X v="unary_expression" c="34" />
                </C>
            </C>
            <C v="declaration_specifier">
                <X v="USER_TYPE" c="35" />
                <T v="storage_class_specifier" c="36" />
                <X v="template_type" c="37" />
                <T v="type_qualifier" c="38" />
                <X v="Owner" c="39" />
                <X v="type_specifier" c="40" />
            </C>
            <C v="declarator">
                <X v="pointer" c="41" />
                <X v="direct_declarator" c="42" />
                <X v="funcPoint_declarator" c="43" />
            </C>
            <C v="parameter_function">
                <X v="direct_parameter_declarator" c="44" />
            </C>
            <C v="unary_expression" />
            <C v="abstract_declarator" />
        </Called>
        <Caller>
            <C v="parameter_list">
                <C v="parameter_type_list" c="2">
                    <C v="direct_abstract_declarator" c="3">
                        <C v="abstract_declarator" c="5">
                            <X v="type_name" c="6" />
                            <X v="direct_abstract_declarator" c="7" />
                            <X v="parameter_declaration" c="8" />
                        </C>
                    </C>
                    <C v="direct_parameter_declarator" c="4">
                        <C v="parameter_function" c="9">
                            <X v="prototype_parameter" c="13" />
                            <X v="parameter_declaration" c="14" />
                        </C>
                        <C v="p_declarator" c="10">
                            <X v="p_define" c="15" />
                        </C>
                        <C v="destructor" c="11">
                            <X v="methode" c="16" />
                            <X v="methode_definition" c="17" />
                        </C>
                        <C v="direct_declarator_second" c="12">
                            <X v="direct_declarator" c="18" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="parameter_function" uses="direct_parameter_declarator" usedBy=",parameter_declaration,prototype_parameter," recursiveUses="direct_parameter_declarator" recursiveUsedBy="parameter_declaration">
        <Expression>
            <Sequence>
                <Recursive_Rule value="direct_parameter_declarator" />
                <Recursive_Rule value="direct_parameter_declarator" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="direct_parameter_declarator" />
            <UsedBy_Terminated value="prototype_parameter" />
            <UsedBy_Recursive value="parameter_declaration" />
        </Properties>
        <Called>
            <C v="direct_parameter_declarator">
                <C v="expression" c="2">
                    <C v="assignment_expression" c="6">
                        <T v="assignment_operator" c="7" />
                        <C v="conditional_expression" c="8">
                            <X v="logical_or_expression" c="12" />
                            <X v="conditional_expression" c="13" />
                            <X v="expression" c="14" />
                        </C>
                        <R v="assignment_expression" c="9" />
                        <C v="cast_expression" c="10">
                            <X v="cast_expression" c="15" />
                            <X v="type_name" c="16" />
                            <X v="unary_expression" c="17" />
                        </C>
                        <C v="unary_expression" c="11">
                            <X v="type_name" c="18" />
                            <T v="unary_operator" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="postfix_expression" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                    </C>
                </C>
                <C v="identifier_list" c="3">
                    <C v="ID" c="23">
                        <C v="NON_ID" c="24">
                            <T v="not_reseved" c="25" />
                            <T v="reserved" c="26" />
                        </C>
                    </C>
                </C>
                <C v="parameter_type_list" c="4">
                    <C v="parameter_list" c="27">
                        <C v="parameter_declaration" c="28">
                            <T v="assignment_operator" c="29" />
                            <X v="cast_expression" c="30" />
                            <X v="declaration_specifier" c="31" />
                            <X v="declarator" c="32" />
                            <X v="parameter_function" c="33" />
                            <X v="unary_expression" c="34" />
                            <X v="abstract_declarator" c="35" />
                        </C>
                    </C>
                </C>
                <X v="declarator" c="5" />
            </C>
        </Called>
        <Caller>
            <C v="prototype_parameter">
                <C v="prototype_parameter_list" c="3">
                    <C v="function_prototype" c="4">
                        <C v="p_Block" c="9">
                            <X v="p_ifndef" c="15" />
                            <X v="p_if" c="16" />
                            <X v="p_elif" c="17" />
                            <X v="p_else" c="18" />
                            <X v="p_ifdef" c="19" />
                        </C>
                        <C v="external_declaration" c="10">
                            <T v="translation_unit" c="20" />
                        </C>
                        <C v="friend" c="11">
                            <X v="public" c="21" />
                        </C>
                        <C v="namespace" c="12">
                            <T v="pass" c="22" />
                            <X v="namespace" c="23" />
                            <X v="extern_compiled" c="24" />
                        </C>
                        <C v="extern_compiled" c="13">
                            <X v="namespace" c="25" />
                        </C>
                        <T v="pass" c="14" />
                    </C>
                    <C v="operator" c="5">
                        <C v="methode" c="26">
                            <X v="public" c="28" />
                            <X v="protected" c="29" />
                            <X v="private" c="30" />
                            <X v="property" c="31" />
                        </C>
                        <X v="methode_definition" c="27" />
                    </C>
                    <X v="constructor" c="6" />
                    <X v="service" c="7" />
                    <X v="funcPoint_declarator" c="8" />
                </C>
            </C>
            <C v="parameter_declaration">
                <X v="parameter_list" c="32" />
            </C>
        </Caller>
    </Rule>
    <Rule value="parameter_list" uses="parameter_declaration" usedBy=",parameter_type_list," recursiveUses="parameter_declaration" recursiveUsedBy="parameter_type_list">
        <Expression>
            <Sequence>
                <Recursive_Rule value="parameter_declaration" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <String value="," />
                            <Recursive_Rule value="parameter_declaration" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="parameter_declaration" />
            <UsedBy_Recursive value="parameter_type_list" />
        </Properties>
        <Called>
            <C v="parameter_declaration">
                <T v="assignment_operator" c="2" />
                <C v="cast_expression" c="3">
                    <R v="cast_expression" c="9" />
                    <C v="type_name" c="10">
                        <C v="USER_TYPE" c="12">
                            <X v="ID" c="15" />
                        </C>
                        <C v="abstract_declarator" c="13">
                            <X v="pointer" c="16" />
                            <X v="direct_abstract_declarator" c="17" />
                        </C>
                        <C v="specifier_qualifier_list" c="14">
                            <X v="USER_TYPE" c="18" />
                            <T v="type_qualifier" c="19" />
                            <X v="specifier_qualifier_list" c="20" />
                            <X v="type_specifier" c="21" />
                        </C>
                    </C>
                    <C v="unary_expression" c="11">
                        <R v="type_name" c="22" />
                        <T v="unary_operator" c="23" />
                        <R v="cast_expression" c="24" />
                        <C v="postfix_expression" c="25">
                            <X v="primary_expression" c="27" />
                            <X v="postfix_expression_second" c="28" />
                        </C>
                        <R v="unary_expression" c="26" />
                    </C>
                </C>
                <C v="declaration_specifier" c="4">
                    <X v="USER_TYPE" c="29" />
                    <T v="storage_class_specifier" c="30" />
                    <X v="template_type" c="31" />
                    <T v="type_qualifier" c="32" />
                    <X v="Owner" c="33" />
                    <X v="type_specifier" c="34" />
                </C>
                <X v="declarator" c="5" />
                <X v="parameter_function" c="6" />
                <X v="unary_expression" c="7" />
                <X v="abstract_declarator" c="8" />
            </C>
        </Called>
        <Caller>
            <C v="parameter_type_list">
                <C v="direct_abstract_declarator" c="2">
                    <C v="abstract_declarator" c="4">
                        <C v="type_name" c="5">
                            <X v="cast_expression" c="8" />
                            <X v="unary_expression" c="9" />
                        </C>
                        <R v="direct_abstract_declarator" c="6" />
                        <C v="parameter_declaration" c="7">
                            <X v="parameter_list" c="10" />
                        </C>
                    </C>
                </C>
                <C v="direct_parameter_declarator" c="3">
                    <C v="parameter_function" c="11">
                        <C v="prototype_parameter" c="15">
                            <X v="prototype_parameter_list" c="17" />
                        </C>
                        <R v="parameter_declaration" c="16" />
                    </C>
                    <C v="p_declarator" c="12">
                        <C v="p_define" c="18">
                            <X v="preprocedure" c="19" />
                        </C>
                    </C>
                    <C v="destructor" c="13">
                        <C v="methode" c="20">
                            <X v="public" c="22" />
                            <X v="protected" c="23" />
                            <X v="private" c="24" />
                            <X v="property" c="25" />
                        </C>
                        <C v="methode_definition" c="21">
                            <X v="protected" c="26" />
                            <X v="private" c="27" />
                            <X v="public" c="28" />
                        </C>
                    </C>
                    <C v="direct_declarator_second" c="14">
                        <C v="direct_declarator" c="29">
                            <X v="funcPoint_declarator" c="30" />
                            <X v="declarator" c="31" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="parameter_type_list" uses="parameter_list" usedBy=",direct_parameter_declarator,direct_abstract_declarator," recursiveUses="parameter_list" recursiveUsedBy="direct_parameter_declarator">
        <Expression>
            <Sub>
                <Sequence>
                    <Recursive_Rule value="parameter_list" />
                    <ZeroOrOneOf>
                        <Sub>
                            <Sequence>
                                <String value="," />
                                <String value="..." />
                            </Sequence>
                        </Sub>
                    </ZeroOrOneOf>
                </Sequence>
            </Sub>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="parameter_list" />
            <UsedBy_Terminated value="direct_abstract_declarator" />
            <UsedBy_Recursive value="direct_parameter_declarator" />
        </Properties>
        <Called>
            <C v="parameter_list">
                <C v="parameter_declaration" c="2">
                    <T v="assignment_operator" c="3" />
                    <C v="cast_expression" c="4">
                        <R v="cast_expression" c="10" />
                        <C v="type_name" c="11">
                            <X v="USER_TYPE" c="13" />
                            <X v="abstract_declarator" c="14" />
                            <X v="specifier_qualifier_list" c="15" />
                        </C>
                        <C v="unary_expression" c="12">
                            <X v="type_name" c="16" />
                            <T v="unary_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="postfix_expression" c="19" />
                            <X v="unary_expression" c="20" />
                        </C>
                    </C>
                    <C v="declaration_specifier" c="5">
                        <C v="USER_TYPE" c="21">
                            <X v="ID" c="27" />
                        </C>
                        <T v="storage_class_specifier" c="22" />
                        <C v="template_type" c="23">
                            <X v="ID" c="28" />
                            <X v="declaration_specifier" c="29" />
                        </C>
                        <T v="type_qualifier" c="24" />
                        <C v="Owner" c="25">
                            <X v="ID" c="30" />
                            <X v="template_type" c="31" />
                            <X v="type_specifier" c="32" />
                        </C>
                        <X v="type_specifier" c="26" />
                    </C>
                    <X v="declarator" c="6" />
                    <X v="parameter_function" c="7" />
                    <X v="unary_expression" c="8" />
                    <X v="abstract_declarator" c="9" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="direct_abstract_declarator">
                <C v="abstract_declarator" c="3">
                    <C v="type_name" c="4">
                        <C v="cast_expression" c="7">
                            <X v="assignment_expression" c="9" />
                            <X v="parameter_declaration" c="10" />
                            <X v="unary_expression" c="11" />
                            <X v="cast_expression" c="12" />
                            <X v="multiplicative_expression" c="13" />
                        </C>
                        <C v="unary_expression" c="8">
                            <X v="element_initializer" c="14" />
                            <X v="unary_expression" c="15" />
                            <X v="cast_expression" c="16" />
                            <X v="assignment_expression" c="17" />
                            <X v="parameter_declaration" c="18" />
                        </C>
                    </C>
                    <R v="direct_abstract_declarator" c="5" />
                    <C v="parameter_declaration" c="6">
                        <C v="parameter_list" c="19">
                            <X v="parameter_type_list" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="direct_parameter_declarator">
                <C v="parameter_function" c="21">
                    <C v="prototype_parameter" c="25">
                        <C v="prototype_parameter_list" c="27">
                            <X v="function_prototype" c="28" />
                            <X v="operator" c="29" />
                            <X v="constructor" c="30" />
                            <X v="service" c="31" />
                            <X v="funcPoint_declarator" c="32" />
                        </C>
                    </C>
                    <X v="parameter_declaration" c="26" />
                </C>
                <X v="p_declarator" c="22" />
                <X v="destructor" c="23" />
                <X v="direct_declarator_second" c="24" />
            </C>
        </Caller>
    </Rule>
    <Rule value="pass" uses="class_definition,declaration,function_definition,function_prototype,namespace,preprocedure,statement,using_namespace" usedBy="">
        <Expression>
            <OneOrMoreOf>
                <Sub>
                    <OrInclusive>
                        <Terminating_Rule value="namespace" />
                        <Terminating_Rule value="using_namespace" />
                        <Terminating_Rule value="preprocedure" />
                        <Terminating_Rule value="class_definition" />
                        <Terminating_Rule value="function_prototype" />
                        <Terminating_Rule value="declaration" />
                        <Terminating_Rule value="function_definition" />
                        <Terminating_Rule value="statement" />
                    </OrInclusive>
                </Sub>
            </OneOrMoreOf>
        </Expression>
        <Properties leafLevel="" rootLevel="0" characterLevel="phrased">
            <Uses_Terminated value="class_definition" />
            <Uses_Terminated value="declaration" />
            <Uses_Terminated value="function_definition" />
            <Uses_Terminated value="function_prototype" />
            <Uses_Terminated value="namespace" />
            <Uses_Terminated value="preprocedure" />
            <Uses_Terminated value="statement" />
            <Uses_Terminated value="using_namespace" />
        </Properties>
        <Called>
            <C v="class_definition">
                <C v="ID" c="9">
                    <C v="NON_ID" c="13">
                        <T v="not_reseved" c="14" />
                        <T v="reserved" c="15" />
                    </C>
                </C>
                <C v="calss_parent" c="10">
                    <R v="ID" c="16" />
                    <C v="Owner" c="17">
                        <R v="ID" c="20" />
                        <C v="template_type" c="21">
                            <X v="ID" c="23" />
                            <X v="declaration_specifier" c="24" />
                        </C>
                        <C v="type_specifier" c="22">
                            <X v="struct_specifier" c="25" />
                            <X v="union_specifier" c="26" />
                            <X v="enum_specifier" c="27" />
                        </C>
                    </C>
                    <R v="template_type" c="18" />
                    <R v="type_specifier" c="19" />
                </C>
                <T v="semikolon" c="11" />
                <C v="class_content" c="12">
                    <X v="protected" c="28" />
                    <X v="public" c="29" />
                    <X v="private" c="30" />
                </C>
            </C>
            <C v="declaration">
                <X v="init_declarator" c="31" />
                <T v="semikolon" c="32" />
                <X v="declaration_specifier" c="33" />
            </C>
            <C v="function_definition">
                <X v="declaration" c="34" />
                <X v="declaration_specifier" c="35" />
                <X v="declarator" c="36" />
                <X v="element_initializer" c="37" />
                <X v="compound_statement" c="38" />
            </C>
            <C v="function_prototype">
                <X v="ID" c="39" />
                <X v="declaration_specifier" c="40" />
                <X v="prototype_parameter_list" c="41" />
                <T v="semikolon" c="42" />
                <T v="type_qualifier" c="43" />
            </C>
            <C v="namespace">
                <X v="ID" c="44" />
                <X v="class_definition" c="45" />
                <X v="declaration" c="46" />
                <X v="function_definition" c="47" />
                <X v="function_prototype" c="48" />
                <X v="preprocedure" c="49" />
                <T v="semikolon" c="50" />
                <X v="statement" c="51" />
                <X v="using_namespace" c="52" />
                <X v="extern_compiled" c="53" />
                <X v="namespace" c="54" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="55" />
                <X v="p_include" c="56" />
                <X v="p_line" c="57" />
                <X v="p_pragma" c="58" />
                <X v="p_undefine" c="59" />
                <X v="p_warning" c="60" />
                <X v="compilerSwitch" c="61" />
                <X v="p_define" c="62" />
            </C>
            <C v="statement">
                <X v="break_stmt" c="63" />
                <X v="continue_stmt" c="64" />
                <X v="expr_stmt" c="65" />
                <X v="goto_stmt" c="66" />
                <X v="lable_stmt" c="67" />
                <X v="preprocedure" c="68" />
                <X v="return_stmt" c="69" />
                <X v="case_stmt" c="70" />
                <X v="compound_statement" c="71" />
                <X v="default_stmt" c="72" />
                <X v="do_stmt" c="73" />
                <X v="for_stmt" c="74" />
                <X v="if_stmt" c="75" />
                <X v="switch_stmt" c="76" />
                <X v="while_stmt" c="77" />
            </C>
            <C v="using_namespace">
                <X v="ID" c="78" />
                <T v="semikolon" c="79" />
            </C>
        </Called>
        <Caller />
    </Rule>
    <Rule value="pointer" uses="pointer,type_qualifier_list" usedBy=",declarator,pointer,abstract_declarator,declarator_prp," recursiveUses="pointer" recursiveUsedBy="pointer">
        <Expression>
            <OrInclusive>
                <String value="*" />
                <Sub>
                    <Sequence>
                        <String value="*" />
                        <Recursive_Rule value="pointer" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="*" />
                        <Terminating_Rule value="type_qualifier_list" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="*" />
                        <Terminating_Rule value="type_qualifier_list" />
                        <Recursive_Rule value="pointer" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="type_qualifier_list" />
            <Uses_Recursive value="pointer" />
            <UsedBy_Terminated value="declarator" />
            <UsedBy_Terminated value="abstract_declarator" />
            <UsedBy_Terminated value="declarator_prp" />
            <UsedBy_Recursive value="pointer" />
        </Properties>
        <Called>
            <C v="type_qualifier_list">
                <T v="type_qualifier" c="3" />
            </C>
            <C v="pointer" />
        </Called>
        <Caller>
            <C v="declarator">
                <C v="struct_declarator" c="5">
                    <C v="struct_declarator_list" c="10">
                        <T v="struct_declaration" c="11" />
                    </C>
                </C>
                <C v="parameter_declaration" c="6">
                    <C v="parameter_list" c="12">
                        <C v="parameter_type_list" c="13">
                            <X v="direct_abstract_declarator" c="14" />
                            <X v="direct_parameter_declarator" c="15" />
                        </C>
                    </C>
                </C>
                <C v="function_definition" c="7">
                    <C v="external_declaration" c="16">
                        <T v="translation_unit" c="21" />
                    </C>
                    <C v="namespace" c="17">
                        <T v="pass" c="22" />
                        <R v="namespace" c="23" />
                        <C v="extern_compiled" c="24">
                            <X v="namespace" c="25" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="18" />
                    <R v="pass" c="19" />
                    <C v="p_Block" c="20">
                        <X v="p_ifndef" c="26" />
                        <X v="p_if" c="27" />
                        <X v="p_elif" c="28" />
                        <X v="p_else" c="29" />
                        <X v="p_ifdef" c="30" />
                    </C>
                </C>
                <X v="init_declarator" c="8" />
                <X v="direct_parameter_declarator" c="9" />
            </C>
            <C v="abstract_declarator">
                <X v="type_name" c="31" />
                <X v="direct_abstract_declarator" c="32" />
                <X v="parameter_declaration" c="33" />
            </C>
            <C v="declarator_prp">
                <X v="property_declarator" c="34" />
            </C>
            <C v="pointer" />
        </Caller>
    </Rule>
    <Rule value="postfix_expression" uses="postfix_expression_second,primary_expression" usedBy=",unary_expression," recursiveUses="postfix_expression_second" recursiveUsedBy="unary_expression">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="primary_expression" />
                        <OneOrMoreOf>
                            <Sub>
                                <Recursive_Rule value="postfix_expression_second" />
                            </Sub>
                        </OneOrMoreOf>
                    </Sequence>
                </Sub>
                <Terminating_Rule value="primary_expression" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="primary_expression" />
            <Uses_Recursive value="postfix_expression_second" />
            <UsedBy_Recursive value="unary_expression" />
        </Properties>
        <Called>
            <C v="primary_expression">
                <C v="ID" c="3">
                    <C v="NON_ID" c="11">
                        <T v="not_reseved" c="12" />
                        <T v="reserved" c="13" />
                    </C>
                </C>
                <C v="Number" c="4">
                    <T v="CONSTANT_CHAR" c="14" />
                    <T v="CONSTANT_FLT1" c="15" />
                    <T v="CONSTANT_FLT2" c="16" />
                    <T v="CONSTANT_FLT3" c="17" />
                    <T v="CONSTANT_HEX" c="18" />
                    <T v="CONSTANT_INT0" c="19" />
                    <T v="CONSTANT_INT1" c="20" />
                </C>
                <T v="String" c="5" />
                <C v="expression" c="6">
                    <C v="assignment_expression" c="21">
                        <T v="assignment_operator" c="22" />
                        <C v="conditional_expression" c="23">
                            <X v="logical_or_expression" c="27" />
                            <X v="conditional_expression" c="28" />
                            <X v="expression" c="29" />
                        </C>
                        <R v="assignment_expression" c="24" />
                        <C v="cast_expression" c="25">
                            <X v="cast_expression" c="30" />
                            <X v="type_name" c="31" />
                            <X v="unary_expression" c="32" />
                        </C>
                        <X v="unary_expression" c="26" />
                    </C>
                </C>
                <X v="p_defined" c="7" />
                <X v="template_type" c="8" />
                <X v="type_specifier" c="9" />
                <X v="Owner" c="10" />
            </C>
            <C v="postfix_expression_second">
                <X v="ID" c="33" />
                <X v="expression" c="34" />
                <X v="argument_expression_list" c="35" />
            </C>
        </Called>
        <Caller>
            <C v="unary_expression">
                <C v="element_initializer" c="2">
                    <C v="function_definition" c="7">
                        <C v="external_declaration" c="8">
                            <T v="translation_unit" c="13" />
                        </C>
                        <C v="namespace" c="9">
                            <T v="pass" c="14" />
                            <X v="namespace" c="15" />
                            <X v="extern_compiled" c="16" />
                        </C>
                        <C v="extern_compiled" c="10">
                            <X v="namespace" c="17" />
                        </C>
                        <T v="pass" c="11" />
                        <C v="p_Block" c="12">
                            <X v="p_ifndef" c="18" />
                            <X v="p_if" c="19" />
                            <X v="p_elif" c="20" />
                            <X v="p_else" c="21" />
                            <X v="p_ifdef" c="22" />
                        </C>
                    </C>
                </C>
                <R v="unary_expression" c="3" />
                <C v="cast_expression" c="4">
                    <C v="assignment_expression" c="23">
                        <X v="initializer" c="28" />
                        <X v="argument_expression_list" c="29" />
                        <X v="assignment_expression" c="30" />
                    </C>
                    <X v="parameter_declaration" c="24" />
                    <X v="unary_expression" c="25" />
                    <X v="cast_expression" c="26" />
                    <X v="multiplicative_expression" c="27" />
                </C>
                <X v="assignment_expression" c="5" />
                <X v="parameter_declaration" c="6" />
            </C>
        </Caller>
    </Rule>
    <Rule value="postfix_expression_second" uses="ID,argument_expression_list,expression" usedBy=",postfix_expression," recursiveUses="argument_expression_list" recursiveUsedBy="postfix_expression">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Sub>
                            <OrInclusive>
                                <String value="[" />
                                <String value="&lt;:" />
                            </OrInclusive>
                        </Sub>
                        <Terminating_Rule value="expression" />
                        <Sub>
                            <OrInclusive>
                                <String value="]" />
                                <String value=":&gt;" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <Recursive_Rule value="argument_expression_list" />
                        <String value=")" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <String value=")" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="." />
                        <Terminating_Rule value="ID" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="-&gt;" />
                        <Terminating_Rule value="ID" />
                    </Sequence>
                </Sub>
                <String value="++" />
                <String value="--" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="expression" />
            <Uses_Recursive value="argument_expression_list" />
            <UsedBy_Recursive value="postfix_expression" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="4">
                    <T v="not_reseved" c="5" />
                    <T v="reserved" c="6" />
                </C>
            </C>
            <C v="expression">
                <C v="assignment_expression" c="7">
                    <T v="assignment_operator" c="8" />
                    <C v="conditional_expression" c="9">
                        <C v="logical_or_expression" c="13">
                            <X v="logical_and_expression" c="16" />
                        </C>
                        <R v="conditional_expression" c="14" />
                        <R v="expression" c="15" />
                    </C>
                    <R v="assignment_expression" c="10" />
                    <C v="cast_expression" c="11">
                        <R v="cast_expression" c="17" />
                        <C v="type_name" c="18">
                            <X v="USER_TYPE" c="20" />
                            <X v="abstract_declarator" c="21" />
                            <X v="specifier_qualifier_list" c="22" />
                        </C>
                        <C v="unary_expression" c="19">
                            <X v="type_name" c="23" />
                            <T v="unary_operator" c="24" />
                            <X v="cast_expression" c="25" />
                            <X v="postfix_expression" c="26" />
                            <X v="unary_expression" c="27" />
                        </C>
                    </C>
                    <R v="unary_expression" c="12" />
                </C>
            </C>
            <C v="argument_expression_list">
                <C v="assignment_expression" c="28" />
            </C>
        </Called>
        <Caller>
            <C v="postfix_expression">
                <C v="unary_expression" c="2">
                    <C v="element_initializer" c="3">
                        <C v="function_definition" c="8">
                            <X v="external_declaration" c="9" />
                            <X v="namespace" c="10" />
                            <X v="extern_compiled" c="11" />
                            <T v="pass" c="12" />
                            <X v="p_Block" c="13" />
                        </C>
                    </C>
                    <R v="unary_expression" c="4" />
                    <C v="cast_expression" c="5">
                        <C v="assignment_expression" c="14">
                            <X v="initializer" c="19" />
                            <X v="argument_expression_list" c="20" />
                            <X v="assignment_expression" c="21" />
                        </C>
                        <C v="parameter_declaration" c="15">
                            <X v="parameter_list" c="22" />
                        </C>
                        <R v="unary_expression" c="16" />
                        <R v="cast_expression" c="17" />
                        <C v="multiplicative_expression" c="18">
                            <X v="additive_expression" c="23" />
                        </C>
                    </C>
                    <R v="assignment_expression" c="6" />
                    <R v="parameter_declaration" c="7" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="preprocedure" uses="compilerSwitch,p_define,p_error,p_include,p_line,p_pragma,p_undefine,p_warning" usedBy=",statement,compound_statement,p_Block,external_declaration,public,protected,private,namespace,extern_compiled,pass," recursiveUses="compilerSwitch,p_define" recursiveUsedBy="statement">
        <Expression>
            <Sub>
                <OrInclusive>
                    <Recursive_Rule value="compilerSwitch" />
                    <Terminating_Rule value="p_include" />
                    <Recursive_Rule value="p_define" />
                    <Terminating_Rule value="p_undefine" />
                    <Terminating_Rule value="p_pragma" />
                    <Terminating_Rule value="p_line" />
                    <Terminating_Rule value="p_error" />
                    <Terminating_Rule value="p_warning" />
                </OrInclusive>
            </Sub>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="p_error" />
            <Uses_Terminated value="p_include" />
            <Uses_Terminated value="p_line" />
            <Uses_Terminated value="p_pragma" />
            <Uses_Terminated value="p_undefine" />
            <Uses_Terminated value="p_warning" />
            <Uses_Recursive value="compilerSwitch" />
            <Uses_Recursive value="p_define" />
            <UsedBy_Terminated value="compound_statement" />
            <UsedBy_Terminated value="p_Block" />
            <UsedBy_Terminated value="external_declaration" />
            <UsedBy_Terminated value="public" />
            <UsedBy_Terminated value="protected" />
            <UsedBy_Terminated value="private" />
            <UsedBy_Terminated value="namespace" />
            <UsedBy_Terminated value="extern_compiled" />
            <UsedBy_Terminated value="pass" />
            <UsedBy_Recursive value="statement" />
        </Properties>
        <Called>
            <C v="p_error">
                <T v="p_preproend" c="9" />
                <C v="p_text" c="10">
                    <T v="endOfTextLine" c="11" />
                </C>
            </C>
            <C v="p_include">
                <T v="p_preproend" c="12" />
                <C v="p_text" c="13" />
            </C>
            <C v="p_line">
                <T v="p_preproend" c="14" />
                <C v="p_text" c="15" />
            </C>
            <C v="p_pragma">
                <C v="p_pragma_asm" c="16">
                    <C v="p_pragma_asm_begin" c="18">
                        <T v="p_preproend" c="21" />
                    </C>
                    <C v="p_pragma_asm_content" c="19">
                        <C v="p_pragma_asm_end" c="22">
                            <T v="p_preproend" c="24" />
                        </C>
                        <T v="p_pragma_line" c="23" />
                    </C>
                    <R v="p_pragma_asm_end" c="20" />
                </C>
                <C v="p_pragma_simple" c="17">
                    <R v="p_preproend" c="25" />
                    <C v="p_text" c="26" />
                </C>
            </C>
            <C v="p_undefine">
                <C v="ID" c="27">
                    <C v="NON_ID" c="29">
                        <T v="not_reseved" c="30" />
                        <T v="reserved" c="31" />
                    </C>
                </C>
                <T v="p_preproend" c="28" />
            </C>
            <C v="p_warning">
                <T v="p_preproend" c="32" />
                <X v="p_text" c="33" />
            </C>
            <C v="compilerSwitch">
                <X v="p_else" c="34" />
                <X v="p_endif" c="35" />
                <X v="p_if" c="36" />
                <X v="p_ifdef" c="37" />
                <X v="p_ifndef" c="38" />
                <X v="p_elif" c="39" />
            </C>
            <C v="p_define">
                <X v="expression" c="40" />
                <X v="p_declarator" c="41" />
                <T v="p_pasting_literal" c="42" />
                <T v="p_preproend" c="43" />
                <T v="p_stringize_literal" c="44" />
                <X v="p_text" c="45" />
                <T v="semikolon" c="46" />
                <X v="statement" c="47" />
            </C>
        </Called>
        <Caller>
            <C v="compound_statement">
                <C v="methode_definition" c="11">
                    <C v="protected" c="14">
                        <C v="class_content" c="17">
                            <X v="class_definition" c="18" />
                        </C>
                    </C>
                    <C v="private" c="15">
                        <R v="class_content" c="19" />
                    </C>
                    <C v="public" c="16">
                        <R v="class_content" c="20" />
                    </C>
                </C>
                <C v="statement" c="12">
                    <X v="elif_part" c="21" />
                    <X v="else_part" c="22" />
                    <X v="p_Block" c="23" />
                    <X v="namespace" c="24" />
                    <X v="extern_compiled" c="25" />
                    <T v="pass" c="26" />
                    <X v="compound_statement" c="27" />
                    <X v="case_part" c="28" />
                    <X v="default_part" c="29" />
                    <X v="if_part" c="30" />
                    <X v="switch_stmt" c="31" />
                    <X v="while_stmt" c="32" />
                    <X v="do_stmt" c="33" />
                    <X v="for_stmt" c="34" />
                    <X v="p_define" c="35" />
                </C>
                <X v="function_definition" c="13" />
            </C>
            <C v="p_Block">
                <X v="p_ifndef" c="36" />
                <X v="p_if" c="37" />
                <X v="p_elif" c="38" />
                <X v="p_else" c="39" />
                <X v="p_ifdef" c="40" />
            </C>
            <C v="external_declaration">
                <T v="translation_unit" c="41" />
            </C>
            <C v="public" />
            <C v="protected" />
            <C v="private" />
            <C v="namespace">
                <T v="pass" c="42" />
                <X v="namespace" c="43" />
                <X v="extern_compiled" c="44" />
            </C>
            <C v="extern_compiled">
                <X v="namespace" c="45" />
            </C>
            <T v="pass" />
            <C v="statement" />
        </Caller>
    </Rule>
    <Rule value="primary_expression" uses="ID,Number,String,expression,p_defined,type_specifier" usedBy=",postfix_expression," recursiveUses="Owner" recursiveUsedBy="postfix_expression">
        <Expression>
            <OrInclusive>
                <Terminating_Rule value="p_defined" />
                <Terminating_Rule value="ID" />
                <Terminating_Rule value="Number" />
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="String" />
                        <ZeroOrMoreOf>
                            <Terminating_Rule value="String" />
                        </ZeroOrMoreOf>
                    </Sequence>
                </Sub>
                <Terminating_Rule value="type_specifier" />
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <Terminating_Rule value="expression" />
                        <String value=")" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="Number" />
            <Uses_Terminated value="String" />
            <Uses_Terminated value="expression" />
            <Uses_Terminated value="p_defined" />
            <Uses_Terminated value="type_specifier" />
            <Uses_Recursive value="Owner" />
            <UsedBy_Recursive value="postfix_expression" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="8">
                    <T v="not_reseved" c="9" />
                    <T v="reserved" c="10" />
                </C>
            </C>
            <C v="Number">
                <T v="CONSTANT_CHAR" c="11" />
                <T v="CONSTANT_FLT1" c="12" />
                <T v="CONSTANT_FLT2" c="13" />
                <T v="CONSTANT_FLT3" c="14" />
                <T v="CONSTANT_HEX" c="15" />
                <T v="CONSTANT_INT0" c="16" />
                <T v="CONSTANT_INT1" c="17" />
            </C>
            <T v="String" />
            <C v="expression">
                <C v="assignment_expression" c="18">
                    <T v="assignment_operator" c="19" />
                    <C v="conditional_expression" c="20">
                        <C v="logical_or_expression" c="24">
                            <X v="logical_and_expression" c="27" />
                        </C>
                        <R v="conditional_expression" c="25" />
                        <R v="expression" c="26" />
                    </C>
                    <R v="assignment_expression" c="21" />
                    <C v="cast_expression" c="22">
                        <X v="cast_expression" c="28" />
                        <X v="type_name" c="29" />
                        <X v="unary_expression" c="30" />
                    </C>
                    <X v="unary_expression" c="23" />
                </C>
            </C>
            <C v="p_defined">
                <X v="ID" c="31" />
            </C>
            <C v="type_specifier">
                <X v="struct_specifier" c="32" />
                <X v="union_specifier" c="33" />
                <X v="enum_specifier" c="34" />
            </C>
            <C v="Owner">
                <X v="ID" c="35" />
                <X v="template_type" c="36" />
                <X v="type_specifier" c="37" />
            </C>
        </Called>
        <Caller>
            <C v="postfix_expression">
                <C v="unary_expression" c="2">
                    <C v="element_initializer" c="3">
                        <C v="function_definition" c="8">
                            <X v="external_declaration" c="9" />
                            <X v="namespace" c="10" />
                            <X v="extern_compiled" c="11" />
                            <T v="pass" c="12" />
                            <X v="p_Block" c="13" />
                        </C>
                    </C>
                    <R v="unary_expression" c="4" />
                    <C v="cast_expression" c="5">
                        <C v="assignment_expression" c="14">
                            <X v="initializer" c="19" />
                            <X v="argument_expression_list" c="20" />
                            <X v="assignment_expression" c="21" />
                        </C>
                        <C v="parameter_declaration" c="15">
                            <X v="parameter_list" c="22" />
                        </C>
                        <R v="unary_expression" c="16" />
                        <R v="cast_expression" c="17" />
                        <C v="multiplicative_expression" c="18">
                            <X v="additive_expression" c="23" />
                        </C>
                    </C>
                    <R v="assignment_expression" c="6" />
                    <R v="parameter_declaration" c="7" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="primary_expression" uses="ID,Number,Owner,String,expression,p_defined,template_type,type_specifier" usedBy=",postfix_expression," recursiveUses="Owner" recursiveUsedBy="postfix_expression">
        <Expression>
            <OrInclusive>
                <Terminating_Rule value="p_defined" />
                <Terminating_Rule value="template_type" />
                <Sub>
                    <Sequence>
                        <ZeroOrMoreOf>
                            <Sub>
                                <Sequence>
                                    <Recursive_Rule value="Owner" />
                                    <Character_Single value=":" />
                                    <Character_Single value=":" />
                                </Sequence>
                            </Sub>
                        </ZeroOrMoreOf>
                        <Terminating_Rule value="ID" />
                    </Sequence>
                </Sub>
                <Terminating_Rule value="Number" />
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="String" />
                        <ZeroOrMoreOf>
                            <Terminating_Rule value="String" />
                        </ZeroOrMoreOf>
                    </Sequence>
                </Sub>
                <Terminating_Rule value="type_specifier" />
                <Sub>
                    <Sequence>
                        <String value="(" />
                        <Terminating_Rule value="expression" />
                        <String value=")" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="Number" />
            <Uses_Terminated value="String" />
            <Uses_Terminated value="expression" />
            <Uses_Terminated value="p_defined" />
            <Uses_Terminated value="template_type" />
            <Uses_Terminated value="type_specifier" />
            <Uses_Recursive value="Owner" />
            <UsedBy_Recursive value="postfix_expression" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="9">
                    <T v="not_reseved" c="10" />
                    <T v="reserved" c="11" />
                </C>
            </C>
            <C v="Number">
                <T v="CONSTANT_CHAR" c="12" />
                <T v="CONSTANT_FLT1" c="13" />
                <T v="CONSTANT_FLT2" c="14" />
                <T v="CONSTANT_FLT3" c="15" />
                <T v="CONSTANT_HEX" c="16" />
                <T v="CONSTANT_INT0" c="17" />
                <T v="CONSTANT_INT1" c="18" />
            </C>
            <T v="String" />
            <C v="expression">
                <C v="assignment_expression" c="19">
                    <T v="assignment_operator" c="20" />
                    <C v="conditional_expression" c="21">
                        <C v="logical_or_expression" c="25">
                            <X v="logical_and_expression" c="28" />
                        </C>
                        <R v="conditional_expression" c="26" />
                        <R v="expression" c="27" />
                    </C>
                    <R v="assignment_expression" c="22" />
                    <C v="cast_expression" c="23">
                        <X v="cast_expression" c="29" />
                        <X v="type_name" c="30" />
                        <X v="unary_expression" c="31" />
                    </C>
                    <X v="unary_expression" c="24" />
                </C>
            </C>
            <C v="p_defined">
                <X v="ID" c="32" />
            </C>
            <C v="template_type">
                <X v="ID" c="33" />
                <X v="declaration_specifier" c="34" />
            </C>
            <C v="type_specifier">
                <X v="struct_specifier" c="35" />
                <X v="union_specifier" c="36" />
                <X v="enum_specifier" c="37" />
            </C>
            <C v="Owner">
                <X v="ID" c="38" />
                <X v="template_type" c="39" />
                <X v="type_specifier" c="40" />
            </C>
        </Called>
        <Caller>
            <C v="postfix_expression">
                <C v="unary_expression" c="2">
                    <C v="element_initializer" c="3">
                        <C v="function_definition" c="8">
                            <X v="external_declaration" c="9" />
                            <X v="namespace" c="10" />
                            <X v="extern_compiled" c="11" />
                            <T v="pass" c="12" />
                            <X v="p_Block" c="13" />
                        </C>
                    </C>
                    <R v="unary_expression" c="4" />
                    <C v="cast_expression" c="5">
                        <C v="assignment_expression" c="14">
                            <X v="initializer" c="19" />
                            <X v="argument_expression_list" c="20" />
                            <X v="assignment_expression" c="21" />
                        </C>
                        <C v="parameter_declaration" c="15">
                            <X v="parameter_list" c="22" />
                        </C>
                        <R v="unary_expression" c="16" />
                        <R v="cast_expression" c="17" />
                        <C v="multiplicative_expression" c="18">
                            <X v="additive_expression" c="23" />
                        </C>
                    </C>
                    <R v="assignment_expression" c="6" />
                    <R v="parameter_declaration" c="7" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="private" uses="methode,methode_definition,preprocedure,property" usedBy=",class_content," recursiveUses="methode_definition" recursiveUsedBy="class_content">
        <Expression>
            <Sequence>
                <String value="private" />
                <Character_Single value=":" />
                <ZeroOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Recursive_Rule value="methode_definition" />
                            <Terminating_Rule value="methode" />
                            <Terminating_Rule value="property" />
                            <Terminating_Rule value="preprocedure" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="methode" />
            <Uses_Terminated value="preprocedure" />
            <Uses_Terminated value="property" />
            <Uses_Recursive value="methode_definition" />
            <UsedBy_Recursive value="class_content" />
        </Properties>
        <Called>
            <C v="methode">
                <C v="constructor" c="5">
                    <C v="ID" c="10">
                        <C v="NON_ID" c="13">
                            <T v="not_reseved" c="14" />
                            <T v="reserved" c="15" />
                        </C>
                    </C>
                    <C v="prototype_parameter_list" c="11">
                        <C v="prototype_parameter" c="16">
                            <X v="init_declarator" c="17" />
                            <X v="parameter_function" c="18" />
                            <X v="declaration_specifier" c="19" />
                        </C>
                    </C>
                    <T v="type_qualifier" c="12" />
                </C>
                <C v="destructor" c="6">
                    <R v="ID" c="20" />
                    <C v="direct_parameter_declarator" c="21">
                        <C v="expression" c="23">
                            <X v="assignment_expression" c="27" />
                        </C>
                        <C v="identifier_list" c="24">
                            <X v="ID" c="28" />
                        </C>
                        <C v="parameter_type_list" c="25">
                            <X v="parameter_list" c="29" />
                        </C>
                        <C v="declarator" c="26">
                            <X v="pointer" c="30" />
                            <X v="direct_declarator" c="31" />
                            <X v="funcPoint_declarator" c="32" />
                        </C>
                    </C>
                    <T v="type_qualifier" c="22" />
                </C>
                <X v="operator" c="7" />
                <T v="semikolon" c="8" />
                <X v="service" c="9" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="33" />
                <X v="p_include" c="34" />
                <X v="p_line" c="35" />
                <X v="p_pragma" c="36" />
                <X v="p_undefine" c="37" />
                <X v="p_warning" c="38" />
                <X v="compilerSwitch" c="39" />
                <X v="p_define" c="40" />
            </C>
            <C v="property">
                <X v="declaration_specifier" c="41" />
                <X v="enum_specifier" c="42" />
                <X v="methode" c="43" />
                <X v="property_declarator" c="44" />
                <T v="semikolon" c="45" />
            </C>
            <C v="methode_definition">
                <X v="constructor" c="46" />
                <X v="destructor" c="47" />
                <X v="expression" c="48" />
                <X v="operator" c="49" />
                <T v="semikolon" c="50" />
                <X v="service" c="51" />
                <X v="compound_statement" c="52" />
            </C>
        </Called>
        <Caller>
            <C v="class_content">
                <C v="class_definition" c="2">
                    <C v="external_declaration" c="3">
                        <T v="translation_unit" c="8" />
                    </C>
                    <C v="namespace" c="4">
                        <T v="pass" c="9" />
                        <R v="namespace" c="10" />
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="12" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="5" />
                    <R v="pass" c="6" />
                    <C v="p_Block" c="7">
                        <C v="p_ifndef" c="13">
                            <X v="compilerSwitch" c="18" />
                        </C>
                        <C v="p_if" c="14">
                            <X v="compilerSwitch" c="19" />
                        </C>
                        <C v="p_elif" c="15">
                            <X v="compilerSwitch" c="20" />
                        </C>
                        <C v="p_else" c="16">
                            <X v="compilerSwitch" c="21" />
                        </C>
                        <C v="p_ifdef" c="17">
                            <X v="compilerSwitch" c="22" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="property" uses="declaration_specifier,enum_specifier,methode,property_declarator,semikolon" usedBy=",public,protected,private,">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Exclusion>
                        <First>
                            <Sub>
                                <Sequence>
                                    <Terminating_Rule value="declaration_specifier" />
                                    <Terminating_Rule value="property_declarator" />
                                    <ZeroOrMoreOf>
                                        <Sub>
                                            <Sequence>
                                                <Sub>
                                                    <String value="," />
                                                </Sub>
                                                <Terminating_Rule value="property_declarator" />
                                            </Sequence>
                                        </Sub>
                                    </ZeroOrMoreOf>
                                    <Terminating_Rule value="semikolon" />
                                </Sequence>
                            </Sub>
                        </First>
                        <Second>
                            <Terminating_Rule value="methode" />
                        </Second>
                    </Exclusion>
                </Sub>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="enum_specifier" />
                        <Terminating_Rule value="semikolon" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="declaration_specifier" />
            <Uses_Terminated value="enum_specifier" />
            <Uses_Terminated value="methode" />
            <Uses_Terminated value="property_declarator" />
            <Uses_Terminated value="semikolon" />
            <UsedBy_Terminated value="public" />
            <UsedBy_Terminated value="protected" />
            <UsedBy_Terminated value="private" />
        </Properties>
        <Called>
            <C v="declaration_specifier">
                <C v="USER_TYPE" c="6">
                    <C v="ID" c="12">
                        <C v="NON_ID" c="13">
                            <T v="not_reseved" c="14" />
                            <T v="reserved" c="15" />
                        </C>
                    </C>
                </C>
                <T v="storage_class_specifier" c="7" />
                <C v="template_type" c="8">
                    <R v="ID" c="16" />
                    <R v="declaration_specifier" c="17" />
                </C>
                <T v="type_qualifier" c="9" />
                <C v="Owner" c="10">
                    <R v="ID" c="18" />
                    <R v="template_type" c="19" />
                    <C v="type_specifier" c="20">
                        <C v="struct_specifier" c="21">
                            <X v="ID" c="24" />
                            <X v="declaration" c="25" />
                        </C>
                        <C v="union_specifier" c="22">
                            <X v="ID" c="26" />
                            <X v="declaration" c="27" />
                        </C>
                        <C v="enum_specifier" c="23">
                            <X v="ID" c="28" />
                            <X v="enumerator" c="29" />
                        </C>
                    </C>
                </C>
                <R v="type_specifier" c="11" />
            </C>
            <C v="enum_specifier" />
            <C v="methode">
                <X v="constructor" c="30" />
                <X v="destructor" c="31" />
                <X v="operator" c="32" />
                <T v="semikolon" c="33" />
                <X v="service" c="34" />
            </C>
            <C v="property_declarator">
                <X v="constant_expression" c="35" />
                <X v="declarator_prp" c="36" />
            </C>
            <T v="semikolon" />
        </Called>
        <Caller>
            <C v="public">
                <C v="class_content" c="4">
                    <C v="class_definition" c="5">
                        <C v="external_declaration" c="6">
                            <T v="translation_unit" c="11" />
                        </C>
                        <C v="namespace" c="7">
                            <T v="pass" c="12" />
                            <X v="namespace" c="13" />
                            <X v="extern_compiled" c="14" />
                        </C>
                        <C v="extern_compiled" c="8">
                            <X v="namespace" c="15" />
                        </C>
                        <T v="pass" c="9" />
                        <C v="p_Block" c="10">
                            <X v="p_ifndef" c="16" />
                            <X v="p_if" c="17" />
                            <X v="p_elif" c="18" />
                            <X v="p_else" c="19" />
                            <X v="p_ifdef" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="protected">
                <C v="class_content" c="21" />
            </C>
            <C v="private">
                <C v="class_content" c="22" />
            </C>
        </Caller>
    </Rule>
    <Rule value="property_declarator" uses="constant_expression,declarator_prp" usedBy=",property,">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <String value=":" />
                        <Terminating_Rule value="constant_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="declarator_prp" />
                        <String value=":" />
                        <Terminating_Rule value="constant_expression" />
                    </Sequence>
                </Sub>
                <Terminating_Rule value="declarator_prp" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="constant_expression" />
            <Uses_Terminated value="declarator_prp" />
            <UsedBy_Terminated value="property" />
        </Properties>
        <Called>
            <C v="constant_expression">
                <C v="conditional_expression" c="3">
                    <C v="logical_or_expression" c="4">
                        <C v="logical_and_expression" c="7">
                            <X v="inclusive_or_expression" c="8" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="5" />
                    <C v="expression" c="6">
                        <C v="assignment_expression" c="9">
                            <T v="assignment_operator" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="assignment_expression" c="12" />
                            <X v="cast_expression" c="13" />
                            <X v="unary_expression" c="14" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="declarator_prp">
                <C v="ID" c="15">
                    <C v="NON_ID" c="19">
                        <T v="not_reseved" c="20" />
                        <T v="reserved" c="21" />
                    </C>
                </C>
                <C v="Owner" c="16">
                    <R v="ID" c="22" />
                    <C v="template_type" c="23">
                        <R v="ID" c="25" />
                        <C v="declaration_specifier" c="26">
                            <X v="USER_TYPE" c="27" />
                            <T v="storage_class_specifier" c="28" />
                            <X v="template_type" c="29" />
                            <T v="type_qualifier" c="30" />
                            <X v="Owner" c="31" />
                            <X v="type_specifier" c="32" />
                        </C>
                    </C>
                    <X v="type_specifier" c="24" />
                </C>
                <X v="constant_expression" c="17" />
                <X v="pointer" c="18" />
            </C>
        </Called>
        <Caller>
            <C v="property">
                <C v="public" c="2">
                    <C v="class_content" c="5">
                        <C v="class_definition" c="6">
                            <X v="external_declaration" c="7" />
                            <X v="namespace" c="8" />
                            <X v="extern_compiled" c="9" />
                            <T v="pass" c="10" />
                            <X v="p_Block" c="11" />
                        </C>
                    </C>
                </C>
                <C v="protected" c="3">
                    <R v="class_content" c="12" />
                </C>
                <C v="private" c="4">
                    <R v="class_content" c="13" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="protected" uses="methode,methode_definition,preprocedure,property" usedBy=",class_content," recursiveUses="methode_definition" recursiveUsedBy="class_content">
        <Expression>
            <Sequence>
                <String value="protected" />
                <Character_Single value=":" />
                <ZeroOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Recursive_Rule value="methode_definition" />
                            <Terminating_Rule value="methode" />
                            <Terminating_Rule value="property" />
                            <Terminating_Rule value="preprocedure" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="methode" />
            <Uses_Terminated value="preprocedure" />
            <Uses_Terminated value="property" />
            <Uses_Recursive value="methode_definition" />
            <UsedBy_Recursive value="class_content" />
        </Properties>
        <Called>
            <C v="methode">
                <C v="constructor" c="5">
                    <C v="ID" c="10">
                        <C v="NON_ID" c="13">
                            <T v="not_reseved" c="14" />
                            <T v="reserved" c="15" />
                        </C>
                    </C>
                    <C v="prototype_parameter_list" c="11">
                        <C v="prototype_parameter" c="16">
                            <X v="init_declarator" c="17" />
                            <X v="parameter_function" c="18" />
                            <X v="declaration_specifier" c="19" />
                        </C>
                    </C>
                    <T v="type_qualifier" c="12" />
                </C>
                <C v="destructor" c="6">
                    <R v="ID" c="20" />
                    <C v="direct_parameter_declarator" c="21">
                        <C v="expression" c="23">
                            <X v="assignment_expression" c="27" />
                        </C>
                        <C v="identifier_list" c="24">
                            <X v="ID" c="28" />
                        </C>
                        <C v="parameter_type_list" c="25">
                            <X v="parameter_list" c="29" />
                        </C>
                        <C v="declarator" c="26">
                            <X v="pointer" c="30" />
                            <X v="direct_declarator" c="31" />
                            <X v="funcPoint_declarator" c="32" />
                        </C>
                    </C>
                    <T v="type_qualifier" c="22" />
                </C>
                <X v="operator" c="7" />
                <T v="semikolon" c="8" />
                <X v="service" c="9" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="33" />
                <X v="p_include" c="34" />
                <X v="p_line" c="35" />
                <X v="p_pragma" c="36" />
                <X v="p_undefine" c="37" />
                <X v="p_warning" c="38" />
                <X v="compilerSwitch" c="39" />
                <X v="p_define" c="40" />
            </C>
            <C v="property">
                <X v="declaration_specifier" c="41" />
                <X v="enum_specifier" c="42" />
                <X v="methode" c="43" />
                <X v="property_declarator" c="44" />
                <T v="semikolon" c="45" />
            </C>
            <C v="methode_definition">
                <X v="constructor" c="46" />
                <X v="destructor" c="47" />
                <X v="expression" c="48" />
                <X v="operator" c="49" />
                <T v="semikolon" c="50" />
                <X v="service" c="51" />
                <X v="compound_statement" c="52" />
            </C>
        </Called>
        <Caller>
            <C v="class_content">
                <C v="class_definition" c="2">
                    <C v="external_declaration" c="3">
                        <T v="translation_unit" c="8" />
                    </C>
                    <C v="namespace" c="4">
                        <T v="pass" c="9" />
                        <R v="namespace" c="10" />
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="12" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="5" />
                    <R v="pass" c="6" />
                    <C v="p_Block" c="7">
                        <C v="p_ifndef" c="13">
                            <X v="compilerSwitch" c="18" />
                        </C>
                        <C v="p_if" c="14">
                            <X v="compilerSwitch" c="19" />
                        </C>
                        <C v="p_elif" c="15">
                            <X v="compilerSwitch" c="20" />
                        </C>
                        <C v="p_else" c="16">
                            <X v="compilerSwitch" c="21" />
                        </C>
                        <C v="p_ifdef" c="17">
                            <X v="compilerSwitch" c="22" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="prototype_parameter" uses="declaration_specifier,init_declarator,parameter_function" usedBy=",prototype_parameter_list," recursiveUses="declaration_specifier" recursiveUsedBy="prototype_parameter_list">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Recursive_Rule value="declaration_specifier" />
                        <Terminating_Rule value="parameter_function" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Recursive_Rule value="declaration_specifier" />
                        <ZeroOrOneOf>
                            <Terminating_Rule value="init_declarator" />
                        </ZeroOrOneOf>
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="init_declarator" />
            <Uses_Terminated value="parameter_function" />
            <Uses_Recursive value="declaration_specifier" />
            <UsedBy_Recursive value="prototype_parameter_list" />
        </Properties>
        <Called>
            <C v="init_declarator">
                <C v="Number" c="4">
                    <T v="CONSTANT_CHAR" c="7" />
                    <T v="CONSTANT_FLT1" c="8" />
                    <T v="CONSTANT_FLT2" c="9" />
                    <T v="CONSTANT_FLT3" c="10" />
                    <T v="CONSTANT_HEX" c="11" />
                    <T v="CONSTANT_INT0" c="12" />
                    <T v="CONSTANT_INT1" c="13" />
                </C>
                <C v="initializer" c="5">
                    <C v="assignment_expression" c="14">
                        <T v="assignment_operator" c="16" />
                        <C v="conditional_expression" c="17">
                            <X v="logical_or_expression" c="21" />
                            <X v="conditional_expression" c="22" />
                            <X v="expression" c="23" />
                        </C>
                        <R v="assignment_expression" c="18" />
                        <C v="cast_expression" c="19">
                            <X v="cast_expression" c="24" />
                            <X v="type_name" c="25" />
                            <X v="unary_expression" c="26" />
                        </C>
                        <C v="unary_expression" c="20">
                            <X v="type_name" c="27" />
                            <T v="unary_operator" c="28" />
                            <X v="cast_expression" c="29" />
                            <X v="postfix_expression" c="30" />
                            <X v="unary_expression" c="31" />
                        </C>
                    </C>
                    <X v="initializer_list" c="15" />
                </C>
                <X v="declarator" c="6" />
            </C>
            <C v="parameter_function">
                <X v="direct_parameter_declarator" c="32" />
            </C>
            <C v="declaration_specifier">
                <X v="USER_TYPE" c="33" />
                <T v="storage_class_specifier" c="34" />
                <X v="template_type" c="35" />
                <T v="type_qualifier" c="36" />
                <X v="Owner" c="37" />
                <X v="type_specifier" c="38" />
            </C>
        </Called>
        <Caller>
            <C v="prototype_parameter_list">
                <C v="function_prototype" c="2">
                    <C v="p_Block" c="7">
                        <C v="p_ifndef" c="13">
                            <X v="compilerSwitch" c="18" />
                        </C>
                        <C v="p_if" c="14">
                            <X v="compilerSwitch" c="19" />
                        </C>
                        <C v="p_elif" c="15">
                            <X v="compilerSwitch" c="20" />
                        </C>
                        <C v="p_else" c="16">
                            <X v="compilerSwitch" c="21" />
                        </C>
                        <C v="p_ifdef" c="17">
                            <X v="compilerSwitch" c="22" />
                        </C>
                    </C>
                    <C v="external_declaration" c="8">
                        <T v="translation_unit" c="23" />
                    </C>
                    <C v="friend" c="9">
                        <C v="public" c="24">
                            <X v="class_content" c="25" />
                        </C>
                    </C>
                    <C v="namespace" c="10">
                        <T v="pass" c="26" />
                        <R v="namespace" c="27" />
                        <C v="extern_compiled" c="28">
                            <X v="namespace" c="29" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="11" />
                    <R v="pass" c="12" />
                </C>
                <C v="operator" c="3">
                    <X v="methode" c="30" />
                    <X v="methode_definition" c="31" />
                </C>
                <X v="constructor" c="4" />
                <X v="service" c="5" />
                <X v="funcPoint_declarator" c="6" />
            </C>
        </Caller>
    </Rule>
    <Rule value="prototype_parameter_list" uses="prototype_parameter" usedBy=",funcPoint_declarator,function_prototype,operator,constructor,service," recursiveUses="prototype_parameter" recursiveUsedBy="funcPoint_declarator">
        <Expression>
            <Sequence>
                <Character_Single value="(" />
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Recursive_Rule value="prototype_parameter" />
                            <ZeroOrMoreOf>
                                <Sub>
                                    <Sequence>
                                        <Character_Single value="," />
                                        <Recursive_Rule value="prototype_parameter" />
                                    </Sequence>
                                </Sub>
                            </ZeroOrMoreOf>
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
                <Character_Single value=")" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="prototype_parameter" />
            <UsedBy_Terminated value="function_prototype" />
            <UsedBy_Terminated value="operator" />
            <UsedBy_Terminated value="constructor" />
            <UsedBy_Terminated value="service" />
            <UsedBy_Recursive value="funcPoint_declarator" />
        </Properties>
        <Called>
            <C v="prototype_parameter">
                <C v="init_declarator" c="2">
                    <C v="Number" c="5">
                        <T v="CONSTANT_CHAR" c="8" />
                        <T v="CONSTANT_FLT1" c="9" />
                        <T v="CONSTANT_FLT2" c="10" />
                        <T v="CONSTANT_FLT3" c="11" />
                        <T v="CONSTANT_HEX" c="12" />
                        <T v="CONSTANT_INT0" c="13" />
                        <T v="CONSTANT_INT1" c="14" />
                    </C>
                    <C v="initializer" c="6">
                        <C v="assignment_expression" c="15">
                            <T v="assignment_operator" c="17" />
                            <X v="conditional_expression" c="18" />
                            <X v="assignment_expression" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="unary_expression" c="21" />
                        </C>
                        <C v="initializer_list" c="16">
                            <X v="initializer" c="22" />
                        </C>
                    </C>
                    <C v="declarator" c="7">
                        <C v="pointer" c="23">
                            <X v="type_qualifier_list" c="26" />
                            <X v="pointer" c="27" />
                        </C>
                        <C v="direct_declarator" c="24">
                            <X v="ID" c="28" />
                            <T v="operator_id" c="29" />
                            <X v="owned_ID" c="30" />
                            <T v="type_qualifier" c="31" />
                            <X v="direct_declarator_second" c="32" />
                        </C>
                        <X v="funcPoint_declarator" c="25" />
                    </C>
                </C>
                <X v="parameter_function" c="3" />
                <X v="declaration_specifier" c="4" />
            </C>
        </Called>
        <Caller>
            <C v="function_prototype">
                <C v="p_Block" c="6">
                    <C v="p_ifndef" c="12">
                        <C v="compilerSwitch" c="17">
                            <X v="preprocedure" c="18" />
                        </C>
                    </C>
                    <C v="p_if" c="13">
                        <R v="compilerSwitch" c="19" />
                    </C>
                    <C v="p_elif" c="14">
                        <R v="compilerSwitch" c="20" />
                    </C>
                    <C v="p_else" c="15">
                        <R v="compilerSwitch" c="21" />
                    </C>
                    <C v="p_ifdef" c="16">
                        <R v="compilerSwitch" c="22" />
                    </C>
                </C>
                <C v="external_declaration" c="7">
                    <T v="translation_unit" c="23" />
                </C>
                <C v="friend" c="8">
                    <C v="public" c="24">
                        <C v="class_content" c="25">
                            <X v="class_definition" c="26" />
                        </C>
                    </C>
                </C>
                <C v="namespace" c="9">
                    <T v="pass" c="27" />
                    <R v="namespace" c="28" />
                    <C v="extern_compiled" c="29">
                        <X v="namespace" c="30" />
                    </C>
                </C>
                <X v="extern_compiled" c="10" />
                <T v="pass" c="11" />
            </C>
            <C v="operator">
                <X v="methode" c="31" />
                <X v="methode_definition" c="32" />
            </C>
            <C v="constructor">
                <X v="methode" c="33" />
                <X v="methode_definition" c="34" />
            </C>
            <C v="service">
                <X v="methode" c="35" />
                <X v="methode_definition" c="36" />
            </C>
            <C v="funcPoint_declarator">
                <X v="declarator" c="37" />
            </C>
        </Caller>
    </Rule>
    <Rule value="public" uses="friend,methode,methode_definition,preprocedure,property" usedBy=",class_content," recursiveUses="methode_definition" recursiveUsedBy="class_content">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <String value="public" />
                        <Character_Single value=":" />
                        <ZeroOrMoreOf>
                            <Sub>
                                <OrInclusive>
                                    <Recursive_Rule value="methode_definition" />
                                    <Terminating_Rule value="methode" />
                                    <Terminating_Rule value="property" />
                                    <Terminating_Rule value="preprocedure" />
                                    <Terminating_Rule value="friend" />
                                </OrInclusive>
                            </Sub>
                        </ZeroOrMoreOf>
                    </Sequence>
                </Sub>
                <Sub>
                    <OneOrMoreOf>
                        <Sub>
                            <OrInclusive>
                                <Recursive_Rule value="methode_definition" />
                                <Terminating_Rule value="methode" />
                                <Terminating_Rule value="property" />
                                <Terminating_Rule value="preprocedure" />
                                <Terminating_Rule value="friend" />
                            </OrInclusive>
                        </Sub>
                    </OneOrMoreOf>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="friend" />
            <Uses_Terminated value="methode" />
            <Uses_Terminated value="preprocedure" />
            <Uses_Terminated value="property" />
            <Uses_Recursive value="methode_definition" />
            <UsedBy_Recursive value="class_content" />
        </Properties>
        <Called>
            <C v="friend">
                <C v="class_declaration" c="6">
                    <C v="ID" c="8">
                        <C v="NON_ID" c="10">
                            <T v="not_reseved" c="11" />
                            <T v="reserved" c="12" />
                        </C>
                    </C>
                    <T v="semikolon" c="9" />
                </C>
                <C v="function_prototype" c="7">
                    <R v="ID" c="13" />
                    <C v="declaration_specifier" c="14">
                        <C v="USER_TYPE" c="18">
                            <X v="ID" c="24" />
                        </C>
                        <T v="storage_class_specifier" c="19" />
                        <C v="template_type" c="20">
                            <X v="ID" c="25" />
                            <X v="declaration_specifier" c="26" />
                        </C>
                        <T v="type_qualifier" c="21" />
                        <C v="Owner" c="22">
                            <X v="ID" c="27" />
                            <X v="template_type" c="28" />
                            <X v="type_specifier" c="29" />
                        </C>
                        <C v="type_specifier" c="23">
                            <X v="struct_specifier" c="30" />
                            <X v="union_specifier" c="31" />
                            <X v="enum_specifier" c="32" />
                        </C>
                    </C>
                    <X v="prototype_parameter_list" c="15" />
                    <T v="semikolon" c="16" />
                    <T v="type_qualifier" c="17" />
                </C>
            </C>
            <C v="methode">
                <X v="constructor" c="33" />
                <X v="destructor" c="34" />
                <X v="operator" c="35" />
                <T v="semikolon" c="36" />
                <X v="service" c="37" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="38" />
                <X v="p_include" c="39" />
                <X v="p_line" c="40" />
                <X v="p_pragma" c="41" />
                <X v="p_undefine" c="42" />
                <X v="p_warning" c="43" />
                <X v="compilerSwitch" c="44" />
                <X v="p_define" c="45" />
            </C>
            <C v="property">
                <X v="declaration_specifier" c="46" />
                <X v="enum_specifier" c="47" />
                <X v="methode" c="48" />
                <X v="property_declarator" c="49" />
                <T v="semikolon" c="50" />
            </C>
            <C v="methode_definition">
                <X v="constructor" c="51" />
                <X v="destructor" c="52" />
                <X v="expression" c="53" />
                <X v="operator" c="54" />
                <T v="semikolon" c="55" />
                <X v="service" c="56" />
                <X v="compound_statement" c="57" />
            </C>
        </Called>
        <Caller>
            <C v="class_content">
                <C v="class_definition" c="2">
                    <C v="external_declaration" c="3">
                        <T v="translation_unit" c="8" />
                    </C>
                    <C v="namespace" c="4">
                        <T v="pass" c="9" />
                        <R v="namespace" c="10" />
                        <C v="extern_compiled" c="11">
                            <X v="namespace" c="12" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="5" />
                    <R v="pass" c="6" />
                    <C v="p_Block" c="7">
                        <C v="p_ifndef" c="13">
                            <X v="compilerSwitch" c="18" />
                        </C>
                        <C v="p_if" c="14">
                            <X v="compilerSwitch" c="19" />
                        </C>
                        <C v="p_elif" c="15">
                            <X v="compilerSwitch" c="20" />
                        </C>
                        <C v="p_else" c="16">
                            <X v="compilerSwitch" c="21" />
                        </C>
                        <C v="p_ifdef" c="17">
                            <X v="compilerSwitch" c="22" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="relational_expression" uses="shift_expression" usedBy=",equality_expression," recursiveUses="shift_expression" recursiveUsedBy="equality_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="shift_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <String value="&lt;=" />
                                    <String value="&gt;=" />
                                    <String value="&lt;" />
                                    <String value="&gt;" />
                                </OrInclusive>
                            </Sub>
                            <Recursive_Rule value="shift_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="shift_expression" />
            <UsedBy_Recursive value="equality_expression" />
        </Properties>
        <Called>
            <C v="shift_expression">
                <C v="additive_expression" c="2">
                    <C v="multiplicative_expression" c="3">
                        <C v="cast_expression" c="4">
                            <X v="cast_expression" c="5" />
                            <X v="type_name" c="6" />
                            <X v="unary_expression" c="7" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="equality_expression">
                <C v="and_expression" c="2">
                    <C v="exclusive_or_expression" c="3">
                        <C v="inclusive_or_expression" c="4">
                            <X v="logical_and_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="reserved" usedBy=",NON_ID," uses="">
        <Expression>
            <OrInclusive>
                <String value="!" />
                <String value="!=" />
                <String value="#;" />
                <String value="#preproend" />
                <String value="%" />
                <String value="%=" />
                <String value="%&gt;" />
                <String value="&amp;" />
                <String value="&amp;&amp;" />
                <String value="&amp;=" />
                <String value="(" />
                <String value=")" />
                <String value="*" />
                <String value="*=" />
                <String value="+" />
                <String value="++" />
                <String value="+=" />
                <String value="," />
                <String value="-" />
                <String value="--" />
                <String value="-=" />
                <String value="-&gt;" />
                <String value="." />
                <String value="..." />
                <String value="/" />
                <String value="/=" />
                <String value=":" />
                <String value="::" />
                <String value=":&gt;" />
                <String value=";" />
                <String value="&lt;" />
                <String value="&lt;%" />
                <String value="&lt;:" />
                <String value="&lt;&lt;" />
                <String value="&lt;&lt;=" />
                <String value="&lt;=" />
                <String value="=" />
                <String value="==" />
                <String value="&gt;" />
                <String value="&gt;=" />
                <String value="&gt;&gt;" />
                <String value="&gt;&gt;=" />
                <String value="?" />
                <String value="[" />
                <String value="]" />
                <String value="^" />
                <String value="^=" />
                <String value="and" />
                <String value="asm" />
                <String value="auto" />
                <String value="break" />
                <String value="case" />
                <String value="char" />
                <String value="class" />
                <String value="const" />
                <String value="continue" />
                <String value="default" />
                <String value="define" />
                <String value="defined" />
                <String value="delete" />
                <String value="do" />
                <String value="double" />
                <String value="elif" />
                <String value="else" />
                <String value="endasm" />
                <String value="endif" />
                <String value="enum" />
                <String value="error" />
                <String value="extern" />
                <String value="float" />
                <String value="for" />
                <String value="friend" />
                <String value="goto" />
                <String value="if" />
                <String value="ifdef" />
                <String value="ifndef" />
                <String value="include" />
                <String value="int" />
                <String value="line" />
                <String value="long" />
                <String value="namespace" />
                <String value="new" />
                <String value="not" />
                <String value="operator" />
                <String value="or" />
                <String value="pragma" />
                <String value="preproend" />
                <String value="private" />
                <String value="protected" />
                <String value="public" />
                <String value="register" />
                <String value="return" />
                <String value="short" />
                <String value="signed" />
                <String value="sizeof" />
                <String value="static" />
                <String value="struct" />
                <String value="switch" />
                <String value="typedef" />
                <String value="undef" />
                <String value="undefine" />
                <String value="union" />
                <String value="unsigned" />
                <String value="using" />
                <String value="virtual" />
                <String value="void" />
                <String value="volatile" />
                <String value="warning" />
                <String value="while" />
                <String value="{" />
                <String value="|" />
                <String value="|=" />
                <String value="||" />
                <String value="}" />
                <String value="~" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="NON_ID" />
        </Properties>
        <Called />
        <Caller>
            <C v="NON_ID">
                <C v="ID" c="2">
                    <C v="USER_TYPE" c="3">
                        <X v="declaration_specifier" c="30" />
                        <X v="specifier_qualifier_list" c="31" />
                        <X v="type_name" c="32" />
                        <T v="struct_declaration" c="33" />
                    </C>
                    <X v="primary_expression" c="4" />
                    <X v="postfix_expression_second" c="5" />
                    <X v="struct_specifier" c="6" />
                    <X v="union_specifier" c="7" />
                    <X v="enum_specifier" c="8" />
                    <X v="enumerator" c="9" />
                    <X v="direct_declarator" c="10" />
                    <X v="identifier_list" c="11" />
                    <X v="lable_stmt" c="12" />
                    <X v="goto_stmt" c="13" />
                    <X v="p_undefine" c="14" />
                    <X v="p_declarator" c="15" />
                    <X v="p_defined" c="16" />
                    <X v="function_prototype" c="17" />
                    <X v="template_type" c="18" />
                    <X v="Owner" c="19" />
                    <X v="owned_ID" c="20" />
                    <X v="class_declaration" c="21" />
                    <X v="class_definition" c="22" />
                    <X v="calss_parent" c="23" />
                    <X v="constructor" c="24" />
                    <X v="destructor" c="25" />
                    <X v="service" c="26" />
                    <X v="declarator_prp" c="27" />
                    <X v="namespace" c="28" />
                    <X v="using_namespace" c="29" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="return_stmt" uses="expression,semikolon" usedBy=",statement,jump_statement,">
        <Expression>
            <Sequence>
                <String value="return" />
                <ZeroOrOneOf>
                    <Terminating_Rule value="expression" />
                </ZeroOrOneOf>
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <Uses_Terminated value="semikolon" />
            <UsedBy_Terminated value="statement" />
            <UsedBy_Terminated value="jump_statement" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="3">
                    <T v="assignment_operator" c="4" />
                    <C v="conditional_expression" c="5">
                        <C v="logical_or_expression" c="9">
                            <X v="logical_and_expression" c="12" />
                        </C>
                        <R v="conditional_expression" c="10" />
                        <R v="expression" c="11" />
                    </C>
                    <R v="assignment_expression" c="6" />
                    <C v="cast_expression" c="7">
                        <R v="cast_expression" c="13" />
                        <C v="type_name" c="14">
                            <X v="USER_TYPE" c="16" />
                            <X v="abstract_declarator" c="17" />
                            <X v="specifier_qualifier_list" c="18" />
                        </C>
                        <C v="unary_expression" c="15">
                            <X v="type_name" c="19" />
                            <T v="unary_operator" c="20" />
                            <X v="cast_expression" c="21" />
                            <X v="postfix_expression" c="22" />
                            <X v="unary_expression" c="23" />
                        </C>
                    </C>
                    <R v="unary_expression" c="8" />
                </C>
            </C>
            <T v="semikolon" />
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="3">
                    <C v="if_stmt" c="18">
                        <R v="statement" c="19" />
                        <C v="else_part" c="20">
                            <X v="if_stmt" c="21" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="4" />
                <C v="p_Block" c="5">
                    <C v="p_ifndef" c="22">
                        <C v="compilerSwitch" c="27">
                            <X v="preprocedure" c="28" />
                        </C>
                    </C>
                    <C v="p_if" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_elif" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_else" c="25" />
                    <X v="p_ifdef" c="26" />
                </C>
                <X v="namespace" c="6" />
                <X v="extern_compiled" c="7" />
                <T v="pass" c="8" />
                <X v="compound_statement" c="9" />
                <X v="case_part" c="10" />
                <X v="default_part" c="11" />
                <X v="if_part" c="12" />
                <X v="switch_stmt" c="13" />
                <X v="while_stmt" c="14" />
                <X v="do_stmt" c="15" />
                <X v="for_stmt" c="16" />
                <X v="p_define" c="17" />
            </C>
            <T v="jump_statement" />
        </Caller>
    </Rule>
    <Rule value="semikolon" uses="" usedBy=",declaration,case_stmt,default_stmt,expr_stmt,do_stmt,goto_stmt,continue_stmt,break_stmt,return_stmt,p_define,function_prototype,struct_declaration,class_declaration,class_definition,methode,methode_definition,property,namespace,using_namespace,extern_compiled,">
        <Expression>
            <OrInclusive>
                <String value=";" />
                <String value="#;" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="declaration" />
            <UsedBy_Terminated value="case_stmt" />
            <UsedBy_Terminated value="default_stmt" />
            <UsedBy_Terminated value="expr_stmt" />
            <UsedBy_Terminated value="do_stmt" />
            <UsedBy_Terminated value="goto_stmt" />
            <UsedBy_Terminated value="continue_stmt" />
            <UsedBy_Terminated value="break_stmt" />
            <UsedBy_Terminated value="return_stmt" />
            <UsedBy_Terminated value="p_define" />
            <UsedBy_Terminated value="function_prototype" />
            <UsedBy_Terminated value="struct_declaration" />
            <UsedBy_Terminated value="class_declaration" />
            <UsedBy_Terminated value="class_definition" />
            <UsedBy_Terminated value="methode" />
            <UsedBy_Terminated value="methode_definition" />
            <UsedBy_Terminated value="property" />
            <UsedBy_Terminated value="namespace" />
            <UsedBy_Terminated value="using_namespace" />
            <UsedBy_Terminated value="extern_compiled" />
        </Properties>
        <Called />
        <Caller>
            <C v="declaration">
                <X v="union_specifier" c="21" />
                <X v="compound_statement" c="22" />
                <X v="for_expr" c="23" />
                <X v="p_Block" c="24" />
                <X v="function_definition" c="25" />
                <X v="external_declaration" c="26" />
                <X v="namespace" c="27" />
                <X v="extern_compiled" c="28" />
                <T v="pass" c="29" />
                <X v="struct_specifier" c="30" />
            </C>
            <C v="case_stmt">
                <X v="case_part" c="31" />
                <X v="default_part" c="32" />
                <X v="statement" c="33" />
            </C>
            <C v="default_stmt">
                <X v="statement" c="34" />
            </C>
            <C v="expr_stmt">
                <X v="statement" c="35" />
                <X v="for_expr" c="36" />
            </C>
            <C v="do_stmt">
                <T v="iteration_statement" c="37" />
                <X v="statement" c="38" />
            </C>
            <C v="goto_stmt">
                <X v="statement" c="39" />
                <T v="jump_statement" c="40" />
            </C>
            <C v="continue_stmt">
                <X v="statement" c="41" />
                <T v="jump_statement" c="42" />
            </C>
            <C v="break_stmt">
                <X v="statement" c="43" />
                <X v="case_stmt" c="44" />
                <X v="case_part" c="45" />
                <X v="default_stmt" c="46" />
                <X v="default_part" c="47" />
                <T v="jump_statement" c="48" />
            </C>
            <C v="return_stmt">
                <X v="statement" c="49" />
                <T v="jump_statement" c="50" />
            </C>
            <C v="p_define">
                <X v="preprocedure" c="51" />
            </C>
            <C v="function_prototype">
                <X v="p_Block" c="52" />
                <X v="external_declaration" c="53" />
                <X v="friend" c="54" />
                <X v="namespace" c="55" />
                <X v="extern_compiled" c="56" />
                <T v="pass" c="57" />
            </C>
            <T v="struct_declaration" />
            <C v="class_declaration">
                <X v="friend" c="58" />
            </C>
            <C v="class_definition">
                <X v="external_declaration" c="59" />
                <X v="namespace" c="60" />
                <X v="extern_compiled" c="61" />
                <T v="pass" c="62" />
                <X v="p_Block" c="63" />
            </C>
            <C v="methode">
                <X v="public" c="64" />
                <X v="protected" c="65" />
                <X v="private" c="66" />
                <X v="property" c="67" />
            </C>
            <C v="methode_definition">
                <X v="protected" c="68" />
                <X v="private" c="69" />
                <X v="public" c="70" />
            </C>
            <C v="property">
                <X v="public" c="71" />
                <X v="protected" c="72" />
                <X v="private" c="73" />
            </C>
            <C v="namespace">
                <T v="pass" c="74" />
                <X v="namespace" c="75" />
                <X v="extern_compiled" c="76" />
            </C>
            <C v="using_namespace">
                <X v="p_Block" c="77" />
                <X v="namespace" c="78" />
                <X v="extern_compiled" c="79" />
                <T v="pass" c="80" />
            </C>
            <C v="extern_compiled">
                <X v="namespace" c="81" />
            </C>
        </Caller>
    </Rule>
    <Rule value="service" uses="ID,declaration_specifier,prototype_parameter_list,type_qualifier" usedBy=",methode,methode_definition,">
        <Expression>
            <Sequence>
                <ZeroOrOneOf>
                    <Sub>
                        <OrInclusive>
                            <String value="virtual" />
                            <String value="static" />
                        </OrInclusive>
                    </Sub>
                </ZeroOrOneOf>
                <Terminating_Rule value="declaration_specifier" />
                <Terminating_Rule value="ID" />
                <Terminating_Rule value="prototype_parameter_list" />
                <ZeroOrMoreOf>
                    <Terminating_Rule value="type_qualifier" />
                </ZeroOrMoreOf>
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Character_Single value="=" />
                            <Character_Single value="0" />
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="declaration_specifier" />
            <Uses_Terminated value="prototype_parameter_list" />
            <Uses_Terminated value="type_qualifier" />
            <UsedBy_Terminated value="methode" />
            <UsedBy_Terminated value="methode_definition" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="5">
                    <T v="not_reseved" c="6" />
                    <T v="reserved" c="7" />
                </C>
            </C>
            <C v="declaration_specifier">
                <C v="USER_TYPE" c="8">
                    <C v="ID" c="14" />
                </C>
                <T v="storage_class_specifier" c="9" />
                <C v="template_type" c="10">
                    <R v="ID" c="15" />
                    <R v="declaration_specifier" c="16" />
                </C>
                <T v="type_qualifier" c="11" />
                <C v="Owner" c="12">
                    <R v="ID" c="17" />
                    <R v="template_type" c="18" />
                    <C v="type_specifier" c="19">
                        <C v="struct_specifier" c="20">
                            <X v="ID" c="23" />
                            <X v="declaration" c="24" />
                        </C>
                        <C v="union_specifier" c="21">
                            <X v="ID" c="25" />
                            <X v="declaration" c="26" />
                        </C>
                        <C v="enum_specifier" c="22">
                            <X v="ID" c="27" />
                            <X v="enumerator" c="28" />
                        </C>
                    </C>
                </C>
                <R v="type_specifier" c="13" />
            </C>
            <C v="prototype_parameter_list">
                <C v="prototype_parameter" c="29">
                    <X v="init_declarator" c="30" />
                    <X v="parameter_function" c="31" />
                    <X v="declaration_specifier" c="32" />
                </C>
            </C>
            <T v="type_qualifier" />
        </Called>
        <Caller>
            <C v="methode">
                <C v="public" c="3">
                    <C v="class_content" c="7">
                        <C v="class_definition" c="8">
                            <X v="external_declaration" c="9" />
                            <X v="namespace" c="10" />
                            <X v="extern_compiled" c="11" />
                            <T v="pass" c="12" />
                            <X v="p_Block" c="13" />
                        </C>
                    </C>
                </C>
                <C v="protected" c="4">
                    <R v="class_content" c="14" />
                </C>
                <C v="private" c="5">
                    <R v="class_content" c="15" />
                </C>
                <C v="property" c="6">
                    <R v="public" c="16" />
                    <R v="protected" c="17" />
                    <R v="private" c="18" />
                </C>
            </C>
            <C v="methode_definition">
                <C v="protected" c="19" />
                <C v="private" c="20" />
                <C v="public" c="21" />
            </C>
        </Caller>
    </Rule>
    <Rule value="shift_expression" uses="additive_expression" usedBy=",relational_expression," recursiveUses="additive_expression" recursiveUsedBy="relational_expression">
        <Expression>
            <Sequence>
                <Recursive_Rule value="additive_expression" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <OrInclusive>
                                    <String value="&lt;&lt;" />
                                    <String value="&gt;&gt;" />
                                </OrInclusive>
                            </Sub>
                            <Recursive_Rule value="additive_expression" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Recursive value="additive_expression" />
            <UsedBy_Recursive value="relational_expression" />
        </Properties>
        <Called>
            <C v="additive_expression">
                <C v="multiplicative_expression" c="2">
                    <C v="cast_expression" c="3">
                        <R v="cast_expression" c="4" />
                        <C v="type_name" c="5">
                            <X v="USER_TYPE" c="7" />
                            <X v="abstract_declarator" c="8" />
                            <X v="specifier_qualifier_list" c="9" />
                        </C>
                        <C v="unary_expression" c="6">
                            <X v="type_name" c="10" />
                            <T v="unary_operator" c="11" />
                            <X v="cast_expression" c="12" />
                            <X v="postfix_expression" c="13" />
                            <X v="unary_expression" c="14" />
                        </C>
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <C v="relational_expression">
                <C v="equality_expression" c="2">
                    <C v="and_expression" c="3">
                        <C v="exclusive_or_expression" c="4">
                            <X v="inclusive_or_expression" c="5" />
                        </C>
                    </C>
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="skip" uses="" usedBy="">
        <Expression>
            <Primitive value="space_p" />
        </Expression>
        <Properties leafLevel="0" rootLevel="0" characterLevel="not phrased" />
        <Called />
        <Caller />
    </Rule>
    <Rule value="specifier_qualifier_list" uses="USER_TYPE,specifier_qualifier_list,type_qualifier,type_specifier" usedBy=",specifier_qualifier_list,type_name,struct_declaration," recursiveUses="specifier_qualifier_list,type_specifier" recursiveUsedBy="specifier_qualifier_list,type_name">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Recursive_Rule value="type_specifier" />
                        <Recursive_Rule value="specifier_qualifier_list" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="type_qualifier" />
                        <Recursive_Rule value="specifier_qualifier_list" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="USER_TYPE" />
                        <Recursive_Rule value="specifier_qualifier_list" />
                    </Sequence>
                </Sub>
                <Recursive_Rule value="type_specifier" />
                <Terminating_Rule value="type_qualifier" />
                <Terminating_Rule value="USER_TYPE" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="USER_TYPE" />
            <Uses_Terminated value="type_qualifier" />
            <Uses_Recursive value="specifier_qualifier_list" />
            <Uses_Recursive value="type_specifier" />
            <UsedBy_Terminated value="struct_declaration" />
            <UsedBy_Recursive value="specifier_qualifier_list" />
            <UsedBy_Recursive value="type_name" />
        </Properties>
        <Called>
            <C v="USER_TYPE">
                <C v="ID" c="5">
                    <C v="NON_ID" c="6">
                        <T v="not_reseved" c="7" />
                        <T v="reserved" c="8" />
                    </C>
                </C>
            </C>
            <T v="type_qualifier" />
            <C v="specifier_qualifier_list" />
            <C v="type_specifier">
                <C v="struct_specifier" c="9">
                    <C v="ID" c="12" />
                    <C v="declaration" c="13">
                        <C v="init_declarator" c="14">
                            <X v="Number" c="17" />
                            <X v="initializer" c="18" />
                            <X v="declarator" c="19" />
                        </C>
                        <T v="semikolon" c="15" />
                        <C v="declaration_specifier" c="16">
                            <X v="USER_TYPE" c="20" />
                            <T v="storage_class_specifier" c="21" />
                            <X v="template_type" c="22" />
                            <T v="type_qualifier" c="23" />
                            <X v="Owner" c="24" />
                            <X v="type_specifier" c="25" />
                        </C>
                    </C>
                </C>
                <C v="union_specifier" c="10">
                    <R v="ID" c="26" />
                    <R v="declaration" c="27" />
                </C>
                <C v="enum_specifier" c="11">
                    <R v="ID" c="28" />
                    <C v="enumerator" c="29">
                        <X v="ID" c="30" />
                        <X v="constant_expression" c="31" />
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <T v="struct_declaration" />
            <C v="specifier_qualifier_list" />
            <C v="type_name">
                <C v="cast_expression" c="4">
                    <C v="assignment_expression" c="6">
                        <C v="initializer" c="11">
                            <X v="init_declarator" c="14" />
                            <X v="initializer_list" c="15" />
                        </C>
                        <C v="argument_expression_list" c="12">
                            <X v="postfix_expression_second" c="16" />
                        </C>
                        <R v="assignment_expression" c="13" />
                    </C>
                    <C v="parameter_declaration" c="7">
                        <C v="parameter_list" c="17">
                            <X v="parameter_type_list" c="18" />
                        </C>
                    </C>
                    <C v="unary_expression" c="8">
                        <C v="element_initializer" c="19">
                            <X v="function_definition" c="24" />
                        </C>
                        <R v="unary_expression" c="20" />
                        <R v="cast_expression" c="21" />
                        <R v="assignment_expression" c="22" />
                        <R v="parameter_declaration" c="23" />
                    </C>
                    <R v="cast_expression" c="9" />
                    <C v="multiplicative_expression" c="10">
                        <C v="additive_expression" c="25">
                            <X v="shift_expression" c="26" />
                        </C>
                    </C>
                </C>
                <R v="unary_expression" c="5" />
            </C>
        </Caller>
    </Rule>
    <Rule value="statement" uses="break_stmt,case_stmt,compound_statement,continue_stmt,default_stmt,do_stmt,expr_stmt,for_stmt,goto_stmt,if_stmt,lable_stmt,preprocedure,return_stmt,switch_stmt,while_stmt" usedBy=",compound_statement,case_part,default_part,if_part,elif_part,else_part,switch_stmt,while_stmt,do_stmt,for_stmt,p_define,p_Block,namespace,extern_compiled,pass," recursiveUses="case_stmt,compound_statement,default_stmt,do_stmt,for_stmt,if_stmt,switch_stmt,while_stmt" recursiveUsedBy="compound_statement,case_part,default_part,if_part,switch_stmt,while_stmt,do_stmt,for_stmt,p_define">
        <Expression>
            <Sub>
                <OrInclusive>
                    <Recursive_Rule value="case_stmt" />
                    <Recursive_Rule value="default_stmt" />
                    <Recursive_Rule value="if_stmt" />
                    <Recursive_Rule value="switch_stmt" />
                    <Recursive_Rule value="while_stmt" />
                    <Recursive_Rule value="do_stmt" />
                    <Recursive_Rule value="for_stmt" />
                    <Terminating_Rule value="goto_stmt" />
                    <Terminating_Rule value="continue_stmt" />
                    <Terminating_Rule value="break_stmt" />
                    <Terminating_Rule value="return_stmt" />
                    <Recursive_Rule value="compound_statement" />
                    <Terminating_Rule value="lable_stmt" />
                    <Terminating_Rule value="expr_stmt" />
                    <Terminating_Rule value="preprocedure" />
                </OrInclusive>
            </Sub>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="break_stmt" />
            <Uses_Terminated value="continue_stmt" />
            <Uses_Terminated value="expr_stmt" />
            <Uses_Terminated value="goto_stmt" />
            <Uses_Terminated value="lable_stmt" />
            <Uses_Terminated value="preprocedure" />
            <Uses_Terminated value="return_stmt" />
            <Uses_Recursive value="case_stmt" />
            <Uses_Recursive value="compound_statement" />
            <Uses_Recursive value="default_stmt" />
            <Uses_Recursive value="do_stmt" />
            <Uses_Recursive value="for_stmt" />
            <Uses_Recursive value="if_stmt" />
            <Uses_Recursive value="switch_stmt" />
            <Uses_Recursive value="while_stmt" />
            <UsedBy_Terminated value="elif_part" />
            <UsedBy_Terminated value="else_part" />
            <UsedBy_Terminated value="p_Block" />
            <UsedBy_Terminated value="namespace" />
            <UsedBy_Terminated value="extern_compiled" />
            <UsedBy_Terminated value="pass" />
            <UsedBy_Recursive value="compound_statement" />
            <UsedBy_Recursive value="case_part" />
            <UsedBy_Recursive value="default_part" />
            <UsedBy_Recursive value="if_part" />
            <UsedBy_Recursive value="switch_stmt" />
            <UsedBy_Recursive value="while_stmt" />
            <UsedBy_Recursive value="do_stmt" />
            <UsedBy_Recursive value="for_stmt" />
            <UsedBy_Recursive value="p_define" />
        </Properties>
        <Called>
            <C v="break_stmt">
                <T v="semikolon" c="16" />
            </C>
            <C v="continue_stmt">
                <T v="semikolon" c="17" />
            </C>
            <C v="expr_stmt">
                <T v="empty_expression" c="18" />
                <C v="expression" c="19">
                    <C v="assignment_expression" c="21">
                        <T v="assignment_operator" c="22" />
                        <C v="conditional_expression" c="23">
                            <X v="logical_or_expression" c="27" />
                            <X v="conditional_expression" c="28" />
                            <X v="expression" c="29" />
                        </C>
                        <R v="assignment_expression" c="24" />
                        <C v="cast_expression" c="25">
                            <X v="cast_expression" c="30" />
                            <X v="type_name" c="31" />
                            <X v="unary_expression" c="32" />
                        </C>
                        <X v="unary_expression" c="26" />
                    </C>
                </C>
                <T v="semikolon" c="20" />
            </C>
            <C v="goto_stmt">
                <X v="ID" c="33" />
                <T v="semikolon" c="34" />
            </C>
            <C v="lable_stmt">
                <X v="ID" c="35" />
            </C>
            <C v="preprocedure">
                <X v="p_error" c="36" />
                <X v="p_include" c="37" />
                <X v="p_line" c="38" />
                <X v="p_pragma" c="39" />
                <X v="p_undefine" c="40" />
                <X v="p_warning" c="41" />
                <X v="compilerSwitch" c="42" />
                <X v="p_define" c="43" />
            </C>
            <C v="return_stmt">
                <X v="expression" c="44" />
                <T v="semikolon" c="45" />
            </C>
            <C v="case_stmt">
                <X v="break_stmt" c="46" />
                <T v="semikolon" c="47" />
                <X v="case_part" c="48" />
            </C>
            <C v="compound_statement">
                <X v="declaration" c="49" />
                <X v="preprocedure" c="50" />
                <X v="statement" c="51" />
            </C>
            <C v="default_stmt">
                <X v="break_stmt" c="52" />
                <T v="semikolon" c="53" />
                <X v="default_part" c="54" />
            </C>
            <C v="do_stmt">
                <T v="semikolon" c="55" />
                <X v="while_expr" c="56" />
                <X v="statement" c="57" />
            </C>
            <C v="for_stmt">
                <X v="for_expr" c="58" />
                <X v="statement" c="59" />
            </C>
            <C v="if_stmt">
                <X v="if_part" c="60" />
                <X v="elif_part" c="61" />
                <X v="else_part" c="62" />
            </C>
            <C v="switch_stmt">
                <X v="switch_expr" c="63" />
                <X v="statement" c="64" />
            </C>
            <C v="while_stmt">
                <X v="while_expr" c="65" />
                <X v="statement" c="66" />
            </C>
        </Called>
        <Caller>
            <C v="elif_part">
                <C v="if_stmt" c="16">
                    <R v="statement" c="17" />
                    <C v="else_part" c="18">
                        <R v="if_stmt" c="19" />
                    </C>
                </C>
            </C>
            <C v="else_part" />
            <C v="p_Block">
                <C v="p_ifndef" c="20">
                    <C v="compilerSwitch" c="25">
                        <C v="preprocedure" c="26">
                            <X v="compound_statement" c="27" />
                            <X v="p_Block" c="28" />
                            <X v="external_declaration" c="29" />
                            <X v="public" c="30" />
                            <X v="protected" c="31" />
                            <X v="private" c="32" />
                            <X v="namespace" c="33" />
                            <X v="extern_compiled" c="34" />
                            <T v="pass" c="35" />
                            <X v="statement" c="36" />
                        </C>
                    </C>
                </C>
                <X v="p_if" c="21" />
                <X v="p_elif" c="22" />
                <X v="p_else" c="23" />
                <X v="p_ifdef" c="24" />
            </C>
            <C v="namespace">
                <T v="pass" c="37" />
                <X v="namespace" c="38" />
                <X v="extern_compiled" c="39" />
            </C>
            <C v="extern_compiled">
                <X v="namespace" c="40" />
            </C>
            <T v="pass" />
            <C v="compound_statement">
                <X v="methode_definition" c="41" />
                <X v="statement" c="42" />
                <X v="function_definition" c="43" />
            </C>
            <C v="case_part">
                <X v="case_stmt" c="44" />
            </C>
            <C v="default_part">
                <X v="default_stmt" c="45" />
            </C>
            <C v="if_part">
                <X v="if_stmt" c="46" />
            </C>
            <C v="switch_stmt">
                <X v="statement" c="47" />
            </C>
            <C v="while_stmt">
                <T v="iteration_statement" c="48" />
                <X v="statement" c="49" />
            </C>
            <C v="do_stmt">
                <T v="iteration_statement" c="50" />
                <X v="statement" c="51" />
            </C>
            <C v="for_stmt">
                <T v="iteration_statement" c="52" />
                <X v="statement" c="53" />
            </C>
            <C v="p_define">
                <X v="preprocedure" c="54" />
            </C>
        </Caller>
    </Rule>
    <Rule value="storage_class_specifier" uses="" usedBy=",declaration_specifier,extern_compiled,">
        <Expression>
            <OrInclusive>
                <String value="typedef" />
                <String value="extern" />
                <String value="static" />
                <String value="auto" />
                <String value="register" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="declaration_specifier" />
            <UsedBy_Terminated value="extern_compiled" />
        </Properties>
        <Called />
        <Caller>
            <C v="declaration_specifier">
                <C v="parameter_declaration" c="3">
                    <C v="parameter_list" c="12">
                        <C v="parameter_type_list" c="13">
                            <X v="direct_abstract_declarator" c="14" />
                            <X v="direct_parameter_declarator" c="15" />
                        </C>
                    </C>
                </C>
                <C v="function_definition" c="4">
                    <C v="external_declaration" c="16">
                        <T v="translation_unit" c="21" />
                    </C>
                    <C v="namespace" c="17">
                        <T v="pass" c="22" />
                        <R v="namespace" c="23" />
                        <C v="extern_compiled" c="24">
                            <X v="namespace" c="25" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="18" />
                    <R v="pass" c="19" />
                    <C v="p_Block" c="20">
                        <X v="p_ifndef" c="26" />
                        <X v="p_if" c="27" />
                        <X v="p_elif" c="28" />
                        <X v="p_else" c="29" />
                        <X v="p_ifdef" c="30" />
                    </C>
                </C>
                <X v="prototype_parameter" c="5" />
                <X v="function_prototype" c="6" />
                <X v="operator" c="7" />
                <X v="service" c="8" />
                <X v="property" c="9" />
                <X v="declaration" c="10" />
                <X v="template_type" c="11" />
            </C>
            <C v="extern_compiled" />
        </Caller>
    </Rule>
    <Rule value="String" uses="" usedBy=",primary_expression,extern_compiled,">
        <Expression>
            <Sequence>
                <ZeroOrOneOf>
                    <Character_Single value="L" />
                </ZeroOrOneOf>
                <Character_Single value='\&quot;' />
                <ZeroOrMoreOf>
                    <Sub>
                        <OrInclusive>
                            <Sub>
                                <Sequence>
                                    <Character_Single value="\\" />
                                    <Sub>
                                        <Exclusion>
                                            <First>
                                                <Primitive value="anychar_p" />
                                            </First>
                                            <Second>
                                                <Sub>
                                                    <OrInclusive>
                                                        <Character_Single value="\r" />
                                                        <Character_Single value="\n" />
                                                    </OrInclusive>
                                                </Sub>
                                            </Second>
                                        </Exclusion>
                                    </Sub>
                                </Sequence>
                            </Sub>
                            <Sub>
                                <Exclusion>
                                    <First>
                                        <Primitive value="anychar_p" />
                                    </First>
                                    <Second>
                                        <Sub>
                                            <OrInclusive>
                                                <Character_Single value="\\" />
                                                <Character_Single value='\&quot;' />
                                            </OrInclusive>
                                        </Sub>
                                    </Second>
                                </Exclusion>
                            </Sub>
                        </OrInclusive>
                    </Sub>
                </ZeroOrMoreOf>
                <Character_Single value='\&quot;' />
            </Sequence>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="not phrased">
            <UsedBy_Terminated value="primary_expression" />
            <UsedBy_Terminated value="extern_compiled" />
        </Properties>
        <Called />
        <Caller>
            <C v="primary_expression">
                <C v="postfix_expression" c="3">
                    <C v="unary_expression" c="4">
                        <C v="element_initializer" c="5">
                            <X v="function_definition" c="10" />
                        </C>
                        <R v="unary_expression" c="6" />
                        <C v="cast_expression" c="7">
                            <X v="assignment_expression" c="11" />
                            <X v="parameter_declaration" c="12" />
                            <X v="unary_expression" c="13" />
                            <X v="cast_expression" c="14" />
                            <X v="multiplicative_expression" c="15" />
                        </C>
                        <C v="assignment_expression" c="8">
                            <X v="initializer" c="16" />
                            <X v="argument_expression_list" c="17" />
                            <X v="assignment_expression" c="18" />
                        </C>
                        <C v="parameter_declaration" c="9">
                            <X v="parameter_list" c="19" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="extern_compiled">
                <C v="namespace" c="20">
                    <T v="pass" c="21" />
                    <R v="namespace" c="22" />
                    <R v="extern_compiled" c="23" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="struct_declaration" uses="USER_TYPE,semikolon,specifier_qualifier_list,struct_declarator_list,template_type" usedBy="">
        <Expression>
            <Sequence>
                <Sub>
                    <OrInclusive>
                        <Terminating_Rule value="template_type" />
                        <Terminating_Rule value="specifier_qualifier_list" />
                        <Terminating_Rule value="USER_TYPE" />
                    </OrInclusive>
                </Sub>
                <Terminating_Rule value="struct_declarator_list" />
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="0" characterLevel="phrased">
            <Uses_Terminated value="USER_TYPE" />
            <Uses_Terminated value="semikolon" />
            <Uses_Terminated value="specifier_qualifier_list" />
            <Uses_Terminated value="struct_declarator_list" />
            <Uses_Terminated value="template_type" />
        </Properties>
        <Called>
            <C v="USER_TYPE">
                <C v="ID" c="6">
                    <C v="NON_ID" c="7">
                        <T v="not_reseved" c="8" />
                        <T v="reserved" c="9" />
                    </C>
                </C>
            </C>
            <T v="semikolon" />
            <C v="specifier_qualifier_list">
                <C v="USER_TYPE" c="10" />
                <T v="type_qualifier" c="11" />
                <R v="specifier_qualifier_list" c="12" />
                <C v="type_specifier" c="13">
                    <C v="struct_specifier" c="14">
                        <C v="ID" c="17" />
                        <C v="declaration" c="18">
                            <X v="init_declarator" c="19" />
                            <T v="semikolon" c="20" />
                            <X v="declaration_specifier" c="21" />
                        </C>
                    </C>
                    <C v="union_specifier" c="15">
                        <R v="ID" c="22" />
                        <R v="declaration" c="23" />
                    </C>
                    <C v="enum_specifier" c="16">
                        <R v="ID" c="24" />
                        <C v="enumerator" c="25">
                            <X v="ID" c="26" />
                            <X v="constant_expression" c="27" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="struct_declarator_list">
                <C v="struct_declarator" c="28">
                    <X v="constant_expression" c="29" />
                    <X v="declarator" c="30" />
                </C>
            </C>
            <C v="template_type">
                <X v="ID" c="31" />
                <X v="declaration_specifier" c="32" />
            </C>
        </Called>
        <Caller />
    </Rule>
    <Rule value="struct_declarator" uses="constant_expression,declarator" usedBy=",struct_declarator_list,">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <String value=":" />
                        <Terminating_Rule value="constant_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="declarator" />
                        <String value=":" />
                        <Terminating_Rule value="constant_expression" />
                    </Sequence>
                </Sub>
                <Terminating_Rule value="declarator" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="2" characterLevel="phrased">
            <Uses_Terminated value="constant_expression" />
            <Uses_Terminated value="declarator" />
            <UsedBy_Terminated value="struct_declarator_list" />
        </Properties>
        <Called>
            <C v="constant_expression">
                <C v="conditional_expression" c="3">
                    <C v="logical_or_expression" c="4">
                        <C v="logical_and_expression" c="7">
                            <X v="inclusive_or_expression" c="8" />
                        </C>
                    </C>
                    <R v="conditional_expression" c="5" />
                    <C v="expression" c="6">
                        <C v="assignment_expression" c="9">
                            <T v="assignment_operator" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="assignment_expression" c="12" />
                            <X v="cast_expression" c="13" />
                            <X v="unary_expression" c="14" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="declarator">
                <C v="pointer" c="15">
                    <C v="type_qualifier_list" c="18">
                        <T v="type_qualifier" c="20" />
                    </C>
                    <R v="pointer" c="19" />
                </C>
                <C v="direct_declarator" c="16">
                    <C v="ID" c="21">
                        <C v="NON_ID" c="26">
                            <T v="not_reseved" c="27" />
                            <T v="reserved" c="28" />
                        </C>
                    </C>
                    <T v="operator_id" c="22" />
                    <C v="owned_ID" c="23">
                        <X v="ID" c="29" />
                        <T v="operator_id" c="30" />
                        <X v="Owner" c="31" />
                    </C>
                    <T v="type_qualifier" c="24" />
                    <X v="direct_declarator_second" c="25" />
                </C>
                <X v="funcPoint_declarator" c="17" />
            </C>
        </Called>
        <Caller>
            <C v="struct_declarator_list">
                <T v="struct_declaration" c="2" />
            </C>
        </Caller>
    </Rule>
    <Rule value="struct_declarator_list" uses="struct_declarator" usedBy=",struct_declaration,">
        <Expression>
            <Sequence>
                <Terminating_Rule value="struct_declarator" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <String value="," />
                            </Sub>
                            <Terminating_Rule value="struct_declarator" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="1" characterLevel="phrased">
            <Uses_Terminated value="struct_declarator" />
            <UsedBy_Terminated value="struct_declaration" />
        </Properties>
        <Called>
            <C v="struct_declarator">
                <C v="constant_expression" c="2">
                    <C v="conditional_expression" c="4">
                        <C v="logical_or_expression" c="5">
                            <X v="logical_and_expression" c="8" />
                        </C>
                        <R v="conditional_expression" c="6" />
                        <C v="expression" c="7">
                            <X v="assignment_expression" c="9" />
                        </C>
                    </C>
                </C>
                <C v="declarator" c="3">
                    <C v="pointer" c="10">
                        <C v="type_qualifier_list" c="13">
                            <T v="type_qualifier" c="15" />
                        </C>
                        <R v="pointer" c="14" />
                    </C>
                    <C v="direct_declarator" c="11">
                        <C v="ID" c="16">
                            <X v="NON_ID" c="21" />
                        </C>
                        <T v="operator_id" c="17" />
                        <C v="owned_ID" c="18">
                            <X v="ID" c="22" />
                            <T v="operator_id" c="23" />
                            <X v="Owner" c="24" />
                        </C>
                        <T v="type_qualifier" c="19" />
                        <C v="direct_declarator_second" c="20">
                            <X v="direct_parameter_declarator" c="25" />
                            <X v="constant_expression" c="26" />
                        </C>
                    </C>
                    <C v="funcPoint_declarator" c="12">
                        <C v="prototype_parameter_list" c="27">
                            <X v="prototype_parameter" c="30" />
                        </C>
                        <T v="type_qualifier" c="28" />
                        <X v="direct_declarator" c="29" />
                    </C>
                </C>
            </C>
        </Called>
        <Caller>
            <T v="struct_declaration" />
        </Caller>
    </Rule>
    <Rule value="struct_specifier" uses="ID,declaration" usedBy=",type_specifier," recursiveUses="declaration" recursiveUsedBy="type_specifier">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <String value="struct" />
                        <ZeroOrOneOf>
                            <Terminating_Rule value="ID" />
                        </ZeroOrOneOf>
                        <Sub>
                            <OrInclusive>
                                <String value="{" />
                                <String value="&lt;%" />
                            </OrInclusive>
                        </Sub>
                        <OneOrMoreOf>
                            <Recursive_Rule value="declaration" />
                        </OneOrMoreOf>
                        <Sub>
                            <OrInclusive>
                                <String value="}" />
                                <String value="%&gt;" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="struct" />
                        <Terminating_Rule value="ID" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Recursive value="declaration" />
            <UsedBy_Recursive value="type_specifier" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <C v="declaration">
                <C v="init_declarator" c="6">
                    <C v="Number" c="9">
                        <T v="CONSTANT_CHAR" c="12" />
                        <T v="CONSTANT_FLT1" c="13" />
                        <T v="CONSTANT_FLT2" c="14" />
                        <T v="CONSTANT_FLT3" c="15" />
                        <T v="CONSTANT_HEX" c="16" />
                        <T v="CONSTANT_INT0" c="17" />
                        <T v="CONSTANT_INT1" c="18" />
                    </C>
                    <C v="initializer" c="10">
                        <C v="assignment_expression" c="19">
                            <T v="assignment_operator" c="21" />
                            <X v="conditional_expression" c="22" />
                            <X v="assignment_expression" c="23" />
                            <X v="cast_expression" c="24" />
                            <X v="unary_expression" c="25" />
                        </C>
                        <C v="initializer_list" c="20">
                            <X v="initializer" c="26" />
                        </C>
                    </C>
                    <C v="declarator" c="11">
                        <C v="pointer" c="27">
                            <X v="type_qualifier_list" c="30" />
                            <X v="pointer" c="31" />
                        </C>
                        <X v="direct_declarator" c="28" />
                        <X v="funcPoint_declarator" c="29" />
                    </C>
                </C>
                <T v="semikolon" c="7" />
                <X v="declaration_specifier" c="8" />
            </C>
        </Called>
        <Caller>
            <C v="type_specifier">
                <C v="declaration_specifier" c="2">
                    <C v="parameter_declaration" c="7">
                        <C v="parameter_list" c="16">
                            <X v="parameter_type_list" c="17" />
                        </C>
                    </C>
                    <C v="function_definition" c="8">
                        <C v="external_declaration" c="18">
                            <T v="translation_unit" c="23" />
                        </C>
                        <C v="namespace" c="19">
                            <T v="pass" c="24" />
                            <X v="namespace" c="25" />
                            <X v="extern_compiled" c="26" />
                        </C>
                        <C v="extern_compiled" c="20">
                            <X v="namespace" c="27" />
                        </C>
                        <T v="pass" c="21" />
                        <C v="p_Block" c="22">
                            <X v="p_ifndef" c="28" />
                            <X v="p_if" c="29" />
                            <X v="p_elif" c="30" />
                            <X v="p_else" c="31" />
                            <X v="p_ifdef" c="32" />
                        </C>
                    </C>
                    <X v="prototype_parameter" c="9" />
                    <X v="function_prototype" c="10" />
                    <X v="operator" c="11" />
                    <X v="service" c="12" />
                    <X v="property" c="13" />
                    <X v="declaration" c="14" />
                    <X v="template_type" c="15" />
                </C>
                <X v="specifier_qualifier_list" c="3" />
                <X v="Owner" c="4" />
                <X v="calss_parent" c="5" />
                <X v="primary_expression" c="6" />
            </C>
        </Caller>
    </Rule>
    <Rule value="switch_expr" uses="expression" usedBy=",switch_stmt,">
        <Expression>
            <Sequence>
                <String value="switch" />
                <String value="(" />
                <Terminating_Rule value="expression" />
                <String value=")" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <UsedBy_Terminated value="switch_stmt" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="2">
                    <T v="assignment_operator" c="3" />
                    <C v="conditional_expression" c="4">
                        <C v="logical_or_expression" c="8">
                            <X v="logical_and_expression" c="11" />
                        </C>
                        <R v="conditional_expression" c="9" />
                        <R v="expression" c="10" />
                    </C>
                    <R v="assignment_expression" c="5" />
                    <C v="cast_expression" c="6">
                        <R v="cast_expression" c="12" />
                        <C v="type_name" c="13">
                            <X v="USER_TYPE" c="15" />
                            <X v="abstract_declarator" c="16" />
                            <X v="specifier_qualifier_list" c="17" />
                        </C>
                        <C v="unary_expression" c="14">
                            <X v="type_name" c="18" />
                            <T v="unary_operator" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="postfix_expression" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                    </C>
                    <R v="unary_expression" c="7" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="switch_stmt">
                <C v="statement" c="2">
                    <C v="elif_part" c="3">
                        <C v="if_stmt" c="18">
                            <X v="statement" c="19" />
                            <X v="else_part" c="20" />
                        </C>
                    </C>
                    <C v="else_part" c="4">
                        <R v="if_stmt" c="21" />
                    </C>
                    <C v="p_Block" c="5">
                        <C v="p_ifndef" c="22">
                            <X v="compilerSwitch" c="27" />
                        </C>
                        <C v="p_if" c="23">
                            <X v="compilerSwitch" c="28" />
                        </C>
                        <C v="p_elif" c="24">
                            <X v="compilerSwitch" c="29" />
                        </C>
                        <C v="p_else" c="25">
                            <X v="compilerSwitch" c="30" />
                        </C>
                        <X v="p_ifdef" c="26" />
                    </C>
                    <X v="namespace" c="6" />
                    <X v="extern_compiled" c="7" />
                    <T v="pass" c="8" />
                    <X v="compound_statement" c="9" />
                    <X v="case_part" c="10" />
                    <X v="default_part" c="11" />
                    <X v="if_part" c="12" />
                    <X v="switch_stmt" c="13" />
                    <X v="while_stmt" c="14" />
                    <X v="do_stmt" c="15" />
                    <X v="for_stmt" c="16" />
                    <X v="p_define" c="17" />
                </C>
            </C>
        </Caller>
    </Rule>
    <Rule value="switch_stmt" uses="statement,switch_expr" usedBy=",statement," recursiveUses="statement" recursiveUsedBy="statement">
        <Expression>
            <Sequence>
                <Terminating_Rule value="switch_expr" />
                <Recursive_Rule value="statement" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="switch_expr" />
            <Uses_Recursive value="statement" />
            <UsedBy_Recursive value="statement" />
        </Properties>
        <Called>
            <C v="switch_expr">
                <C v="expression" c="3">
                    <C v="assignment_expression" c="4">
                        <T v="assignment_operator" c="5" />
                        <C v="conditional_expression" c="6">
                            <X v="logical_or_expression" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="expression" c="12" />
                        </C>
                        <R v="assignment_expression" c="7" />
                        <C v="cast_expression" c="8">
                            <X v="cast_expression" c="13" />
                            <X v="type_name" c="14" />
                            <X v="unary_expression" c="15" />
                        </C>
                        <C v="unary_expression" c="9">
                            <X v="type_name" c="16" />
                            <T v="unary_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="postfix_expression" c="19" />
                            <X v="unary_expression" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="statement">
                <X v="break_stmt" c="21" />
                <X v="continue_stmt" c="22" />
                <X v="expr_stmt" c="23" />
                <X v="goto_stmt" c="24" />
                <X v="lable_stmt" c="25" />
                <X v="preprocedure" c="26" />
                <X v="return_stmt" c="27" />
                <X v="case_stmt" c="28" />
                <X v="compound_statement" c="29" />
                <X v="default_stmt" c="30" />
                <X v="do_stmt" c="31" />
                <X v="for_stmt" c="32" />
                <X v="if_stmt" c="33" />
                <X v="switch_stmt" c="34" />
                <X v="while_stmt" c="35" />
            </C>
        </Called>
        <Caller>
            <C v="statement">
                <C v="elif_part" c="2">
                    <C v="if_stmt" c="17">
                        <R v="statement" c="18" />
                        <C v="else_part" c="19">
                            <X v="if_stmt" c="20" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="3" />
                <C v="p_Block" c="4">
                    <C v="p_ifndef" c="21">
                        <C v="compilerSwitch" c="26">
                            <X v="preprocedure" c="27" />
                        </C>
                    </C>
                    <C v="p_if" c="22">
                        <R v="compilerSwitch" c="28" />
                    </C>
                    <C v="p_elif" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_else" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_ifdef" c="25" />
                </C>
                <X v="namespace" c="5" />
                <X v="extern_compiled" c="6" />
                <T v="pass" c="7" />
                <X v="compound_statement" c="8" />
                <X v="case_part" c="9" />
                <X v="default_part" c="10" />
                <X v="if_part" c="11" />
                <X v="switch_stmt" c="12" />
                <X v="while_stmt" c="13" />
                <X v="do_stmt" c="14" />
                <X v="for_stmt" c="15" />
                <X v="p_define" c="16" />
            </C>
        </Caller>
    </Rule>
    <Rule value="template_type" uses="ID,declaration_specifier" usedBy=",primary_expression,declaration_specifier,struct_declaration,Owner,calss_parent," recursiveUses="declaration_specifier" recursiveUsedBy="primary_expression">
        <Expression>
            <Sequence>
                <Terminating_Rule value="ID" />
                <Character_Single value="&lt;" />
                <ZeroOrOneOf>
                    <Sub>
                        <Sequence>
                            <Sub>
                                <Recursive_Rule value="declaration_specifier" />
                            </Sub>
                            <ZeroOrMoreOf>
                                <Sub>
                                    <Sequence>
                                        <Character_Single value="," />
                                        <Sub>
                                            <Recursive_Rule value="declaration_specifier" />
                                        </Sub>
                                    </Sequence>
                                </Sub>
                            </ZeroOrMoreOf>
                        </Sequence>
                    </Sub>
                </ZeroOrOneOf>
                <Character_Single value="&gt;" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Recursive value="declaration_specifier" />
            <UsedBy_Terminated value="declaration_specifier" />
            <UsedBy_Terminated value="struct_declaration" />
            <UsedBy_Terminated value="Owner" />
            <UsedBy_Terminated value="calss_parent" />
            <UsedBy_Recursive value="primary_expression" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <C v="declaration_specifier">
                <C v="USER_TYPE" c="6">
                    <C v="ID" c="12" />
                </C>
                <T v="storage_class_specifier" c="7" />
                <R v="template_type" c="8" />
                <T v="type_qualifier" c="9" />
                <C v="Owner" c="10">
                    <R v="ID" c="13" />
                    <R v="template_type" c="14" />
                    <C v="type_specifier" c="15">
                        <C v="struct_specifier" c="16">
                            <X v="ID" c="19" />
                            <X v="declaration" c="20" />
                        </C>
                        <C v="union_specifier" c="17">
                            <X v="ID" c="21" />
                            <X v="declaration" c="22" />
                        </C>
                        <C v="enum_specifier" c="18">
                            <X v="ID" c="23" />
                            <X v="enumerator" c="24" />
                        </C>
                    </C>
                </C>
                <R v="type_specifier" c="11" />
            </C>
        </Called>
        <Caller>
            <C v="declaration_specifier">
                <C v="parameter_declaration" c="6">
                    <C v="parameter_list" c="15">
                        <C v="parameter_type_list" c="16">
                            <X v="direct_abstract_declarator" c="17" />
                            <X v="direct_parameter_declarator" c="18" />
                        </C>
                    </C>
                </C>
                <C v="function_definition" c="7">
                    <C v="external_declaration" c="19">
                        <T v="translation_unit" c="24" />
                    </C>
                    <C v="namespace" c="20">
                        <T v="pass" c="25" />
                        <R v="namespace" c="26" />
                        <C v="extern_compiled" c="27">
                            <X v="namespace" c="28" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="21" />
                    <R v="pass" c="22" />
                    <C v="p_Block" c="23">
                        <X v="p_ifndef" c="29" />
                        <X v="p_if" c="30" />
                        <X v="p_elif" c="31" />
                        <X v="p_else" c="32" />
                        <X v="p_ifdef" c="33" />
                    </C>
                </C>
                <X v="prototype_parameter" c="8" />
                <X v="function_prototype" c="9" />
                <X v="operator" c="10" />
                <X v="service" c="11" />
                <X v="property" c="12" />
                <X v="declaration" c="13" />
                <X v="template_type" c="14" />
            </C>
            <T v="struct_declaration" />
            <C v="Owner">
                <X v="declaration_specifier" c="34" />
                <X v="owned_ID" c="35" />
                <X v="calss_parent" c="36" />
                <X v="declarator_prp" c="37" />
                <X v="primary_expression" c="38" />
            </C>
            <C v="calss_parent">
                <X v="class_definition" c="39" />
            </C>
            <C v="primary_expression">
                <X v="postfix_expression" c="40" />
            </C>
        </Caller>
    </Rule>
    <Rule value="translation_unit" uses="external_declaration" usedBy="">
        <Expression>
            <OneOrMoreOf>
                <Terminating_Rule value="external_declaration" />
            </OneOrMoreOf>
        </Expression>
        <Properties leafLevel="" rootLevel="0" characterLevel="phrased">
            <Uses_Terminated value="external_declaration" />
        </Properties>
        <Called>
            <C v="external_declaration">
                <C v="class_definition" c="2">
                    <C v="ID" c="7">
                        <C v="NON_ID" c="11">
                            <T v="not_reseved" c="12" />
                            <T v="reserved" c="13" />
                        </C>
                    </C>
                    <C v="calss_parent" c="8">
                        <R v="ID" c="14" />
                        <C v="Owner" c="15">
                            <X v="ID" c="18" />
                            <X v="template_type" c="19" />
                            <X v="type_specifier" c="20" />
                        </C>
                        <C v="template_type" c="16">
                            <X v="ID" c="21" />
                            <X v="declaration_specifier" c="22" />
                        </C>
                        <C v="type_specifier" c="17">
                            <X v="struct_specifier" c="23" />
                            <X v="union_specifier" c="24" />
                            <X v="enum_specifier" c="25" />
                        </C>
                    </C>
                    <T v="semikolon" c="9" />
                    <C v="class_content" c="10">
                        <C v="protected" c="26">
                            <X v="methode" c="29" />
                            <X v="preprocedure" c="30" />
                            <X v="property" c="31" />
                            <X v="methode_definition" c="32" />
                        </C>
                        <X v="public" c="27" />
                        <X v="private" c="28" />
                    </C>
                </C>
                <X v="declaration" c="3" />
                <X v="function_definition" c="4" />
                <X v="function_prototype" c="5" />
                <X v="preprocedure" c="6" />
            </C>
        </Called>
        <Caller />
    </Rule>
    <Rule value="type_name" uses="USER_TYPE,abstract_declarator,specifier_qualifier_list" usedBy=",unary_expression,cast_expression," recursiveUses="abstract_declarator,specifier_qualifier_list" recursiveUsedBy="unary_expression">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <Recursive_Rule value="specifier_qualifier_list" />
                        <Recursive_Rule value="abstract_declarator" />
                    </Sequence>
                </Sub>
                <Recursive_Rule value="specifier_qualifier_list" />
                <Terminating_Rule value="USER_TYPE" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="USER_TYPE" />
            <Uses_Recursive value="abstract_declarator" />
            <Uses_Recursive value="specifier_qualifier_list" />
            <UsedBy_Terminated value="cast_expression" />
            <UsedBy_Recursive value="unary_expression" />
        </Properties>
        <Called>
            <C v="USER_TYPE">
                <C v="ID" c="4">
                    <C v="NON_ID" c="5">
                        <T v="not_reseved" c="6" />
                        <T v="reserved" c="7" />
                    </C>
                </C>
            </C>
            <C v="abstract_declarator">
                <C v="pointer" c="8">
                    <C v="type_qualifier_list" c="10">
                        <T v="type_qualifier" c="12" />
                    </C>
                    <R v="pointer" c="11" />
                </C>
                <C v="direct_abstract_declarator" c="9">
                    <C v="constant_expression" c="13">
                        <C v="conditional_expression" c="16">
                            <X v="logical_or_expression" c="17" />
                            <X v="conditional_expression" c="18" />
                            <X v="expression" c="19" />
                        </C>
                    </C>
                    <C v="parameter_type_list" c="14">
                        <C v="parameter_list" c="20">
                            <X v="parameter_declaration" c="21" />
                        </C>
                    </C>
                    <R v="abstract_declarator" c="15" />
                </C>
            </C>
            <C v="specifier_qualifier_list">
                <C v="USER_TYPE" c="22" />
                <T v="type_qualifier" c="23" />
                <R v="specifier_qualifier_list" c="24" />
                <C v="type_specifier" c="25">
                    <C v="struct_specifier" c="26">
                        <X v="ID" c="29" />
                        <X v="declaration" c="30" />
                    </C>
                    <X v="union_specifier" c="27" />
                    <X v="enum_specifier" c="28" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="cast_expression">
                <C v="assignment_expression" c="3">
                    <C v="initializer" c="8">
                        <C v="init_declarator" c="11">
                            <X v="declaration" c="13" />
                            <X v="prototype_parameter" c="14" />
                        </C>
                        <C v="initializer_list" c="12">
                            <X v="initializer" c="15" />
                        </C>
                    </C>
                    <C v="argument_expression_list" c="9">
                        <C v="postfix_expression_second" c="16">
                            <X v="postfix_expression" c="17" />
                        </C>
                    </C>
                    <R v="assignment_expression" c="10" />
                </C>
                <C v="parameter_declaration" c="4">
                    <C v="parameter_list" c="18">
                        <C v="parameter_type_list" c="19">
                            <X v="direct_abstract_declarator" c="20" />
                            <X v="direct_parameter_declarator" c="21" />
                        </C>
                    </C>
                </C>
                <C v="unary_expression" c="5">
                    <C v="element_initializer" c="22">
                        <C v="function_definition" c="27">
                            <X v="external_declaration" c="28" />
                            <X v="namespace" c="29" />
                            <X v="extern_compiled" c="30" />
                            <T v="pass" c="31" />
                            <X v="p_Block" c="32" />
                        </C>
                    </C>
                    <X v="unary_expression" c="23" />
                    <X v="cast_expression" c="24" />
                    <X v="assignment_expression" c="25" />
                    <X v="parameter_declaration" c="26" />
                </C>
                <X v="cast_expression" c="6" />
                <X v="multiplicative_expression" c="7" />
            </C>
            <C v="unary_expression" />
        </Caller>
    </Rule>
    <Rule value="type_qualifier" uses="" usedBy=",declaration_specifier,specifier_qualifier_list,funcPoint_declarator,direct_declarator,type_qualifier_list,function_prototype,operator,constructor,destructor,service,">
        <Expression>
            <OrInclusive>
                <String value="const" />
                <String value="volatile" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="declaration_specifier" />
            <UsedBy_Terminated value="specifier_qualifier_list" />
            <UsedBy_Terminated value="funcPoint_declarator" />
            <UsedBy_Terminated value="direct_declarator" />
            <UsedBy_Terminated value="type_qualifier_list" />
            <UsedBy_Terminated value="function_prototype" />
            <UsedBy_Terminated value="operator" />
            <UsedBy_Terminated value="constructor" />
            <UsedBy_Terminated value="destructor" />
            <UsedBy_Terminated value="service" />
        </Properties>
        <Called />
        <Caller>
            <C v="declaration_specifier">
                <C v="parameter_declaration" c="11">
                    <C v="parameter_list" c="20">
                        <C v="parameter_type_list" c="21">
                            <X v="direct_abstract_declarator" c="22" />
                            <X v="direct_parameter_declarator" c="23" />
                        </C>
                    </C>
                </C>
                <C v="function_definition" c="12">
                    <C v="external_declaration" c="24">
                        <T v="translation_unit" c="29" />
                    </C>
                    <C v="namespace" c="25">
                        <T v="pass" c="30" />
                        <X v="namespace" c="31" />
                        <X v="extern_compiled" c="32" />
                    </C>
                    <X v="extern_compiled" c="26" />
                    <T v="pass" c="27" />
                    <X v="p_Block" c="28" />
                </C>
                <X v="prototype_parameter" c="13" />
                <X v="function_prototype" c="14" />
                <X v="operator" c="15" />
                <X v="service" c="16" />
                <X v="property" c="17" />
                <X v="declaration" c="18" />
                <X v="template_type" c="19" />
            </C>
            <C v="specifier_qualifier_list">
                <T v="struct_declaration" c="33" />
                <X v="specifier_qualifier_list" c="34" />
                <X v="type_name" c="35" />
            </C>
            <C v="funcPoint_declarator">
                <X v="declarator" c="36" />
            </C>
            <C v="direct_declarator">
                <X v="funcPoint_declarator" c="37" />
                <X v="declarator" c="38" />
            </C>
            <C v="type_qualifier_list">
                <X v="pointer" c="39" />
            </C>
            <C v="function_prototype">
                <X v="p_Block" c="40" />
                <X v="external_declaration" c="41" />
                <X v="friend" c="42" />
                <X v="namespace" c="43" />
                <X v="extern_compiled" c="44" />
                <T v="pass" c="45" />
            </C>
            <C v="operator">
                <X v="methode" c="46" />
                <X v="methode_definition" c="47" />
            </C>
            <C v="constructor">
                <X v="methode" c="48" />
                <X v="methode_definition" c="49" />
            </C>
            <C v="destructor">
                <X v="methode" c="50" />
                <X v="methode_definition" c="51" />
            </C>
            <C v="service">
                <X v="methode" c="52" />
                <X v="methode_definition" c="53" />
            </C>
        </Caller>
    </Rule>
    <Rule value="type_qualifier_list" uses="type_qualifier" usedBy=",pointer,">
        <Expression>
            <OneOrMoreOf>
                <Terminating_Rule value="type_qualifier" />
            </OneOrMoreOf>
        </Expression>
        <Properties leafLevel="1" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="type_qualifier" />
            <UsedBy_Terminated value="pointer" />
        </Properties>
        <Called>
            <T v="type_qualifier" />
        </Called>
        <Caller>
            <C v="pointer">
                <C v="declarator" c="2">
                    <C v="struct_declarator" c="6">
                        <C v="struct_declarator_list" c="11">
                            <T v="struct_declaration" c="12" />
                        </C>
                    </C>
                    <C v="parameter_declaration" c="7">
                        <C v="parameter_list" c="13">
                            <X v="parameter_type_list" c="14" />
                        </C>
                    </C>
                    <C v="function_definition" c="8">
                        <C v="external_declaration" c="15">
                            <T v="translation_unit" c="20" />
                        </C>
                        <C v="namespace" c="16">
                            <T v="pass" c="21" />
                            <X v="namespace" c="22" />
                            <X v="extern_compiled" c="23" />
                        </C>
                        <C v="extern_compiled" c="17">
                            <X v="namespace" c="24" />
                        </C>
                        <T v="pass" c="18" />
                        <C v="p_Block" c="19">
                            <X v="p_ifndef" c="25" />
                            <X v="p_if" c="26" />
                            <X v="p_elif" c="27" />
                            <X v="p_else" c="28" />
                            <X v="p_ifdef" c="29" />
                        </C>
                    </C>
                    <C v="init_declarator" c="9">
                        <X v="declaration" c="30" />
                        <X v="prototype_parameter" c="31" />
                    </C>
                    <X v="direct_parameter_declarator" c="10" />
                </C>
                <X v="abstract_declarator" c="3" />
                <X v="declarator_prp" c="4" />
                <X v="pointer" c="5" />
            </C>
        </Caller>
    </Rule>
    <Rule value="type_specifier" uses="enum_specifier,struct_specifier,union_specifier" usedBy=",primary_expression,declaration_specifier,specifier_qualifier_list,Owner,calss_parent," recursiveUses="enum_specifier" recursiveUsedBy="primary_expression">
        <Expression>
            <OrInclusive>
                <String value="void" />
                <Sub>
                    <Sequence>
                        <ZeroOrOneOf>
                            <Sub>
                                <OrInclusive>
                                    <String value="signed" />
                                    <String value="unsigned" />
                                </OrInclusive>
                            </Sub>
                        </ZeroOrOneOf>
                        <Sub>
                            <OrInclusive>
                                <String value="char" />
                                <String value="short" />
                                <String value="int" />
                                <String value="long" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
                <String value="float" />
                <String value="double" />
                <String value="signed" />
                <String value="unsigned" />
                <Terminating_Rule value="struct_specifier" />
                <Terminating_Rule value="union_specifier" />
                <Recursive_Rule value="enum_specifier" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="struct_specifier" />
            <Uses_Terminated value="union_specifier" />
            <Uses_Recursive value="enum_specifier" />
            <UsedBy_Terminated value="declaration_specifier" />
            <UsedBy_Terminated value="specifier_qualifier_list" />
            <UsedBy_Terminated value="Owner" />
            <UsedBy_Terminated value="calss_parent" />
            <UsedBy_Recursive value="primary_expression" />
        </Properties>
        <Called>
            <C v="struct_specifier">
                <C v="ID" c="4">
                    <C v="NON_ID" c="6">
                        <T v="not_reseved" c="7" />
                        <T v="reserved" c="8" />
                    </C>
                </C>
                <C v="declaration" c="5">
                    <C v="init_declarator" c="9">
                        <C v="Number" c="12">
                            <T v="CONSTANT_CHAR" c="15" />
                            <T v="CONSTANT_FLT1" c="16" />
                            <T v="CONSTANT_FLT2" c="17" />
                            <T v="CONSTANT_FLT3" c="18" />
                            <T v="CONSTANT_HEX" c="19" />
                            <T v="CONSTANT_INT0" c="20" />
                            <T v="CONSTANT_INT1" c="21" />
                        </C>
                        <C v="initializer" c="13">
                            <X v="assignment_expression" c="22" />
                            <X v="initializer_list" c="23" />
                        </C>
                        <C v="declarator" c="14">
                            <X v="pointer" c="24" />
                            <X v="direct_declarator" c="25" />
                            <X v="funcPoint_declarator" c="26" />
                        </C>
                    </C>
                    <T v="semikolon" c="10" />
                    <C v="declaration_specifier" c="11">
                        <X v="USER_TYPE" c="27" />
                        <T v="storage_class_specifier" c="28" />
                        <X v="template_type" c="29" />
                        <T v="type_qualifier" c="30" />
                        <X v="Owner" c="31" />
                        <X v="type_specifier" c="32" />
                    </C>
                </C>
            </C>
            <C v="union_specifier">
                <X v="ID" c="33" />
                <X v="declaration" c="34" />
            </C>
            <C v="enum_specifier">
                <X v="ID" c="35" />
                <X v="enumerator" c="36" />
            </C>
        </Called>
        <Caller>
            <C v="declaration_specifier">
                <C v="parameter_declaration" c="6">
                    <C v="parameter_list" c="15">
                        <C v="parameter_type_list" c="16">
                            <X v="direct_abstract_declarator" c="17" />
                            <X v="direct_parameter_declarator" c="18" />
                        </C>
                    </C>
                </C>
                <C v="function_definition" c="7">
                    <C v="external_declaration" c="19">
                        <T v="translation_unit" c="24" />
                    </C>
                    <C v="namespace" c="20">
                        <T v="pass" c="25" />
                        <R v="namespace" c="26" />
                        <C v="extern_compiled" c="27">
                            <X v="namespace" c="28" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="21" />
                    <R v="pass" c="22" />
                    <C v="p_Block" c="23">
                        <X v="p_ifndef" c="29" />
                        <X v="p_if" c="30" />
                        <X v="p_elif" c="31" />
                        <X v="p_else" c="32" />
                        <X v="p_ifdef" c="33" />
                    </C>
                </C>
                <X v="prototype_parameter" c="8" />
                <X v="function_prototype" c="9" />
                <X v="operator" c="10" />
                <X v="service" c="11" />
                <X v="property" c="12" />
                <X v="declaration" c="13" />
                <X v="template_type" c="14" />
            </C>
            <C v="specifier_qualifier_list">
                <T v="struct_declaration" c="34" />
                <X v="specifier_qualifier_list" c="35" />
                <X v="type_name" c="36" />
            </C>
            <C v="Owner">
                <X v="declaration_specifier" c="37" />
                <X v="owned_ID" c="38" />
                <X v="calss_parent" c="39" />
                <X v="declarator_prp" c="40" />
                <X v="primary_expression" c="41" />
            </C>
            <C v="calss_parent">
                <X v="class_definition" c="42" />
            </C>
            <C v="primary_expression">
                <X v="postfix_expression" c="43" />
            </C>
        </Caller>
    </Rule>
    <Rule value="unary_expression" uses="cast_expression,postfix_expression,type_name,unary_expression,unary_operator" usedBy=",unary_expression,cast_expression,assignment_expression,parameter_declaration,element_initializer," recursiveUses="cast_expression,postfix_expression,unary_expression" recursiveUsedBy="unary_expression,cast_expression,assignment_expression,parameter_declaration">
        <Expression>
            <OrInclusive>
                <Recursive_Rule value="postfix_expression" />
                <Sub>
                    <Sequence>
                        <String value="++" />
                        <Recursive_Rule value="unary_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="--" />
                        <Recursive_Rule value="unary_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="unary_operator" />
                        <Recursive_Rule value="cast_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="sizeof" />
                        <Recursive_Rule value="unary_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="sizeof" />
                        <String value="(" />
                        <Terminating_Rule value="type_name" />
                        <String value=")" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="type_name" />
            <Uses_Terminated value="unary_operator" />
            <Uses_Recursive value="cast_expression" />
            <Uses_Recursive value="postfix_expression" />
            <Uses_Recursive value="unary_expression" />
            <UsedBy_Terminated value="element_initializer" />
            <UsedBy_Recursive value="unary_expression" />
            <UsedBy_Recursive value="cast_expression" />
            <UsedBy_Recursive value="assignment_expression" />
            <UsedBy_Recursive value="parameter_declaration" />
        </Properties>
        <Called>
            <C v="type_name">
                <C v="USER_TYPE" c="6">
                    <C v="ID" c="9">
                        <C v="NON_ID" c="10">
                            <T v="not_reseved" c="11" />
                            <T v="reserved" c="12" />
                        </C>
                    </C>
                </C>
                <C v="abstract_declarator" c="7">
                    <C v="pointer" c="13">
                        <C v="type_qualifier_list" c="15">
                            <T v="type_qualifier" c="17" />
                        </C>
                        <R v="pointer" c="16" />
                    </C>
                    <C v="direct_abstract_declarator" c="14">
                        <C v="constant_expression" c="18">
                            <X v="conditional_expression" c="21" />
                        </C>
                        <C v="parameter_type_list" c="19">
                            <X v="parameter_list" c="22" />
                        </C>
                        <R v="abstract_declarator" c="20" />
                    </C>
                </C>
                <C v="specifier_qualifier_list" c="8">
                    <R v="USER_TYPE" c="23" />
                    <T v="type_qualifier" c="24" />
                    <R v="specifier_qualifier_list" c="25" />
                    <C v="type_specifier" c="26">
                        <C v="struct_specifier" c="27">
                            <X v="ID" c="30" />
                            <X v="declaration" c="31" />
                        </C>
                        <X v="union_specifier" c="28" />
                        <X v="enum_specifier" c="29" />
                    </C>
                </C>
            </C>
            <T v="unary_operator" />
            <C v="cast_expression">
                <X v="cast_expression" c="32" />
                <X v="type_name" c="33" />
                <X v="unary_expression" c="34" />
            </C>
            <C v="postfix_expression">
                <X v="primary_expression" c="35" />
                <X v="postfix_expression_second" c="36" />
            </C>
            <C v="unary_expression" />
        </Called>
        <Caller>
            <C v="element_initializer">
                <C v="function_definition" c="6">
                    <C v="external_declaration" c="7">
                        <T v="translation_unit" c="12" />
                    </C>
                    <C v="namespace" c="8">
                        <T v="pass" c="13" />
                        <R v="namespace" c="14" />
                        <C v="extern_compiled" c="15">
                            <X v="namespace" c="16" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="9" />
                    <R v="pass" c="10" />
                    <C v="p_Block" c="11">
                        <C v="p_ifndef" c="17">
                            <X v="compilerSwitch" c="22" />
                        </C>
                        <C v="p_if" c="18">
                            <X v="compilerSwitch" c="23" />
                        </C>
                        <C v="p_elif" c="19">
                            <X v="compilerSwitch" c="24" />
                        </C>
                        <C v="p_else" c="20">
                            <X v="compilerSwitch" c="25" />
                        </C>
                        <C v="p_ifdef" c="21">
                            <X v="compilerSwitch" c="26" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="unary_expression" />
            <C v="cast_expression">
                <X v="assignment_expression" c="27" />
                <X v="parameter_declaration" c="28" />
                <X v="unary_expression" c="29" />
                <X v="cast_expression" c="30" />
                <X v="multiplicative_expression" c="31" />
            </C>
            <C v="assignment_expression">
                <X v="initializer" c="32" />
                <X v="argument_expression_list" c="33" />
                <X v="assignment_expression" c="34" />
            </C>
            <C v="parameter_declaration">
                <X v="parameter_list" c="35" />
            </C>
        </Caller>
    </Rule>
    <Rule value="unary_expression" uses="cast_expression,postfix_expression,type_name,unary_expression,unary_operator" usedBy=",unary_expression,cast_expression,assignment_expression,parameter_declaration,element_initializer," recursiveUses="cast_expression,postfix_expression,unary_expression" recursiveUsedBy="unary_expression,cast_expression,assignment_expression,parameter_declaration">
        <Expression>
            <OrInclusive>
                <Recursive_Rule value="postfix_expression" />
                <Sub>
                    <Sequence>
                        <String value="++" />
                        <Recursive_Rule value="unary_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="--" />
                        <Recursive_Rule value="unary_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <Terminating_Rule value="unary_operator" />
                        <Recursive_Rule value="cast_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="sizeof" />
                        <Recursive_Rule value="unary_expression" />
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="sizeof" />
                        <String value="(" />
                        <Terminating_Rule value="type_name" />
                        <String value=")" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="type_name" />
            <Uses_Terminated value="unary_operator" />
            <Uses_Recursive value="cast_expression" />
            <Uses_Recursive value="postfix_expression" />
            <Uses_Recursive value="unary_expression" />
            <UsedBy_Terminated value="element_initializer" />
            <UsedBy_Recursive value="unary_expression" />
            <UsedBy_Recursive value="cast_expression" />
            <UsedBy_Recursive value="assignment_expression" />
            <UsedBy_Recursive value="parameter_declaration" />
        </Properties>
        <Called>
            <C v="type_name">
                <C v="USER_TYPE" c="6">
                    <C v="ID" c="9">
                        <C v="NON_ID" c="10">
                            <T v="not_reseved" c="11" />
                            <T v="reserved" c="12" />
                        </C>
                    </C>
                </C>
                <C v="abstract_declarator" c="7">
                    <C v="pointer" c="13">
                        <C v="type_qualifier_list" c="15">
                            <T v="type_qualifier" c="17" />
                        </C>
                        <R v="pointer" c="16" />
                    </C>
                    <C v="direct_abstract_declarator" c="14">
                        <C v="constant_expression" c="18">
                            <X v="conditional_expression" c="21" />
                        </C>
                        <C v="parameter_type_list" c="19">
                            <X v="parameter_list" c="22" />
                        </C>
                        <R v="abstract_declarator" c="20" />
                    </C>
                </C>
                <C v="specifier_qualifier_list" c="8">
                    <R v="USER_TYPE" c="23" />
                    <T v="type_qualifier" c="24" />
                    <R v="specifier_qualifier_list" c="25" />
                    <C v="type_specifier" c="26">
                        <C v="struct_specifier" c="27">
                            <X v="ID" c="30" />
                            <X v="declaration" c="31" />
                        </C>
                        <X v="union_specifier" c="28" />
                        <X v="enum_specifier" c="29" />
                    </C>
                </C>
            </C>
            <T v="unary_operator" />
            <C v="cast_expression">
                <X v="cast_expression" c="32" />
                <X v="type_name" c="33" />
                <X v="unary_expression" c="34" />
            </C>
            <C v="postfix_expression">
                <X v="primary_expression" c="35" />
                <X v="postfix_expression_second" c="36" />
            </C>
            <C v="unary_expression" />
        </Called>
        <Caller>
            <C v="element_initializer">
                <C v="function_definition" c="6">
                    <C v="external_declaration" c="7">
                        <T v="translation_unit" c="12" />
                    </C>
                    <C v="namespace" c="8">
                        <T v="pass" c="13" />
                        <R v="namespace" c="14" />
                        <C v="extern_compiled" c="15">
                            <X v="namespace" c="16" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="9" />
                    <R v="pass" c="10" />
                    <C v="p_Block" c="11">
                        <C v="p_ifndef" c="17">
                            <X v="compilerSwitch" c="22" />
                        </C>
                        <C v="p_if" c="18">
                            <X v="compilerSwitch" c="23" />
                        </C>
                        <C v="p_elif" c="19">
                            <X v="compilerSwitch" c="24" />
                        </C>
                        <C v="p_else" c="20">
                            <X v="compilerSwitch" c="25" />
                        </C>
                        <C v="p_ifdef" c="21">
                            <X v="compilerSwitch" c="26" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="unary_expression" />
            <C v="cast_expression">
                <X v="assignment_expression" c="27" />
                <X v="parameter_declaration" c="28" />
                <X v="unary_expression" c="29" />
                <X v="cast_expression" c="30" />
                <X v="multiplicative_expression" c="31" />
            </C>
            <C v="assignment_expression">
                <X v="initializer" c="32" />
                <X v="argument_expression_list" c="33" />
                <X v="assignment_expression" c="34" />
            </C>
            <C v="parameter_declaration">
                <X v="parameter_list" c="35" />
            </C>
        </Caller>
    </Rule>
    <Rule value="unary_operator" uses="" usedBy=",unary_expression,">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Exclusion>
                        <First>
                            <Character_Single value="&amp;" />
                        </First>
                        <Second>
                            <Sub>
                                <String value="&amp;&amp;" />
                            </Sub>
                        </Second>
                    </Exclusion>
                </Sub>
                <String value="*" />
                <String value="+" />
                <String value="-" />
                <String value="~" />
                <String value="!" />
                <String value="not" />
            </OrInclusive>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="unary_expression" />
        </Properties>
        <Called />
        <Caller>
            <C v="unary_expression">
                <C v="element_initializer" c="2">
                    <C v="function_definition" c="7">
                        <C v="external_declaration" c="8">
                            <T v="translation_unit" c="13" />
                        </C>
                        <C v="namespace" c="9">
                            <T v="pass" c="14" />
                            <X v="namespace" c="15" />
                            <X v="extern_compiled" c="16" />
                        </C>
                        <C v="extern_compiled" c="10">
                            <X v="namespace" c="17" />
                        </C>
                        <T v="pass" c="11" />
                        <C v="p_Block" c="12">
                            <X v="p_ifndef" c="18" />
                            <X v="p_if" c="19" />
                            <X v="p_elif" c="20" />
                            <X v="p_else" c="21" />
                            <X v="p_ifdef" c="22" />
                        </C>
                    </C>
                </C>
                <R v="unary_expression" c="3" />
                <C v="cast_expression" c="4">
                    <C v="assignment_expression" c="23">
                        <X v="initializer" c="28" />
                        <X v="argument_expression_list" c="29" />
                        <X v="assignment_expression" c="30" />
                    </C>
                    <X v="parameter_declaration" c="24" />
                    <X v="unary_expression" c="25" />
                    <X v="cast_expression" c="26" />
                    <X v="multiplicative_expression" c="27" />
                </C>
                <X v="assignment_expression" c="5" />
                <X v="parameter_declaration" c="6" />
            </C>
        </Caller>
    </Rule>
    <Rule value="unary_operator" uses="" usedBy=",unary_expression,">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Exclusion>
                        <First>
                            <Character_Single value="&amp;" />
                        </First>
                        <Second>
                            <Sub>
                                <String value="&amp;&amp;" />
                            </Sub>
                        </Second>
                    </Exclusion>
                </Sub>
                <String value="*" />
                <String value="+" />
                <String value="-" />
                <String value="~" />
                <String value="!" />
                <String value="not" />
                <Sub>
                    <Sequence>
                        <String value="new" />
                        <ZeroOrOneOf>
                            <Sub>
                                <Sequence>
                                    <String value="[" />
                                    <String value="]" />
                                </Sequence>
                            </Sub>
                        </ZeroOrOneOf>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="delete" />
                        <ZeroOrOneOf>
                            <Sub>
                                <Sequence>
                                    <String value="[" />
                                    <String value="]" />
                                </Sequence>
                            </Sub>
                        </ZeroOrOneOf>
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="0" rootLevel="" characterLevel="phrased">
            <UsedBy_Terminated value="unary_expression" />
        </Properties>
        <Called />
        <Caller>
            <C v="unary_expression">
                <C v="element_initializer" c="2">
                    <C v="function_definition" c="7">
                        <C v="external_declaration" c="8">
                            <T v="translation_unit" c="13" />
                        </C>
                        <C v="namespace" c="9">
                            <T v="pass" c="14" />
                            <X v="namespace" c="15" />
                            <X v="extern_compiled" c="16" />
                        </C>
                        <C v="extern_compiled" c="10">
                            <X v="namespace" c="17" />
                        </C>
                        <T v="pass" c="11" />
                        <C v="p_Block" c="12">
                            <X v="p_ifndef" c="18" />
                            <X v="p_if" c="19" />
                            <X v="p_elif" c="20" />
                            <X v="p_else" c="21" />
                            <X v="p_ifdef" c="22" />
                        </C>
                    </C>
                </C>
                <R v="unary_expression" c="3" />
                <C v="cast_expression" c="4">
                    <C v="assignment_expression" c="23">
                        <X v="initializer" c="28" />
                        <X v="argument_expression_list" c="29" />
                        <X v="assignment_expression" c="30" />
                    </C>
                    <X v="parameter_declaration" c="24" />
                    <X v="unary_expression" c="25" />
                    <X v="cast_expression" c="26" />
                    <X v="multiplicative_expression" c="27" />
                </C>
                <X v="assignment_expression" c="5" />
                <X v="parameter_declaration" c="6" />
            </C>
        </Caller>
    </Rule>
    <Rule value="union_specifier" uses="ID,declaration" usedBy=",type_specifier," recursiveUses="declaration" recursiveUsedBy="type_specifier">
        <Expression>
            <OrInclusive>
                <Sub>
                    <Sequence>
                        <String value="union" />
                        <ZeroOrOneOf>
                            <Terminating_Rule value="ID" />
                        </ZeroOrOneOf>
                        <Sub>
                            <OrInclusive>
                                <String value="{" />
                                <String value="&lt;%" />
                            </OrInclusive>
                        </Sub>
                        <OneOrMoreOf>
                            <Recursive_Rule value="declaration" />
                        </OneOrMoreOf>
                        <Sub>
                            <OrInclusive>
                                <String value="}" />
                                <String value="%&gt;" />
                            </OrInclusive>
                        </Sub>
                    </Sequence>
                </Sub>
                <Sub>
                    <Sequence>
                        <String value="union" />
                        <Terminating_Rule value="ID" />
                    </Sequence>
                </Sub>
            </OrInclusive>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Recursive value="declaration" />
            <UsedBy_Recursive value="type_specifier" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <C v="declaration">
                <C v="init_declarator" c="6">
                    <C v="Number" c="9">
                        <T v="CONSTANT_CHAR" c="12" />
                        <T v="CONSTANT_FLT1" c="13" />
                        <T v="CONSTANT_FLT2" c="14" />
                        <T v="CONSTANT_FLT3" c="15" />
                        <T v="CONSTANT_HEX" c="16" />
                        <T v="CONSTANT_INT0" c="17" />
                        <T v="CONSTANT_INT1" c="18" />
                    </C>
                    <C v="initializer" c="10">
                        <C v="assignment_expression" c="19">
                            <T v="assignment_operator" c="21" />
                            <X v="conditional_expression" c="22" />
                            <X v="assignment_expression" c="23" />
                            <X v="cast_expression" c="24" />
                            <X v="unary_expression" c="25" />
                        </C>
                        <C v="initializer_list" c="20">
                            <X v="initializer" c="26" />
                        </C>
                    </C>
                    <C v="declarator" c="11">
                        <C v="pointer" c="27">
                            <X v="type_qualifier_list" c="30" />
                            <X v="pointer" c="31" />
                        </C>
                        <X v="direct_declarator" c="28" />
                        <X v="funcPoint_declarator" c="29" />
                    </C>
                </C>
                <T v="semikolon" c="7" />
                <X v="declaration_specifier" c="8" />
            </C>
        </Called>
        <Caller>
            <C v="type_specifier">
                <C v="declaration_specifier" c="2">
                    <C v="parameter_declaration" c="7">
                        <C v="parameter_list" c="16">
                            <X v="parameter_type_list" c="17" />
                        </C>
                    </C>
                    <C v="function_definition" c="8">
                        <C v="external_declaration" c="18">
                            <T v="translation_unit" c="23" />
                        </C>
                        <C v="namespace" c="19">
                            <T v="pass" c="24" />
                            <X v="namespace" c="25" />
                            <X v="extern_compiled" c="26" />
                        </C>
                        <C v="extern_compiled" c="20">
                            <X v="namespace" c="27" />
                        </C>
                        <T v="pass" c="21" />
                        <C v="p_Block" c="22">
                            <X v="p_ifndef" c="28" />
                            <X v="p_if" c="29" />
                            <X v="p_elif" c="30" />
                            <X v="p_else" c="31" />
                            <X v="p_ifdef" c="32" />
                        </C>
                    </C>
                    <X v="prototype_parameter" c="9" />
                    <X v="function_prototype" c="10" />
                    <X v="operator" c="11" />
                    <X v="service" c="12" />
                    <X v="property" c="13" />
                    <X v="declaration" c="14" />
                    <X v="template_type" c="15" />
                </C>
                <X v="specifier_qualifier_list" c="3" />
                <X v="Owner" c="4" />
                <X v="calss_parent" c="5" />
                <X v="primary_expression" c="6" />
            </C>
        </Caller>
    </Rule>
    <Rule value="USER_TYPE" uses="ID" usedBy=",declaration_specifier,specifier_qualifier_list,type_name,struct_declaration,">
        <Expression>
            <Terminating_Rule value="ID" />
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <UsedBy_Terminated value="declaration_specifier" />
            <UsedBy_Terminated value="specifier_qualifier_list" />
            <UsedBy_Terminated value="type_name" />
            <UsedBy_Terminated value="struct_declaration" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="2">
                    <T v="not_reseved" c="3" />
                    <T v="reserved" c="4" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="declaration_specifier">
                <C v="parameter_declaration" c="5">
                    <C v="parameter_list" c="14">
                        <C v="parameter_type_list" c="15">
                            <X v="direct_abstract_declarator" c="16" />
                            <X v="direct_parameter_declarator" c="17" />
                        </C>
                    </C>
                </C>
                <C v="function_definition" c="6">
                    <C v="external_declaration" c="18">
                        <T v="translation_unit" c="23" />
                    </C>
                    <C v="namespace" c="19">
                        <T v="pass" c="24" />
                        <R v="namespace" c="25" />
                        <C v="extern_compiled" c="26">
                            <X v="namespace" c="27" />
                        </C>
                    </C>
                    <R v="extern_compiled" c="20" />
                    <R v="pass" c="21" />
                    <C v="p_Block" c="22">
                        <X v="p_ifndef" c="28" />
                        <X v="p_if" c="29" />
                        <X v="p_elif" c="30" />
                        <X v="p_else" c="31" />
                        <X v="p_ifdef" c="32" />
                    </C>
                </C>
                <X v="prototype_parameter" c="7" />
                <X v="function_prototype" c="8" />
                <X v="operator" c="9" />
                <X v="service" c="10" />
                <X v="property" c="11" />
                <X v="declaration" c="12" />
                <X v="template_type" c="13" />
            </C>
            <C v="specifier_qualifier_list">
                <T v="struct_declaration" c="33" />
                <X v="specifier_qualifier_list" c="34" />
                <X v="type_name" c="35" />
            </C>
            <C v="type_name">
                <X v="cast_expression" c="36" />
                <X v="unary_expression" c="37" />
            </C>
            <T v="struct_declaration" />
        </Caller>
    </Rule>
    <Rule value="using_namespace" uses="ID,semikolon" usedBy=",p_Block,namespace,extern_compiled,pass,">
        <Expression>
            <Sequence>
                <String value="using" />
                <ZeroOrOneOf>
                    <Sub>
                        <String value="namespace" />
                    </Sub>
                </ZeroOrOneOf>
                <Terminating_Rule value="ID" />
                <ZeroOrMoreOf>
                    <Sub>
                        <Sequence>
                            <Character_Single value=":" />
                            <Character_Single value=":" />
                            <Terminating_Rule value="ID" />
                        </Sequence>
                    </Sub>
                </ZeroOrMoreOf>
                <Terminating_Rule value="semikolon" />
            </Sequence>
        </Expression>
        <Properties leafLevel="3" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="ID" />
            <Uses_Terminated value="semikolon" />
            <UsedBy_Terminated value="p_Block" />
            <UsedBy_Terminated value="namespace" />
            <UsedBy_Terminated value="extern_compiled" />
            <UsedBy_Terminated value="pass" />
        </Properties>
        <Called>
            <C v="ID">
                <C v="NON_ID" c="3">
                    <T v="not_reseved" c="4" />
                    <T v="reserved" c="5" />
                </C>
            </C>
            <T v="semikolon" />
        </Called>
        <Caller>
            <C v="p_Block">
                <C v="p_ifndef" c="5">
                    <C v="compilerSwitch" c="10">
                        <C v="preprocedure" c="11">
                            <X v="compound_statement" c="12" />
                            <X v="p_Block" c="13" />
                            <X v="external_declaration" c="14" />
                            <X v="public" c="15" />
                            <X v="protected" c="16" />
                            <X v="private" c="17" />
                            <X v="namespace" c="18" />
                            <X v="extern_compiled" c="19" />
                            <T v="pass" c="20" />
                            <X v="statement" c="21" />
                        </C>
                    </C>
                </C>
                <C v="p_if" c="6">
                    <R v="compilerSwitch" c="22" />
                </C>
                <C v="p_elif" c="7">
                    <R v="compilerSwitch" c="23" />
                </C>
                <C v="p_else" c="8">
                    <R v="compilerSwitch" c="24" />
                </C>
                <C v="p_ifdef" c="9">
                    <R v="compilerSwitch" c="25" />
                </C>
            </C>
            <C v="namespace">
                <T v="pass" c="26" />
                <R v="namespace" c="27" />
                <C v="extern_compiled" c="28">
                    <R v="namespace" c="29" />
                </C>
            </C>
            <C v="extern_compiled" />
            <T v="pass" />
        </Caller>
    </Rule>
    <Rule value="while_expr" uses="expression" usedBy=",while_stmt,do_stmt,">
        <Expression>
            <Sequence>
                <String value="while" />
                <String value="(" />
                <Terminating_Rule value="expression" />
                <String value=")" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="expression" />
            <UsedBy_Terminated value="while_stmt" />
            <UsedBy_Terminated value="do_stmt" />
        </Properties>
        <Called>
            <C v="expression">
                <C v="assignment_expression" c="2">
                    <T v="assignment_operator" c="3" />
                    <C v="conditional_expression" c="4">
                        <C v="logical_or_expression" c="8">
                            <X v="logical_and_expression" c="11" />
                        </C>
                        <R v="conditional_expression" c="9" />
                        <R v="expression" c="10" />
                    </C>
                    <R v="assignment_expression" c="5" />
                    <C v="cast_expression" c="6">
                        <R v="cast_expression" c="12" />
                        <C v="type_name" c="13">
                            <X v="USER_TYPE" c="15" />
                            <X v="abstract_declarator" c="16" />
                            <X v="specifier_qualifier_list" c="17" />
                        </C>
                        <C v="unary_expression" c="14">
                            <X v="type_name" c="18" />
                            <T v="unary_operator" c="19" />
                            <X v="cast_expression" c="20" />
                            <X v="postfix_expression" c="21" />
                            <X v="unary_expression" c="22" />
                        </C>
                    </C>
                    <R v="unary_expression" c="7" />
                </C>
            </C>
        </Called>
        <Caller>
            <C v="while_stmt">
                <T v="iteration_statement" c="3" />
                <C v="statement" c="4">
                    <C v="elif_part" c="5">
                        <C v="if_stmt" c="20">
                            <X v="statement" c="21" />
                            <X v="else_part" c="22" />
                        </C>
                    </C>
                    <C v="else_part" c="6">
                        <R v="if_stmt" c="23" />
                    </C>
                    <C v="p_Block" c="7">
                        <C v="p_ifndef" c="24">
                            <X v="compilerSwitch" c="29" />
                        </C>
                        <C v="p_if" c="25">
                            <X v="compilerSwitch" c="30" />
                        </C>
                        <X v="p_elif" c="26" />
                        <X v="p_else" c="27" />
                        <X v="p_ifdef" c="28" />
                    </C>
                    <X v="namespace" c="8" />
                    <X v="extern_compiled" c="9" />
                    <T v="pass" c="10" />
                    <X v="compound_statement" c="11" />
                    <X v="case_part" c="12" />
                    <X v="default_part" c="13" />
                    <X v="if_part" c="14" />
                    <X v="switch_stmt" c="15" />
                    <X v="while_stmt" c="16" />
                    <X v="do_stmt" c="17" />
                    <X v="for_stmt" c="18" />
                    <X v="p_define" c="19" />
                </C>
            </C>
            <C v="do_stmt">
                <T v="iteration_statement" c="31" />
                <X v="statement" c="32" />
            </C>
        </Caller>
    </Rule>
    <Rule value="while_stmt" uses="statement,while_expr" usedBy=",statement,iteration_statement," recursiveUses="statement" recursiveUsedBy="statement">
        <Expression>
            <Sequence>
                <Terminating_Rule value="while_expr" />
                <Recursive_Rule value="statement" />
            </Sequence>
        </Expression>
        <Properties leafLevel="" rootLevel="" characterLevel="phrased">
            <Uses_Terminated value="while_expr" />
            <Uses_Recursive value="statement" />
            <UsedBy_Terminated value="iteration_statement" />
            <UsedBy_Recursive value="statement" />
        </Properties>
        <Called>
            <C v="while_expr">
                <C v="expression" c="3">
                    <C v="assignment_expression" c="4">
                        <T v="assignment_operator" c="5" />
                        <C v="conditional_expression" c="6">
                            <X v="logical_or_expression" c="10" />
                            <X v="conditional_expression" c="11" />
                            <X v="expression" c="12" />
                        </C>
                        <R v="assignment_expression" c="7" />
                        <C v="cast_expression" c="8">
                            <X v="cast_expression" c="13" />
                            <X v="type_name" c="14" />
                            <X v="unary_expression" c="15" />
                        </C>
                        <C v="unary_expression" c="9">
                            <X v="type_name" c="16" />
                            <T v="unary_operator" c="17" />
                            <X v="cast_expression" c="18" />
                            <X v="postfix_expression" c="19" />
                            <X v="unary_expression" c="20" />
                        </C>
                    </C>
                </C>
            </C>
            <C v="statement">
                <X v="break_stmt" c="21" />
                <X v="continue_stmt" c="22" />
                <X v="expr_stmt" c="23" />
                <X v="goto_stmt" c="24" />
                <X v="lable_stmt" c="25" />
                <X v="preprocedure" c="26" />
                <X v="return_stmt" c="27" />
                <X v="case_stmt" c="28" />
                <X v="compound_statement" c="29" />
                <X v="default_stmt" c="30" />
                <X v="do_stmt" c="31" />
                <X v="for_stmt" c="32" />
                <X v="if_stmt" c="33" />
                <X v="switch_stmt" c="34" />
                <X v="while_stmt" c="35" />
            </C>
        </Called>
        <Caller>
            <T v="iteration_statement" />
            <C v="statement">
                <C v="elif_part" c="3">
                    <C v="if_stmt" c="18">
                        <R v="statement" c="19" />
                        <C v="else_part" c="20">
                            <X v="if_stmt" c="21" />
                        </C>
                    </C>
                </C>
                <R v="else_part" c="4" />
                <C v="p_Block" c="5">
                    <C v="p_ifndef" c="22">
                        <C v="compilerSwitch" c="27">
                            <X v="preprocedure" c="28" />
                        </C>
                    </C>
                    <C v="p_if" c="23">
                        <R v="compilerSwitch" c="29" />
                    </C>
                    <C v="p_elif" c="24">
                        <X v="compilerSwitch" c="30" />
                    </C>
                    <X v="p_else" c="25" />
                    <X v="p_ifdef" c="26" />
                </C>
                <X v="namespace" c="6" />
                <X v="extern_compiled" c="7" />
                <T v="pass" c="8" />
                <X v="compound_statement" c="9" />
                <X v="case_part" c="10" />
                <X v="default_part" c="11" />
                <X v="if_part" c="12" />
                <X v="switch_stmt" c="13" />
                <X v="while_stmt" c="14" />
                <X v="do_stmt" c="15" />
                <X v="for_stmt" c="16" />
                <X v="p_define" c="17" />
            </C>
        </Caller>
    </Rule>
</Content>
