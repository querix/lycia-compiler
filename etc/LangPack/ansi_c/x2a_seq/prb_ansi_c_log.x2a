











/* 
LogFile_Data:
[<N0>][@stackRead("",CmntBgn)]!
[<13>][<10>] @brief
[<13>][<10>] Extension of the corresponding module @ref [% SourceFileName %]
[<13>][<10>] with the purpose to log parameters and function calls
[<13>][<10>] while tests.
[<13>][<10>]
[<13>][<10>] @author automatically generated by using a template by xml2abc
[<13>][<10>] Copyright(C) of xml2abc 2008-2014 by Eckard Klotz.
[<13>][<10>]
[<13>][<10>] Permission to use, copy, modify, and distribute this software and its
[<13>][<10>] documentation under the terms of the GNU General Public License is hereby
[<13>][<10>] granted. No representations are made about the suitability of this software
[<13>][<10>] for any purpose. It is provided "as is" without express or implied warranty.
[<13>][<10>] See the GNU General Public License for more details.
[<13>][<10>]
[<13>][<10>] Documents produced by abc2xml are derivative works derived from the
[<13>][<10>] input used in their production; they are not affected by this license.
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>] This file contains the declaration of objects used while entering a
[<13>][<10>] function :
[<13>][<10>]
[<13>][<10>]  log the entering of this function and its parameters                                                                               
[<13>][<10>]  PRB_FunctionName_ENTER(filename, lineNumber, columnNumber, parameter);
[<13>][<10>]
[<13>][<10>]  log the leaving of this function
[<13>][<10>]  PRB_FunctionName_LEAVE(filename, line, column);
[<13>][<10>]  PRB_FunctionName_LEAVE(filename, line, column, returnValue);
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]  This file is used by the replacement of a original file to log.
[<13>][<10>]  its parameter and function calls while tests
[<13>][<10>]  How ever, it works only if some additional modules will be used 
[<13>][<10>]  also :
[<13>][<10>]  together with the actual loging library  
[<13>][<10>]                   squ_probe_.c
[<13>][<10>]                   squ_probe_c.h
[<13>][<10>]                   squ_probe.cpp
[<13>][<10>]              and  squ_probe.h
[<13>][<10>]
[<N0>][@stackRead("",CmntEnd)]
[<13>][<10>]
[<N0>]  #ifndef PRB_[% SourceName %]_C__SINGLETON_INCLUDE
[<N0>]  #define PRB_[% SourceName %]_C__SINGLETON_INCLUDE
[<N0>]       #include "prb_[% SourceName %].h"  // source-definitions
[<N0>]       #include "SequenceC.h"    //common log library
[<N0>]       #include "SequenceU.h"    //user log library
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[@useForSnipetDownwards(function_definition,function_c), @snipet(function_definition)]
[<N0>]  #endif// PRB_[% SourceName %]_C__SINGLETON_INCLUDE
|             
*/




funcName:[@ifXmlEqual("",direct_declarator/ID)      ,@text(direct_declarator/ID)
        ][@ifXmlEqual("",direct_declarator/owned_ID),@text(direct_declarator/owned_ID)]|



/*
function_c:[@ifXmlExisting(declarator/direct_declarator/ID), @xmlPrint("generate definition of entering log-function for :",declarator/direct_declarator/ID/""),  @xmlPrint("\n")]
           [@ifXmlMissing (declarator/direct_declarator/ID), @xmlPrint("generate definition of entering log-function for :",declarator/direct_declarator/owned_ID/ID/""),  @xmlPrint("\n")]        
           [@xmlCopy(_ReturnType_,declaration_specifier)]
[<13>][<10>]
[<N0>]///
[<N0>]/// log function called inside replacement of:
[<N0>]/// [@text(declaration_specifier)] [@replace("((void))","(void)"), @useForSnipet(declarator, create_OrignalInterface),@snipet(declarator)]
[<N0>]/// used to log parameters while entering the function
[<N0>]///
[<N0>]        void [@replace(",(void)",""), @useForSnipet(declarator, create_FunctionInterfaceE),@snipet(declarator)]
[<N0>]        [@stackRead("",CmntBgn)]@MRTZ_describe PRB_[@ifXmlEqual("",declarator/direct_declarator/ID),@text(declarator/direct_declarator/ID)
                                                        ][@ifXmlEqual("",declarator/direct_declarator/owned_ID),@replace(":","_"),@text(declarator/direct_declarator/owned_ID)]_ENTER
[<I1>]           log of inputs
[<D1>]        [@stackRead("",CmntEnd)]
[<N0>]        {  
[<I1>]         Probe_beginOfFunctionCall("[@ifXmlEqual("",declarator/direct_declarator/ID),      @text(declarator/direct_declarator/ID)
                                         ][@ifXmlEqual("",declarator/direct_declarator/owned_ID),@text(declarator/direct_declarator/owned_ID/ID)
                                     ]", "[@ifXmlEqual("",declarator/direct_declarator/owned_ID),@text(declarator/direct_declarator/owned_ID/Owner)]", fileName, lineNumber, columnNumber);
[<13>][<10>]
[<N0>]         [@useForSnipet(declarator, create_LogParameterCalls),@snipet(declarator)]
[<D1>]        }
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<N0>]///
[<N0>]/// log function called inside replacement of:
[<N0>]/// [@text(declaration_specifier)] [@useForSnipet(declarator, create_OrignalInterface),@snipet(declarator)]
[<N0>]/// used to log parameters while leaving the function
[<N0>]///
[<N0>]        void [@useForSnipet(declarator, create_FunctionInterfaceL),@snipet(declarator)]
[<N0>]        [@stackRead("",CmntBgn)]@MRTZ_describe PRB_[@ifXmlEqual("",declarator/direct_declarator/ID),@text(declarator/direct_declarator/ID)
                                                        ][@ifXmlEqual("",declarator/direct_declarator/owned_ID),@replace(":","_"),@text(declarator/direct_declarator/owned_ID)]_LEAVE
[<I1>]           log of inputs
[<D1>]        [@stackRead("",CmntEnd)]
[<N0>]        {  
[<I1>]         [@useForSnipet(_ReturnType_,testCallOfReturnLogging),@xmlSnipet(_ReturnType_)] 
[<N0>]         Probe_endOfFunctionCall(fileName, lineNumber, columnNumber);
[<D1>]        }
[<13>][<10>]
[<13>][<10>]
[@stackClear(_DECLARATOR_,_FUNCNAME_,_RETURNTYPE_,_ParameterTypeList_)]
[<13>][<10>]
[@xmlDelete(_ReturnType_)]|
*/


testCallOfReturnLogging:[@stackPush(_TypeOfReturn_,declaration_specifier)
                       ][@ifStackUnequal("void",_TypeOfReturn_),
                         @useForSnipet(declaration_specifier, createCallOfReturnLogging),@snipet(declaration_specifier)
                       ][@stackClear(_TypeOfReturn_)]|

declaration_specifier:[@text(__SELF__)]|
/*
createCallOfReturnLogging:Probe_log_Object("[@text(__SELF__)]", "ReturnValue", &returnValue, DataProbe_Return);
[<13>][<10>]|
*/
createCallOfReturnLogging:Probe_log_Object("[@text(__SELF__)]", "ReturnValue", &amp;returnValue, DataProbe_Return);|







create_OrignalInterface:[@ifXmlEqual("",direct_declarator/ID),@text(direct_declarator/ID)
                       ][@ifXmlEqual("",direct_declarator/owned_ID),@text(direct_declarator/owned_ID)
                      ]([@ifXmlEqual("",direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list), 
                         @useForSnipet(parameter_list,parameter_InterfaceO),                                                
                         @snipet(direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list)
                       ][@ifXmlUnequal("",direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list), 
                         @text(direct_declarator/direct_declarator_second/direct_parameter_declarator/assignment_expression)])
|

parameter_InterfaceO: [@useForSnipet(parameter_declaration,parameter_Declaration), @snipet(parameter_declaration,KeyChr)]|   


create_FunctionInterfaceE:PRB_[@ifXmlEqual("",direct_declarator/ID),@text(direct_declarator/ID)
                            ][@ifXmlEqual("",direct_declarator/owned_ID),@replace(":","_"),@text(direct_declarator/owned_ID)]_ENTER(char * fileName, int lineNumber, int columnNumber[  
                              @ifXmlEqual("",direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list), 
                              @useForSnipet(parameter_list,parameter_Interface),                                                
                              @snipet(direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list)
                            ])
|


create_FunctionInterfaceL:PRB_[@ifXmlEqual("",direct_declarator/ID),@text(direct_declarator/ID)
                             ][@ifXmlEqual("",direct_declarator/owned_ID),@replace(":","_"),@text(direct_declarator/owned_ID)
                             ]_LEAVE(char * fileName, int lineNumber, int columnNumber[@xmlSnipet(_ReturnType_)])
|


_ReturnType_:[@stackPush(_TypeOfReturn_,declaration_specifier)
            ][@ifStackUnequal("void",_TypeOfReturn_),
              @useForSnipet(declaration_specifier, valideReturnValue),@snipet(declaration_specifier)
            ][@stackClear(_TypeOfReturn_)]|

valideReturnValue:, [@text(__SELF__)] returnValue|



parameter_Interface:, [@useForSnipet(parameter_declaration,parameter_Declaration), @snipet(parameter_declaration,KeyChr)]|   

                                                      
parameter_Declaration:[@useForSnipet(declaration_specifier,tesxtOfdeclaration_specifier),
                       @stackPush(_Temp_,declaration_specifier)
                     ][@replace("  "," "), stackPop("",_Temp_)] [@text(declarator)]|  


tesxtOfdeclaration_specifier:[@xmlCode(_DeclarationSpecifier_,__SELF__)
                      ,@xmlSave(_DeclarationSpecifier_,prb/log/_DeclarationSpecifier_.xml)
                     ][@useForSnipet(_DeclarationSpecifier_,showSource),
                       @useForSnipetDownwards(EMPTYLINE,deleteEMPTYLINE),
                       @useForSnipetDownwards(LINE,     onlyLINEContent),
                       @useForSnipetDownwards(SP,       deleteSP), 
                       @xmlSnipet(_DeclarationSpecifier_),
                     ][@xmlDelete(_DeclarationSpecifier_)]|
deleteEMPTYLINE: | 
onlyLINEContent:[@snipet(SP, comp_op, Keyword, KeyChr, Str, ID, String,
                         CONSTANT_HEX, CONSTANT_FLT1,  CONSTANT_FLT2, CONSTANT_FLT3,
                         CONSTANT_INT0, CONSTANT_INT1, CONSTANT_CHAR, Comment,
                         semikolon, empty_expression, p_text),]|

deleteSP: |



create_LogParameterCalls:[@ifXmlEqual("",direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list), 
                          @useForSnipet(parameter_list, parameter_LogCall),                                                
                          @snipet(direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list)
                          ]
|





parameter_LogCall:[@useForSnipet(parameter_declaration,constructLogCall), @snipet(parameter_declaration)]|   

    


/*
constructLogCall:
[<N0>] Probe_log_Object("[@text(declaration_specifier)]", "[@text(declarator)]", (void*)(&[@text(declarator)]), DataProbe_Parameter);
| 
*/

constructLogCall: Probe_log_Object("[@text(declaration_specifier)]", "[@text(declarator)]", (void*)(&amp;[@text(declarator)]), DataProbe_Parameter);| 































/* 
LogHeader_Data:
[<N0>][@stackRead("",CmntBgn)]!
[<13>][<10>] @brief
[<13>][<10>] Extension of the corresponding module @ref [% SourceFileName %]
[<13>][<10>] with the purpose to log parameters and function calls
[<13>][<10>] while tests.
[<13>][<10>]
[<13>][<10>] @author automatically generated by using a template by xml2abc
[<13>][<10>] Copyright(C) of xml2abc 2008-2014 by Eckard Klotz.
[<13>][<10>]
[<13>][<10>] Permission to use, copy, modify, and distribute this software and its
[<13>][<10>] documentation under the terms of the GNU General Public License is hereby
[<13>][<10>] granted. No representations are made about the suitability of this software
[<13>][<10>] for any purpose. It is provided "as is" without express or implied warranty.
[<13>][<10>] See the GNU General Public License for more details.
[<13>][<10>]
[<13>][<10>] Documents produced by abc2xml are derivative works derived from the
[<13>][<10>] input used in their production; they are not affected by this license.
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>] This file contains the declaration of objects used while entering a
[<13>][<10>] function :
[<13>][<10>]
[<13>][<10>]  log the entering of this function and its parameters                                                                               
[<13>][<10>]  PRB_FunctionName_ENTER(filename, lineNumber, columnNumber, parameter);
[<13>][<10>]
[<13>][<10>]  log the leaving of this function
[<13>][<10>]  PRB_FunctionName_LEAVE(filename, line, column);
[<13>][<10>]  PRB_FunctionName_LEAVE(filename, line, column, returnValue);
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]  This file is used by the replacement of a original file to log.
[<13>][<10>]  its parameter and function calls while tests
[<13>][<10>]  How ever, it works only if some additional modules will be used 
[<13>][<10>]  also :
[<13>][<10>]  together with the actual loging library  
[<13>][<10>]                   squ_probe_.c
[<13>][<10>]                   squ_probe_c.h
[<13>][<10>]                   squ_probe.cpp
[<13>][<10>]              and  squ_probe.h
[<13>][<10>]
[<N0>][@stackRead("",CmntEnd)]
[<13>][<10>]
[<N0>]       #include "SequenceC.h"    //common log library
[<N0>]       #include "SequenceU.h"    //user log library
[<N0>]       #include "[% SourceName %].h"
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[@useForSnipetDownwards(function_definition,function_h), @snipet(function_definition)]
|                                           
*/
/*          
function_h:[@ifXmlExisting(declarator/direct_declarator/ID), @xmlPrint("generate declaration of entering log-function for :",declarator/direct_declarator/ID/""),  @xmlPrint("\n")]
           [@ifXmlMissing (declarator/direct_declarator/ID), @xmlPrint("generate declaration of entering log-function for :",declarator/direct_declarator/owned_ID/ID/""),  @xmlPrint("\n")]        
           [@xmlCopy(_ReturnType_,declaration_specifier)]
[<13>][<10>]
[<N0>]///
[<N0>]/// log function called inside replacement of:
[<N0>]/// [@text(declaration_specifier)] [@replace("((void))","(void)"), @useForSnipet(declarator, create_OrignalInterface),@snipet(declarator)]
[<N0>]/// used to log parameters while entering the function
[<N0>]///
[<N0>]        void [@replace(",(void)",""), @useForSnipet(declarator, create_FunctionInterfaceE),@snipet(declarator)];
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<N0>]///
[<N0>]/// log function called inside replacement of:
[<N0>]/// [@text(declaration_specifier)] [@useForSnipet(declarator, create_OrignalInterface),@snipet(declarator)]
[<N0>]/// used to log parameters while leavinging the function
[<N0>]///
[<N0>]        void [@useForSnipet(declarator, create_FunctionInterfaceL),@snipet(declarator)];
[<13>][<10>]
[<13>][<10>]
[@stackClear(_DECLARATOR_,_FUNCNAME_,_RETURNTYPE_,_ParameterTypeList_)]
[<13>][<10>]
[@xmlDelete(_ReturnType_)]|
*/

