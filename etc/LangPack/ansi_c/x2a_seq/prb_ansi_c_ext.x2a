






/* Struct FileContent @ifXmlEqual("1",__SELF__/""),
             
             [@useForSnipet(Content,LogFileName), @stackPush(__DESTINATION__,__SELF__)]
             [@xmlPrint("\n\n")][@stackRead(__LIVEOUT__,__DESTINATION__)]
             
             [@ifOlderAs(__DESTINATION__),@useForSnipet(Content,LogFile_Data)   , @stackPush(FileContent,__SELF__)]
             [@ifOlderAs(__DESTINATION__),@stackPop(__DESTINATION__, FileContent)]

             
             [@useForSnipet(Content,LogHeaderName), @stackPush(__DESTINATION__,__SELF__)]
             [@xmlPrint("\n\n")][@stackRead(__LIVEOUT__,__DESTINATION__)]
             
             [@ifOlderAs(__DESTINATION__),@useForSnipet(Content,LogHeader_Data)   , @stackPush(FileContent,__SELF__)]
             [@ifOlderAs(__DESTINATION__),@stackPop(__DESTINATION__, FileContent)]

             [@xmlCopy(NewFileContent,__SELF__),@xmlSave(NewFileContent,prb/log/NewFileContent.xml)]
             [@xmlDelete(NewFileContent)]
*/ 

/*
Insert for debuging aftter creation of Content_Modyfy  :
             [@xmlCopy(NewFileContent,__SELF__),@xmlSave(NewFileContent,prb/log/NewFileContent.xml)]
*/
     
Content2File:[@useForSnipet(Content,ExtFileName), @stackPush(__DESTINATION__,__SELF__)]
             [@xmlPrint("\n\n\n\n")][@stackRead(__LIVEOUT__,__DESTINATION__)]

             [@ifOlderAs(__DESTINATION__),@useForSnipet(Content,Content_Modyfy) , @snipet(__SELF__)]

             [@ifOlderAs(__DESTINATION__),@useForSnipet(Content,Extention_Data)   , @stackPush(FileContent,__SELF__)]
             [@ifOlderAs(__DESTINATION__),@stackPop(__DESTINATION__, FileContent)]

             |

 
Extention_Data:
[<N0>][@stackRead("",CmntBgn)]!
[<13>][<10>] @brief
[<13>][<10>] Extension of the corresponding module @ref [% SourceFileName %]
[<13>][<10>] with the purpose to log parameters and function calls
[<13>][<10>] while tests.
[<13>][<10>]
[<13>][<10>] @author automatically generated by using a template by xml2abc
[<13>][<10>] Copyright(C) of xml2abc 2008-2014 by Eckard Klotz.
[<13>][<10>]
[<13>][<10>] Permission to use, copy, modify, and distribute this software and its
[<13>][<10>] documentation under the terms of the GNU General Public License is hereby
[<13>][<10>] granted. No representations are made about the suitability of this software
[<13>][<10>] for any purpose. It is provided "as is" without express or implied warranty.
[<13>][<10>] See the GNU General Public License for more details.
[<13>][<10>]
[<13>][<10>] Documents produced by abc2xml are derivative works derived from the
[<13>][<10>] input used in their production; they are not affected by this license.
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>] This file contains the same objects like the original one but it
[<13>][<10>] the function contain now some logging calls:
[<13>][<10>]
[<13>][<10>]  log the entering of this function and its parameters                                                                               
[<13>][<10>]  PRB_FunctionName_ENTER(filename, lineNumber, columnNumber, parameter);
[<13>][<10>]
[<13>][<10>]  log the leaving of this function
[<13>][<10>]  PRB_FunctionName_LEAVE(filename, line, column);
[<13>][<10>]  PRB_FunctionName_LEAVE(filename, line, column, returnValue);
[<13>][<10>]
[<13>][<10>]  log the leaving of an if statement
[<13>][<10>]  PRB_IF_ENTER(filename, line, column);
[<13>][<10>]                            
[<13>][<10>]  log the leaving of an if statement
[<13>][<10>]  PRB_IF_LEAVE(filename, line, column);
[<13>][<10>]
[<13>][<10>]  log the leaving of a switch statement
[<13>][<10>]  PRB_SWITCH_ENTER(filename, line, column);
[<13>][<10>]                            
[<13>][<10>]  log the leaving of a switch statement
[<13>][<10>]  PRB_SWITCH_LEAVE(filename, line, column);
[<13>][<10>]
[<13>][<10>]  log the leaving of a for statement
[<13>][<10>]  PRB_FOR_ENTER(filename, line, column);
[<13>][<10>]
[<13>][<10>]  log the leaving of a for statement
[<13>][<10>]  PRB_FOR_LEAVE(filename, line, column);
[<13>][<10>]
[<13>][<10>]  log the leaving of a while statement
[<13>][<10>]  PRB_WHILE_ENTER(filename, line, column);
[<13>][<10>]
[<13>][<10>]  log the leaving of a while statement
[<13>][<10>]  PRB_WHILE_LEAVE(filename, line, column);
[<13>][<10>]
[<13>][<10>]  log the leaving of a do statement
[<13>][<10>]  PRB_DO_ENTER(filename, line, column);
[<13>][<10>]
[<13>][<10>]  log the leaving of a do statement
[<13>][<10>]  PRB_DO_LEAVE(filename, line, column);
[<13>][<10>]
[<13>][<10>]  This file should be used as a replacement of the original one.
[<13>][<10>]  How ever, it works only if some additional modules will be used 
[<13>][<10>]  also :
[<13>][<10>]  the module that contains the functions used to log the entering 
[<13>][<10>]  of the function  prb:[% SourceFileName %] 
[<13>][<10>]              and  prb_[% SourceName %].h
[<13>][<10>]  together with the actual loging library  
[<13>][<10>]                   squ_probe_.c
[<13>][<10>]                   squ_probe_c.h
[<13>][<10>]                   squ_probe.cpp
[<13>][<10>]              and  squ_probe.h
[<13>][<10>]
[<N0>][@stackRead("",CmntEnd)]
[<13>][<10>]
[<N0>]     //  #include "prb_[% SourceName %].h"
[<N0>]       #include "SequenceC.h"    //common log library
[<N0>]       #include "SequenceU.h"    //user log library
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
[<13>][<10>]
 [@xmlCode(_ContentSource_,__SELF__),@xmlSave(_ContentSource_,prb/log/SourceContent.xml)
][@useForSnipet(_ContentSource_,showSource), @xmlSnipet(_ContentSource_)
][@xmlDelete(_ContentSource_)]
|             







showSource:[@snipet(CODE),]|

CODE:[@snipet(EMPTYLINE,LINE,)]|

EMPTYLINE:[<13>][<10>]| /*[@xmlInsert(new/xml, __BEFORE__)]*/

LINE:[<13>][<10>][@snipet(SP,
                          CRLF,
                          TEXT,
                          comp_op,
                          Keyword,
                          KeyChr,
                          Str,
                          ID,
                          String,
                          CONSTANT_HEX,
                          CONSTANT_FLT1,
                          CONSTANT_FLT2,
                          CONSTANT_FLT3,
                          CONSTANT_INT0,
                          CONSTANT_INT1,
                          CONSTANT_CHAR,
                          Comment,
                          semikolon,
                          empty_expression,
                          p_text),]|@useAlsoFor(INSERT)

SP:[<S1>]|
CRLF:[<13>][<10>]|
TEXT:[@text(__SELF__)]|

Keyword:[@text(__SELF__)]|
KeyChr:[@text(__SELF__)]|
Str:[@text(__SELF__)]|
ID:[@text(__SELF__)]|useAlsoFor(ID_std)
String:[@text(__SELF__)]|

CONSTANT_HEX:[@text(__SELF__)]|
CONSTANT_FLT1:[@text(__SELF__)]|
CONSTANT_FLT2:[@text(__SELF__)]|
CONSTANT_FLT3:[@text(__SELF__)]|
CONSTANT_INT0:[@text(__SELF__)]|
CONSTANT_INT1:[@text(__SELF__)]|
CONSTANT_CHAR:[@text(__SELF__)]|
Comment:[@text(__SELF__)]|
semikolon:[@replace("#;","")@text(__SELF__)]|
empty_expression:[@text(__SELF__)]|
p_text:[@text(__SELF__)]|



Comment_source:[@text(__SELF__)]|

comp_op:[@text(__SELF__)]|



Owner:[@text(__SELF__)]|

USER_TYPE:[@text(__SELF__)]|
enum_specifier:[@text(__SELF__)]|
type_qualifier:[@text(__SELF__)]|
storage_class_specifier:[@text(__SELF__)]|

initStack:-|




/*@useForSnipetDownwards(p_define,p_define_local),
preprocedure,declaration,
                      function_definition,    goto_stmt,lable_stmt,
                      continue_stmt,break_stmt   expr_stmt,   [@stackRead(__LIVEOUT__,__DESTINATION__)]   */
suiteAndMore:[ @snipet(if_stmt, switch_stmt, case_stmt, default_stmt,
                       while_stmt, do_stmt, for_stmt,
                       return_stmt, compound_statement,
                       preprocedure,function_definition,namespace)]|



preprocedure:[% suiteAndMore %]|
namespace:[% suiteAndMore %]|




/*
[@useForSnipet(Content, initStack),    @stackPush(_LogIncludeDone_,__SELF__)
               ]
                [@stackClear(_LogIncludeDone_,)]*/
                
Content_Modyfy:[@snipet(function_definition),@snipet(preprocedure),@snipet(namespace)]|


/*

create_LogInclude:
                        <LINE [@useForSnipet(function_definition,LINE_Attributes),@snipet(__SELF__)] new="-1">
                        <SP [@useForSnipet(function_definition,LINE_Attributes),@snipet(__SELF__)] new="-1"/>  
                        <ID [@useForSnipet(function_definition,LINE_Attributes),@snipet(__SELF__)] new="-1"> 
                          #include &quot;prb_[% SourceName %].c&quot; 
                        </ID>
                        </LINE>
|

*/



create_LogFunctionEnterPrototype: [@useForSnipet(function_definition, LINE_Attributes), @stackPush(_LogFunctionEnter_Attributes_,__SELF__)]
                       <INSERT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">  
                              ///
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">  
                              /// log function called inside replacement of:
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">  
                             /// [@text(declaration_specifier)] [@useForSnipet(declarator, create_OrignalInterface),@snipet(declarator)]
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">  
                             /// used to log parameters while entering the function
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">  
                             ///
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">  
                             void [@replace(",(void)",""), @useForSnipet(declarator, create_FunctionInterfaceE),@snipet(declarator)]
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">  
                           {
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <SP [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">  
                           Probe_beginOfFunctionCall("[@ifXmlEqual("",declarator/direct_declarator/ID),      @text(declarator/direct_declarator/ID)
                                         ][@ifXmlEqual("",declarator/direct_declarator/owned_ID),@text(declarator/direct_declarator/owned_ID/ID)
                                     ]", "[@ifXmlEqual("",declarator/direct_declarator/owned_ID),@text(declarator/direct_declarator/owned_ID/Owner)]", fileName, lineNumber, columnNumber);
                           
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  

                            [@useForSnipet(declarator, create_LogParameterLines),@snipet(declarator)]

                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">  
                           }
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
                       </INSERT>
                       [@stackClear(_LogFunctionEnter_Attributes_)]|


create_LogParameterLines:[@ifXmlEqual("",direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list), 
                          @useForSnipet(parameter_list, parameter_LogLine),                                                
                          @snipet(direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list)
                          ]
|
parameter_LogLine:[@useForSnipet(parameter_declaration,constructLogLine), @snipet(parameter_declaration)]|   

constructLogLine:       <SP [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>
                        <TEXT [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1">
                          Probe_log_Object("[@text(declaration_specifier)]", "[@text(declarator)]", (void*)(&amp;[@text(declarator)]), DataProbe_Parameter);
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionEnter_Attributes_)] new="-1"/>  
| 




create_LogFunctionLeavePrototype: [@useForSnipet(function_definition, LINE_Attributes), @stackPush(_LogFunctionLeave_Attributes_,__SELF__)]
                       <INSERT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                              ///
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                              /// log function called inside replacement of:
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                             /// [@text(declaration_specifier)] [@useForSnipet(declarator, create_OrignalInterface),@snipet(declarator)]
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                             /// used to log parameters while leaving the function
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                             ///
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                           void [@useForSnipet(declarator, create_FunctionInterfaceL),@snipet(declarator)]
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                           {
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <SP [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                            [@useForSnipet(_ReturnType_,testCallOfReturnLogging),@xmlSnipet(_ReturnType_)] 
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <SP [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                             Probe_endOfFunctionCall(fileName, lineNumber, columnNumber);
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <TEXT [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1">  
                           }
                        </TEXT>
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                        <CRLF [@stackRead("",_LogFunctionLeave_Attributes_)] new="-1"/>  
                       </INSERT>
                       [@stackClear(_LogFunctionLeave_Attributes_)]|


































function_definition:[@ifXmlExisting(declarator/direct_declarator/ID), @xmlPrint("generate modified body of :",declarator/direct_declarator/ID/""),  @xmlPrint("\n")
                   ][@ifXmlMissing (declarator/direct_declarator/ID), @xmlPrint("generate modified body of :",declarator/direct_declarator/owned_ID/ID/""),  @xmlPrint("\n")
                   ]
                    [@xmlCopy(_ReturnType_,declaration_specifier)
                   ][@useForSnipet(function_definition, create_LogFunctionEnterPrototype),@xmlCreate(LogInclude,__SELF__)
                   ][@xmlInsert(LogInclude/INSERT, __BEFORE__,)
                   ][ @xmlDelete(LogInclude)
                   ][@useForSnipet(function_definition, create_LogFunctionLeavePrototype),@xmlCreate(LogInclude,__SELF__)
                   ][@xmlInsert(LogInclude/INSERT, __BEFORE__,)
                   ][ @xmlDelete(LogInclude)
                   ][@xmlDelete(_ReturnType_)
                   ]
                    [@useForSnipet(function_definition, initStack),     @stackPush(_ReturnLog_Attributes_,__SELF__)
                   ][@useForSnipet(function_definition, getStartData),  @stackPush(_FunctionStartData_,   __SELF__)    
                   ][@useForSnipet(compound_statement,LINE_Attributes), @stackPush(_FunctionLog_Attributes_,compound_statement)
                   ][@useForSnipet(declarator,        create_FunctionLogLine),@xmlCreate(FunctionLogLine,declarator)
                   ][@xmlCopy(_ReturnName_,declarator/direct_declarator)
                   ][@useForSnipet(compound_statement,insert_FunctionLogLine),@snipet(compound_statement)
                   ][@snipet(compound_statement)
                   ][@ifStackEqual("-",_ReturnLog_Attributes_), 
                     @useForSnipet(compound_statement, createVoidLeave), @snipet(compound_statement)
                   ][@stackClear(_FunctionFunctionLog_Attributes_,_FunctionStartData_,_ReturnLog_Attributes_,)
                   ][@xmlDelete(_ReturnName_)]|  
                   
insert_FunctionLogLine:[@xmlSave(FunctionLogLine/INSERT,prb/log/LogLine.xml)][@xmlInsert(FunctionLogLine/INSERT, 1,)][@xmlDelete(FunctionLogLine)]|

getStartData:"[% SourceFileName %]", [@attribute(L)], [@attribute(C)]|
 
   
create_FunctionLogLine:      
                        <INSERT [@stackRead("",_FunctionLog_Attributes_)] new="1">
                        <SP [@stackRead("",_FunctionLog_Attributes_)] new="1"/>  
                        <TEXT [@stackRead("",_FunctionLog_Attributes_)] new="1"> 
 PRB_[@ifXmlEqual("",direct_declarator/ID)      ,@text(direct_declarator/ID)
    ][@ifXmlEqual("",direct_declarator/owned_ID),@text(direct_declarator/owned_ID)
    ]_ENTER([ @stackRead("",_FunctionStartData_)
   ][@ifXmlEqual("",direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list), 
             @snipet(direct_declarator/direct_declarator_second/direct_parameter_declarator/parameter_type_list/parameter_list)]);
                        </TEXT>
                        <TEXT [@stackRead("",_FunctionLog_Attributes_)] new="1">
                           // log the entering of this function and its parameters
                        </TEXT>
                      </INSERT>|
LINE_Attributes:L="[@attribute(L)]" C=[@attribute(C)]|

parameter_list:,[@snipet(parameter_declaration,KeyChr)]|
parameter_declaration:[@text(declarator)]|



createVoidLeave:[@useForSnipet(KeyChr,searchComponentEnd), @snipet(KeyChr)]|

searchComponentEnd:[@useForSnipet(KeyChr,readKeyChr), @stackPush(_KeyChr_,__SELF__)
                  ][@ifStackEqual("}",_KeyChr_), 
                    @useForSnipet(KeyChr, LINE_Attributes),     @stackPush(_ReturnLog_Attributes_,__SELF__)
                  ][@ifStackEqual("}",_KeyChr_), 
                    @useForSnipet(KeyChr, create_VoidReturnLogLine),@xmlCreate(VoidReturnLogLine,__SELF__),
                  ][@ifStackEqual("}",_KeyChr_), 
                    @xmlInsert(VoidReturnLogLine/INSERT, __BEFORE__)
                  ][@stackClear(_KeyChr_,),@xmlDelete(VoidReturnLogLine)]|
                    
readKeyChr:[text(__SELF__)]|

create_VoidReturnLogLine:<INSERT [@stackRead("",_ReturnLog_Attributes_)] new="-1">
                          <SP [@stackRead("",_ReturnLog_Attributes_)] new="-1"/>
                          <TEXT [@stackRead("",_ReturnLog_Attributes_)] new="-1">
                           PRB_[@xmlSnipet(_ReturnName_)]_LEAVE([ @stackRead("",_FunctionStartData_)]);
                          </TEXT>
                          <TEXT [@stackRead("",_ReturnLog_Attributes_)] new="-1">
                           // log the leaving of this function
                          </TEXT>
                         </INSERT>|









/*compound_statement:[@snipet(return_stmt,if_stmt,switch_stmt,for_stmt,while_stmt,do_stmt,)]| 
[@useForSnipet(compound_statement, LINE_Attributes),        @stackPush(_compound_statementLog_Attributes_,__SELF__)
                  ][@stackRead(__LIVEOUT__,_compound_statementLog_Attributes_)
                 ]
*/
compound_statement:[% suiteAndMore %]|   


return_stmt:[@useForSnipet(return_stmt, LINE_Attributes),     @stackPush(_ReturnLog_Attributes_,__SELF__)
           ][@useForSnipet(return_stmt, create_ReturnLogLine),@xmlCreate(ReturnLogLine,__SELF__)
           ][@xmlInsert(ReturnLogLine/INSERT, __BEFORE__),@xmlDelete(ReturnLogLine)
           ]|

create_ReturnLogLine:<INSERT [@stackRead("",_ReturnLog_Attributes_)] new="-1">
                        <TEXT [@stackRead("",_ReturnLog_Attributes_)] new="-1">
                           PRB_[@xmlSnipet(_ReturnName_)]_LEAVE(
                               [@stackRead("",_FunctionStartData_)],
                               [@text(assignment_expression)]);
                        </TEXT>
                        <TEXT [@stackRead("",_ReturnLog_Attributes_)] new="-1">
                           // log the leaving of this function
                        </TEXT>
                     </INSERT>|


_ReturnName_:[@ifXmlEqual("",direct_declarator/ID)      ,@text(direct_declarator/ID)
            ][@ifXmlEqual("",direct_declarator/owned_ID),@text(direct_declarator/owned_ID)
            ]|




/*[@stackRead(__LIVEOUT__,_IfLog_Attributes_)
       ]*/                     
if_stmt:[@useForSnipet(if_stmt, LINE_Attributes),        @stackPush(_IfLog_Attributes_,__SELF__)
       ][@useForSnipet(if_stmt, create_IfEnterLogLine),  @xmlCreate(IfEnterLogLine,__SELF__)
       ][@xmlSave(IfEnterLogLine,prb/log/IfEnterLogLine.xml),@xmlInsert(IfEnterLogLine/INSERT, __BEFORE__)
       ][@useForSnipet(if_stmt, create_IfLeaveLogLine),  @xmlCreate(IfLeaveLogLine,__SELF__)
       ][@xmlSave(IfLeaveLogLine,prb/log/IfLeaveLogLine.xml),@xmlInsert(IfLeaveLogLine/INSERT, __AFTER__)
       ][@stackClear(_IfLog_Attributes_,)][@xmlDelete(IfEnterLogLine),@xmlDelete(IfLeaveLogLine)
       ][@snipet(if_part),@snipet(elif_part),@snipet(else_part)]|

create_IfEnterLogLine:<INSERT [@stackRead("",_IfLog_Attributes_)] new="-1">
                        <TEXT [@stackRead("",_IfLog_Attributes_)] new="-1">
                           PRB_IF_ENTER("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                      ]", [@attribute(L)], [@attribute(C)], "[@snipet(if_part/if_expr)]");
                        </TEXT>
                        <TEXT [@stackRead("",_IfLog_Attributes_)] new="-1">
                           // log the leaving of an if statement
                        </TEXT>
                      </INSERT>|      
                       
create_IfLeaveLogLine:<INSERT [@stackRead("",_IfLog_Attributes_)] new="1">
                        <TEXT [@stackRead("",_IfLog_Attributes_)] new="1">
                           PRB_IF_LEAVE("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                      ]", [@attribute(L)], [@attribute(C)]);
                        </TEXT>
                        <TEXT [@stackRead("",_IfLog_Attributes_)] new="1">
                           // log the leaving of an if statement
                        </TEXT>
                      </INSERT>|  

/*[@xmlPrint("+++++++++++++++++++++++++\n")]*/                                               
if_expr:[@replace("&", "@@@@@@@@@@@@@@@"),@replace("@@@@@@@@@@@@@@@", "&amp;"),@replace("<", "&lt;"),@replace(">", "&gt;"), @replace("\"", "&quot;"), @text(expr_stmt), @text(assignment_expression)]| 

if_part:[% suiteAndMore %]|                      
elif_part:[% suiteAndMore %]|                      
else_part:[% suiteAndMore %]|                      


                      
switch_stmt:[@useForSnipet(switch_stmt, LINE_Attributes),            @stackPush(_SwitchLog_Attributes_,__SELF__)
           ][@useForSnipet(switch_stmt, create_SwitchEnterLogLine),  @xmlCreate(SwitchEnterLogLine,__SELF__)
           ][@xmlSave(SwitchEnterLogLine,prb/log/SwitchEnterLogLine.xml),@xmlInsert(SwitchEnterLogLine/INSERT, __BEFORE__)
           ][@useForSnipet(switch_stmt, create_SwitchLeaveLogLine),  @xmlCreate(SwitchLeaveLogLine,__SELF__)
           ][@xmlSave(SwitchLeaveLogLine,prb/log/SwitchLeaveLogLine.xml),@xmlInsert(SwitchLeaveLogLine/INSERT, __AFTER__)
           ][@stackClear(_SwitchLog_Attributes_,),@xmlDelete(SwitchEnterLogLine),@xmlDelete(SwitchLeaveLogLine)
           ][@snipet(compound_statement)]|

create_SwitchEnterLogLine:<INSERT [@stackRead("",_SwitchLog_Attributes_)] new="-1">
                           <TEXT [@stackRead("",_SwitchLog_Attributes_)] new="-1">
                            PRB_SWITCH_ENTER("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                         ]", [@attribute(L)], [@attribute(C)], "[@snipet(switch_expr)]");
                           </TEXT>
                           <TEXT [@stackRead("",_SwitchLog_Attributes_)] new="-1">
                            // log the leaving of a switch statement
                           </TEXT>
                          </INSERT>|      
                       
create_SwitchLeaveLogLine:<INSERT [@stackRead("",_SwitchLog_Attributes_)] new="1">
                           <TEXT [@stackRead("",_SwitchLog_Attributes_)] new="1">
                            PRB_SWITCH_LEAVE("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                         ]", [@attribute(L)], [@attribute(C)]);
                           </TEXT>
                           <TEXT [@stackRead("",_SwitchLog_Attributes_)] new="1">
                            // log the leaving of a switch statement
                           </TEXT>
                          </INSERT>|     
/*@replace("&", "&amp;"),*/
switch_expr:[@replace("&", "@@@@@@@@@@@@@@@"),@replace("@@@@@@@@@@@@@@@", "&amp;"),@replace("<", "&lt;"),@replace(">", "&gt;"), @replace("\"", "&quot;"), @text(expr_stmt), @text(assignment_expression)]|

case_stmt:[@snipet(case_part)]|
case_part:[% suiteAndMore %]|

default_stmt:[@snipet(default_part)]|
default_part:[% suiteAndMore %]|
                      
/**/                        
for_stmt:[@useForSnipet(for_stmt, LINE_Attributes),          @stackPush(_ForLog_Attributes_,__SELF__)
        ][@useForSnipet(for_stmt, create_ForEnterLogLine),   @xmlCreate(ForEnterLogLine,__SELF__)
        ][@xmlSave(ForEnterLogLine,prb/log/ForEnterLogLine.xml), @xmlInsert(ForEnterLogLine/INSERT, __BEFORE__)
        ][@useForSnipet(for_stmt, create_ForLeaveLogLine),   @xmlCreate(ForLeaveLogLine,__SELF__)
        ][@xmlSave(ForLeaveLogLine,prb/log/ForLeaveLogLine.xml), @xmlInsert(ForLeaveLogLine/INSERT, __AFTER__)
        ][@stackClear(_ForLog_Attributes_,)][@xmlDelete(ForEnterLogLine),@xmlDelete(ForLeaveLogLine)
        ][% suiteAndMore %]|

create_ForEnterLogLine:   <INSERT [@stackRead("",_ForLog_Attributes_)] new="-1">
                           <TEXT [@stackRead("",_ForLog_Attributes_)] new="-1">
                            PRB_FOR_ENTER("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                         ]", [@attribute(L)], [@attribute(C)], "[@snipet(for_expr),]");
                           </TEXT>
                           <TEXT [@stackRead("",_ForLog_Attributes_)] new="-1">
                            // log the leaving of a for statement
                           </TEXT>
                          </INSERT>|      
                       
create_ForLeaveLogLine:   <INSERT [@stackRead("",_ForLog_Attributes_)] new="1">
                           <TEXT [@stackRead("",_ForLog_Attributes_)] new="1">
                            PRB_FOR_LEAVE("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                         ]", [@attribute(L)], [@attribute(C)]);
                           </TEXT>
                           <TEXT [@stackRead("",_ForLog_Attributes_)] new="1">
                            // log the leaving of a for statement
                           </TEXT>
                          </INSERT>|     
/*@replace("&", "&amp;"),*/                      
for_expr:[@replace("&", "@@@@@@@@@@@@@@@"),@replace("@@@@@@@@@@@@@@@", "&amp;"),@replace("<", "&lt;"),@replace(">", "&gt;"), @replace("\"", "&quot;"), @text(expr_stmt), @text(assignment_expression)]|                      
                      
                      
/*[@stackRead(__LIVEOUT__,_WhileLog_Attributes_)
          ]*/
while_stmt:[@useForSnipet(while_stmt, LINE_Attributes),           @stackPush(_WhileLog_Attributes_,__SELF__)
          ][@useForSnipet(while_stmt, create_WhileEnterLogLine),  @xmlCreate(WhileEnterLogLine,__SELF__)
          ][@xmlSave(WhileEnterLogLine,prb/log/WhileEnterLogLine.xml),@xmlInsert(WhileEnterLogLine/INSERT, __BEFORE__)
          ][@useForSnipet(while_stmt, create_WhileLeaveLogLine),  @xmlCreate(WhileLeaveLogLine,__SELF__)
          ][@xmlSave(WhileLeaveLogLine,prb/log/WhileLeaveLogLine.xml),@xmlInsert(WhileLeaveLogLine/INSERT, __AFTER__)
          ][@stackClear(_WhileLog_Attributes_,)][@xmlDelete(WhileEnterLogLine),@xmlDelete(WhileLeaveLogLine)
          ][% suiteAndMore %]|

create_WhileEnterLogLine: <INSERT [@stackRead("",_WhileLog_Attributes_)] new="-1">
                           <TEXT [@stackRead("",_WhileLog_Attributes_)] new="-1">
                            PRB_WHILE_ENTER("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                         ]", [@attribute(L)], [@attribute(C)], "[@snipet(while_expr)]");
                           </TEXT>
                           <TEXT [@stackRead("",_WhileLog_Attributes_)] new="-1">
                            // log the leaving of a while statement
                           </TEXT>
                          </INSERT>|      
                       
create_WhileLeaveLogLine: <INSERT [@stackRead("",_WhileLog_Attributes_)] new="1">
                           <TEXT [@stackRead("",_WhileLog_Attributes_)] new="1">
                            PRB_WHILE_LEAVE("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                         ]", [@attribute(L)], [@attribute(C)]);
                           </TEXT>
                           <TEXT [@stackRead("",_WhileLog_Attributes_)] new="1">
                            // log the leaving of a while statement
                           </TEXT>
                          </INSERT>|     

/*@replace("&", "&amp;"),*/                      
while_expr:[@replace("&", "@@@@@@@@@@@@@@@"),@replace("@@@@@@@@@@@@@@@", "&amp;"),@replace("<", "&lt;"),@replace(">", "&gt;"), @replace("\"", "&quot;"), @text(expr_stmt), @text(assignment_expression)]|

/**/  
do_stmt:[@useForSnipet(do_stmt, LINE_Attributes),        @stackPush(_DoLog_Attributes_,__SELF__)
       ][@useForSnipet(do_stmt, create_DoEnterLogLine),  @xmlCreate(DoEnterLogLine,__SELF__)
       ][@xmlSave(DoEnterLogLine,prb/log/DoEnterLogLine.xml),@xmlInsert(DoEnterLogLine/INSERT, __BEFORE__)
       ][@useForSnipet(do_stmt, create_DoLeaveLogLine),  @xmlCreate(DoLeaveLogLine,__SELF__)
       ][@xmlSave(DoLeaveLogLine,prb/log/DoLeaveLogLine.xml),@xmlInsert(DoLeaveLogLine/INSERT, __AFTER__)
       ][@stackClear(_DoLog_Attributes_,)][@xmlDelete(DoEnterLogLine),@xmlDelete(DoLeaveLogLine)
       ][% suiteAndMore %]|

create_DoEnterLogLine:    <INSERT [@stackRead("",_DoLog_Attributes_)] new="-1">
                           <TEXT [@stackRead("",_DoLog_Attributes_)] new="-1">
                            PRB_DO_ENTER("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                         ]", [@attribute(L)], [@attribute(C)], "[@snipet(while_expr)]");
                           </TEXT>
                           <TEXT [@stackRead("",_DoLog_Attributes_)] new="-1">
                            // log the leaving of a do statement
                           </TEXT>
                          </INSERT>|      
                       
create_DoLeaveLogLine:    <INSERT [@stackRead("",_DoLog_Attributes_)] new="1">
                           <TEXT [@stackRead("",_DoLog_Attributes_)] new="1">
                            PRB_DO_LEAVE("[@replace("_c.xml",".c"),@replace("_cpp.xml",".cpp"), @stackRead("",__SOURCENAME__)
                                         ]", [@attribute(L)], [@attribute(C)]);
                           </TEXT>
                           <TEXT [@stackRead("",_DoLog_Attributes_)] new="1">
                            // log the leaving of a do statement
                           </TEXT>
                          </INSERT>|     
                      




                                      