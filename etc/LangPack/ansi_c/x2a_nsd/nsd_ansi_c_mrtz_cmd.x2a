
comp_op_print:<font color="#FF00FF"><b>[@text(__SELF__)]</b></font>|useAlsoFor(comp_op)
comp_op_skip:
|

Keyword_print:<font color="#0000FF"><b> [@text(__SELF__)] </b></font>|useAlsoFor(Keyword)
Keyword_skip:
|
KeyChr_print:<font color="#FF00FF"><b> [@text(__SELF__)] </b></font>|useAlsoFor(KeyChr)
KeyChr_skip:
|
Str_print:<font color="#FF00FF"><b>[@text(__SELF__)]</b></font>|useAlsoFor(Str)
Str_skip:
|

ID_print:<font color="#000000"><b><i>[@text(__SELF__)]</i></b></font>|useAlsoFor(ID)
ID_skip:
|

Owner_print:<font color="#000000"><b><i>[@text(__SELF__)]</i></b></font>|useAlsoFor(Owner)
Owner_skip:
|

/*
owned_ID_print:<font color="#000000"><b><i>[@text(__SELF__)]</i></b></font>|useAlsoFor(owned_ID)
owned_ID_skip:
|
*/

String_print:<font color="#007F00"><b>[@text(__SELF__)]</b></font>|useAlsoFor(String)
String_skip:
|

testlist1_print:<font color="#00CF00"><b>[@text(__SELF__)]</b></font>|useAlsoFor(testlist1)
testlist1_skip:
|

Number_print:<font color="#7F007F"><b>[@text(__SELF__)]</b></font>|useAlsoFor(Number)
Number_skip:
|

/*Comment_print:<font color="#7FAF7F"><b>[@replace("#",""),@text(__SELF__)]</b></font>|useAlsoFor(Comment)*/
Comment_print:<font color="#7FAF7F"><b>[@replace("//",""),@replace("/*",""),@replace("*/",""),@text(__SELF__)]</b></font>|
Comment_skip:
|


USER_TYPE_print: <font color="#FF0000">[@useForSnipet(ID,printInternalID),@snipet(ID)]</font>|useAlsoFor(USER_TYPE)
USER_TYPE_skip:
|

enum_specifier_print: <font color="#FF0000">[@useForSnipet(ID,printInternalID),@snipet(ID)]</font>|useAlsoFor(enum_specifier_print)
enum_specifier_skip:
|

type_qualifier_print:<font color="#0000FF"><b><i>[@text(__SELF__)]</i></b></font> |useAlsoFor(type_qualifier)
type_qualifier_skip:
|

storage_class_specifier_print:<font color="#0000FF"><b><i>[@text(__SELF__)]</i></b></font> |useAlsoFor(type_qualifier)
storage_class_specifier_skip:
|



/*
struct_or_union_specifier_print: <font color="#FF0000">[@useForSnipet(ID,printInternalID),@snipet(ID)]</font>|useAlsoFor(struct_or_union_specifier)
struct_or_union_specifier_skip:
|
*/
/*
struct_or_union_print:<font color="#0000FF"><b><i>[@text(__SELF__)]</i></b></font>|useAlsoFor(struct_or_union)
struct_or_union_skip:
|
*/



/*
struct_specifier:
[<N0>]     <TABLE border="0" width="100%">             
[<N0>]      <TR border=0 cellspacing="0" cellpadding="0">
[<I1>]       <TD align="left">
[<I1>]       [@snipet(Keyword)] 
[<D1>]       </TD>
[<N0>]       <TD align="right">
[<I1>]       [@snipet(Comment)]
[<D1>]       </TD> 
[<D1>]      </TR>
[<N0>]      <TR border=0 cellspacing="0" cellpadding="0">
[<I1>]       <TD colspan="2" align="left">
[<I1>]        <TABLE border="1"  width="100%">             
[<I1>]         [@snipet(declaration,)]
[<D1>]        </TABLE>
[<D1>]       </TD> 
[<D1>]      </TR>
[<D1>]     </TABLE>
|useAlsoFor(union_specifier),
*/





printInternalID:[@text(ID)]|



/*compound_stmt:*/
compound_statement:
     [@snipet(preprocedure,declaration,
              if_stmt,switch_stmt,case_stmt,default_stmt,
              while_stmt,do_stmt,for_stmt,goto_stmt,lable_stmt,
              continue_stmt,break_stmt,return_stmt,
              expr_stmt,compound_statement,
              __command__,__block__,)]
|

statement:
      [@snipet(preprocedure,declaration,
               if_stmt,switch_stmt,case_stmt,default_stmt,
               while_stmt,do_stmt,for_stmt,goto_stmt,lable_stmt,
               continue_stmt,break_stmt,return_stmt,
               expr_stmt,compound_statement,
               __command__,__block__,)]
|






/* StructClass  [@destination(ID)]
*/
classdef_Data:
[<N0>]  [@useForSnipet(declarator,save_class_name), @stackPush(ClassName,declarator)]
[<I1>]   <TR>
[<I1>]    <TD>
[<I1>]     <h1> Class [@snipet(ID)]</h1>
[<D1>]    </TD>
[<D1>]   </TR>
[<N0>]   <TR>
[<I1>]    <TD>
[<I1>]     <TABLE border="0" width="100%">
[<I1>]      [!@snipet(suite)!]
[<D1>]     </TABLE>
[<D1>]    </TD>
[<D1>]   </TR>
|



save_class_name:[@useForSnipet(direct_declarator,save_class_name2), @snipet(direct_declarator)]|
save_class_name2:[@useForSnipet(ID,printInternalID),@snipet(ID),@snipet(owned_ID)]|





suiteAndMore:[@useForSnipetDownwards(p_define,p_define_local),
              @snipet(preprocedure,declaration,
                      function_definition,
                      if_stmt,switch_stmt,case_stmt,default_stmt,
                      while_stmt,do_stmt,for_stmt,goto_stmt,lable_stmt,
                      continue_stmt,break_stmt,return_stmt,
                      expr_stmt,compound_statement,
                      __command__,__block__,)]|



/*
[@useForSnipet(declarator,save_func_name),@snipet(declarator)
            ]/
            */
funcdef_Data:
   [@useForSnipet(declarator,print_func_name), @stackPush(PrintFunctionName,declarator),
  ][@stackRead(__LIVEOUT__,PrintFunctionName)
  ][@useForSnipet(declarator,save_func_name), @stackPush(_ExcludeParentName_,declarator)
  ][@useForSnipet(declarator,save_func_name), @stackPush(_FunctionName_,declarator)
  ][@useForSnipet(declarator,save_func_ID),   @stackPush(_FunctionID_,declarator)]
[<N0>]   <TR>
[<I1>]    <TD>
[<I1>]     <a name="[@useForSnipet(declarator,save_func_name),@snipet(declarator)]"></a><br>
[<N0>]     <br><h2>[@replace("_"," "),@snipet(declarator/direct_declarator)] [@stackRead("",__VARIANTNAME__)]</h2><br>
[<N0>]     <TABLE  border="2" cellspacing="0" cellpadding="0" width="800">
[<I1>]      <TR>
[<I1>]       <TD>
[<I1>]       [@snipet(declaration_specifier),@snipet(declarator/direct_declarator)]
[<D1>]        <br><div align="right">[@snipet(Comment)]</div>
[<D1>]       </TD>
[<D1>]      </TR>
[<N0>]      <TR>
[<I1>]       <TD width="100%">
[<I1>]        <TABLE border="1" width="100%">
[<I1>]         [% suiteAndMore %]
[<D1>]        </TABLE>
[<D1>]       </TD>
[<D1>]      </TR>
[<D1>]     </TABLE>
[<N0>]     <br>
[<D1>]    </TD>
[<D1>]   </TR>
  [@stackPushSize(mrtzExcludeContent,mrtzExcludeContentSize)
 ][@ifStackUnequal("-1",mrtzExcludeContentSize),@stackPopAll("",mrtzExcludeContent)
 ][@stackClear(mrtzExcludeName, mrtzExcludeOutput, mrtzExcludeContent, mrtzExcludeFile, mrtzExcludeContentSize)

 ][@useForSnipet(declarator,mrtz_describe_name), @stackPush(mrtzDescribeName,declarator)
 ][@useForSnipet(declarator,empty), @stackPush(_LinkFile_,declarator)
 ][@useForSnipet(function_definition,mrtz_describe_file),
   @useForSnipet(Variant,mrtz_describe_file),
   @stackPush(mrtzDescribeFile,__SELF__)
 ][@stackRead(__LIVEOUT__,_LinkFile_)
 ][@ifStackUnequal(" ",_LinkFile_),@stackPop(mrtzDescribeName, mrtzDescribeFile)
 ][@stackClear(mrtzDescribeName, _LinkFile_, mrtzDescribeFile,_FunctionID_)
 ][@xmlDelete(ExcludeData)
 ][@useForSnipet(__command__,drop_describe),@snipet(__command__)]|


drop_describe:[@drop(mrtz_describe)]|



  


print_func_name:[@useForSnipet(direct_declarator,print_func_name2), @snipet(direct_declarator)]|
print_func_name2: function: [@text(owned_ID),@text(KeyChr),@text(ID),@text(operator_id)]|

save_func_name:[@useForSnipet(direct_declarator,save_func_name2), @snipet(direct_declarator)]|
save_func_name2:[@replace(" ","_"),@replace(":","_"),@text(owned_ID),@text(KeyChr),@text(ID),@text(operator_id)]|

save_func_ID:[@useForSnipet(direct_declarator,save_func_ID2), @snipet(direct_declarator)]|
/*save_func_ID2:[@replace(":",""),@text(KeyChr),@text(ID),@text(owned_ID)]|*/
save_func_ID2:[@replace(":",""),@text(owned_ID/ID)]|

empty: |
/*[@useForSnipet(ID,printInternalID),@snipet(ID)]*/








SwitchCaseAndMore:[@useForSnipet(__command__,__command__TD__),@snipet(case_stmt),@snipet(__command__)]|

/*
SwitchDefaultAndMore:[@useForSnipet(__command__,__command__TD__),@snipet(__command__),
                      @ifAbsent(__command__, empty_default__command__)]|

empty_default__command__:[@snipet(default_stmt),@ifAbsent(default_stmt, empty_default)]|
*/



IfAndMore:[@snipet(if_part)]
 [<N0>]   [@useForSnipet(__command__,__command__TD__),@snipet(__command__)]
 [<N0>]   [@snipet(elif_part)]|

/*
ElseAndMore:[@useForSnipet(__command__,__command__TD__),@snipet(__command__),
             @ifAbsent(__command__, empty_default__command__)]|

empty_default__command__:[@snipet(default_stmt),@ifAbsent(default_stmt, empty_default)]|
*/





/*StructBlockcollection */
suite:
      [@snipet(preprocedure,declaration,
               if_stmt,switch_stmt,case_stmt,default_stmt,
               while_stmt,do_stmt,for_stmt,goto_stmt,lable_stmt,
               continue_stmt,break_stmt,return_stmt,
               expr_stmt,compound_statement,
               __command__,__block__,)]
|



/* moritz-commands*/
__command__:
[@snipet(mrtz_exclude,
         mrtz_hideComments,
         mrtz_printComments,
         mrtz_hideCommands,
         mrtz_printCommands,
         mrtz_pointOut,
         mrtz_skip,
         mrtz_independent,
         mrtz_showSource,
         mrtz_ifElseChain,
         mrtz_automaticLink,
         mrtz_insertLink)]
|



__command__TD__:
<TD><TABLE>[@snipet(mrtz_exclude,
             mrtz_hideComments,
             mrtz_printComments,
             mrtz_hideCommands,
             mrtz_printCommands,
             mrtz_pointOut,
             mrtz_skip,
             mrtz_independent,
             mrtz_showSource,
             mrtz_ifElseChain,
             mrtz_automaticLink,
             mrtz_insertLink)] </TABLE></TD>|












/*StructBlock*/
__block__:[@snipet(preprocedure,declaration,
                   if_stmt,switch_stmt,case_stmt,default_stmt,
                   while_stmt,do_stmt,for_stmt,goto_stmt,lable_stmt,
                   continue_stmt,break_stmt,return_stmt,
                   expr_stmt,compound_statement,
                   __command__,__block__,)]
|




/* [@useForSnipet(mrtz_exclude,mrtz_exclude_saveAnchor),  @xmlCreate(ExcludeData,__SELF__)]
*/
mrtz_exclude:
 [@useForSnipet(mrtz_exclude,print_exclude_name), @stackPush(PrintExcludeName,__SELF__)]
 [@stackRead(__LIVEOUT__,PrintExcludeName)][@stackClear(PrintExcludeName)]
 [@useForSnipet(mrtz_exclude,mrtz_exclude_name),  @stackPush(mrtzExcludeName,__SELF__)]
 [@useForSnipet(mrtz_exclude,mrtz_exclude_link),  @stackPush(mrtzExcludeLink,__SELF__)]
 [@useForSnipet(mrtz_exclude,mrtz_exclude_ref),   @stackPush(mrtzExcludeRef,__SELF__)]

 [@useForSnipet(mrtz_exclude,save_exclude_name),  @stackPush(_ExcludeParentName_,__SELF__)]

 [@useForSnipet(__block__,mrtz_exclude_content),  @stackPush(mrtzExcludeContent,__block__)]
 [@useForSnipet(__block__,mrtz_exclude_file),     @stackPush(mrtzExcludeFile,__block__)]

 [@useForSnipet(mrtz_exclude,dump_exclude_name),  @stackPush(Dump,__SELF__)]
[<N0>]   <TR align="left">
[<I1>]    <TD align="center">
[<I1>]      <font color="#000000">
[<I1>]       [@stackPop("",mrtzExcludeRef)]
[<D1>]      </font>
[<D1>]    </TD>
[<D1>]   </TR>
|


print_exclude_name:  exclude: [@attribute(titel)]|


mrtz_exclude_link:
[<N0>] <br>
[<N0>] <a name="[@stackRead("",_FunctionName_)]/[@replace(" ","_"),@attribute(titel)]"></a><a name="[@stackRead("",_ExcludeParentName_)]/[@replace(" ","_"),@attribute(titel)]"></a><h4>[@replace("_"," "),@attribute(titel)]</h4>
 (excluded part of <a href="#[@stackRead("",_ExcludeParentName_)]">[@stackRead("",_ExcludeParentName_)]</a>)
|


mrtz_exclude_ref:
[@useForSnipet(mrtz_exclude,direction),@stackPush(_Direction_,__SELF__)]
[@useForSnipet(mrtz_exclude,horizontalTitel),@stackPush(_Titel_,__SELF__)]
[@useForSnipet(mrtz_exclude,horizontalHeader),@stackPush(_Header_,__SELF__)]
[@ifStackEqual("vertical",_Direction_), 
 @useForSnipet(mrtz_exclude,verticalTitel),  @stackPush(_Titel_,__SELF__)]
[@ifStackEqual("vertical",_Direction_), 
 @useForSnipet(mrtz_exclude,verticalHeader),  @stackPush(_Header_,__SELF__)]

[<N0>]       <a href="#[@stackRead("",_ExcludeParentName_)]/[@replace(" ","_"),@attribute(titel)]"><i>[@stackRead("",_Header_)][@replace("_"," "),@stackRead("",_Titel_)]</i></a>
[@stackClear(_Direction_,_Titel_,_Header_)]
|
horizontalHeader:Excluded :|
verticalHeader:E<br>x<br>c<br>l<br>u<br>d<br>e<br>d<br>:<br>|

direction:[@attribute(direction)]|
horizontalTitel:[@attribute(titel)]|
verticalTitel:
[@parse(_Titel_,ID,Titel)]
[@useForSnipet(ID,verticalCharacters),@xmlSnipet(Titel/ID)]
[@xmlSave(Titel,Titel.xml)]
[@xmlDelete(Titel)]
|

verticalCharacters:
[<N0>] <Table cellspacing="0" cellpadding="0">
[<I1>]  [@snipet(Character),@snipet(Digit),@snipet(Underscore),]
[<D1>] </Table>
|
Character:
[<N0>] <TR heigth="10"><TD width="10">[@text(__SELF__)]</TD></TR>
|useAlsoFor(Digit,Underscore)





save_exclude_name:[@stackRead("",_FunctionName_)]/[@attribute(titel)]|

dump_exclude_name:[@stackPop("",_ExcludeParentName_)]|


mrtz_exclude_file:
[<N0>]   <HTML>
[<I1>]    <HEAD>
[<N0>]    </HEAD>
[<N0>]    <BODY>
[<D1>]     [@stackRead("",mrtzExcludeContent)]
[<D1>]    </BODY>
[<D1>]   </HTML>
|


mrtz_exclude_content:
[<N0>]     <br>
[<N0>]     <br>
[<N0>]     <TABLE border="0" cellspacing="5" cellpadding="0" width="800">
[<I1>]      <TR>
[<I1>]       <TD>
[<I1>]        <font color="#000000">
[<I1>]          <a name="[@replace(" ","_"),@attribute(titel)]"> [@stackRead("",mrtzExcludeLink)]</a>
[<D1>]        </font>
[<D1>]       </TD>
[<D1>]      </TR>
[<D1>]     </TABLE>
[<N0>]     <TABLE border="1" cellspacing="0" cellpadding="0" width="800">
[<I1>]      [@snipet(preprocedure,declaration,
                     if_stmt,if_part,elif_part,switch_stmt,case_stmt,default_stmt,
                     while_stmt,do_stmt,for_stmt,goto_stmt,lable_stmt,
                     continue_stmt,break_stmt,return_stmt,
                     expr_stmt,compound_statement, __command__,__block__,)]
[<D1>]     </TABLE>
|





/**/
mrtz_hideComments:
 [@useForSnipetDownwards(Comment,Comment_skip),@snipet(__block__)]
|
/**/
mrtz_printComments:
 [@useForSnipetDownwards(Comment,Comment_print),@snipet(__block__)]
|



mrtz_hideCommands:
 [@useForSnipetDownwards(comp_op,   comp_op_skip),
  @useForSnipetDownwards(Keyword,   Keyword_skip),
  @useForSnipetDownwards(KeyChr,    KeyChr_skip),
  @useForSnipetDownwards(Str,       Str_skip),
  @useForSnipetDownwards(ID,        ID_skip),
  @useForSnipetDownwards(Owner,     Owner_skip),
  @useForSnipetDownwards(owned_ID,  owned_ID_skip),
  @useForSnipetDownwards(String,    String_skip),
  @useForSnipetDownwards(testlist1, testlist1_skip),
  @useForSnipetDownwards(Number,    Number_skip),

  @useForSnipetDownwards(USER_TYPE,                 USER_TYPE_skip),
  @useForSnipetDownwards(enum_specifier,            enum_specifier_skip),
  @useForSnipetDownwards(type_qualifier,            type_qualifier_skip),
  @useForSnipetDownwards(storage_class_specifier,   storage_class_specifier_skip),


  @snipet(__block__)]
|


/**/
mrtz_printCommands:
 [@useForSnipetDownwards(comp_op,   comp_op_print),
  @useForSnipetDownwards(Keyword,   Keyword_print),
  @useForSnipetDownwards(KeyChr,    KeyChr_print),
  @useForSnipetDownwards(Str,       Str_print),
  @useForSnipetDownwards(ID,        ID_print),
  @useForSnipetDownwards(Owner,     Owner_print),
  @useForSnipetDownwards(owned_ID,  owned_ID_print),
  @useForSnipetDownwards(String,    String_print),
  @useForSnipetDownwards(testlist1, testlist1_print),
  @useForSnipetDownwards(Number,    Number_print),

  @useForSnipetDownwards(USER_TYPE,                 USER_TYPE_print),
  @useForSnipetDownwards(enum_specifier,            enum_specifier_print),
  @useForSnipetDownwards(type_qualifier,            type_qualifier_print),
  @useForSnipetDownwards(storage_class_specifier,   storage_class_specifier_print),

  @snipet(__block__)]
|









mrtz_pointOut:
[<N0>]   <TR align="left">
[<I1>]    <TD>
[<I1>]     <TABLE border="1" cellspacing="0" cellpadding="0" width="100%" bgcolor="#[@replace(" ",""),@replace("","FFFFFF"),@attribute(color)]">
[<I1>]      <TR>
[<I1>]       <TD align="center">
[<I1>]        <h2>
[<I1>]         <b><i> [@replace(" ",""),@attribute(titel)]</i></b>
[<D1>]        </h2>
[<N0>]        <TABLE border="1" cellspacing="0" cellpadding="0"  width="95%">
[<I1>]         [@snipet(__block__)]
[<D1>]        </TABLE>
[<D1>]        <br>
[<D1>]       </TD>
[<D1>]      </TR>
[<D1>]     </TABLE>
[<D1>]    </TD>
[<D1>]   </TR>
|

mrtz_skip:
[@useForSnipet(mrtz_skip,direction),      @stackPush(_Direction_,__SELF__)]
[@useForSnipet(mrtz_skip,horizontalTitel),@stackPush(_Titel_,__SELF__)]
[@ifStackEqual("vertical",_Direction_), 
 @useForSnipet(mrtz_skip,verticalTitel),  @stackPush(_Titel_,__SELF__)]
[<N0>]   <TR align="left">
[<I1>]    <TD>
              <b><i>[@replace("_"," "),@stackRead("",_Titel_)]</i></b>
[<D1>]    </TD>
[<D1>]   </TR>
[@stackClear(_Direction_,_Titel_)]|
 
 
mrtz_independent:
[<N0>]   <TR align="left">
[<I1>]    <TD>
[<I1>]     <TABLE border="1" cellspacing="0" cellpadding="0" width="100%" bgcolor="#[@replace(" ",""),@replace("","FFFFFF"),@attribute(color)]">
[<I1>]      <TR>
[<I1>]       <TD align="center">
[<I1>]        <TABLE border="0" cellspacing="0" cellpadding="0"  width="95%">
[<I1>]         <TR>
[<I1>]          <TD>
[<I1>]           [@useForSnipet(__block__,__block__independent),@snipet(__block__)]
[<D1>]          </TD>
[<D1>]         </TR>
[<D1>]        </TABLE>
[<D1>]       </TD>
[<D1>]      </TR>
[<D1>]     </TABLE>
[<D1>]    </TD>
[<D1>]   </TR>
|

__block__independent:
      [@snipet(Comment,)]
|





/**/
mrtz_describe_file:
[<N0>]   <HTML>
[<I1>]    <HEAD>
[<N0>]    </HEAD>
[<N0>]    <BODY>
[<I1>]     <b> Details of Algorithm :</b>
[<N0>]     <br>
[<N0>]     <TABLE border="0" cellspacing="5" cellpadding="0">
[<D1>]      [@useForSnipet(__command__,mrtz_describe_content),  @snipet(__command__)]
[<D1>]     </TABLE>
[<D1>]    </BODY>
[<D1>]   </HTML>
|

 
mrtz_describe_content:[@ifOlderAs(mrtzDescribeName),@snipet(mrtz_describe)]|





/*
[@xmlPrint("\n _FunctionID_ : ")]          [@stackRead(__LIVEOUT__,_FunctionID_)]
[@xmlPrint("\n _FunctionName_ : ")]        [@stackRead(__LIVEOUT__,_FunctionName_)]
[@xmlPrint("\n _LinkAnchor_ : ")]          [@stackRead(__LIVEOUT__,_LinkAnchor_)]
[@xmlPrint("\n _DeleteFromLinkAnchor_ : ")][@stackRead(__LIVEOUT__,_DeleteFromLinkAnchor_)]
*/

mrtz_describe:[@useForSnipet(mrtz_describe,mrtz_describe_LinkAnchor),
               @stackPush(_LinkAnchor_,__SELF__)
             ][@useForSnipet(mrtz_describe,mrtz_describe_LinkFile),
               @stackPush(_LinkFile_,__SELF__)
             ][@useForSnipet(mrtz_describe,mrtz_describe_DeleteFromLinkAnchor),
               @stackPush(_DeleteFromLinkAnchor_,__SELF__)]
[<N0>]      <TR>
[<I1>]       <TD align="left" valign="top">
[<I1>]        <a href="diagrams_[@replace(".xml",""),@replace("@","_"),@stackRead("",_LinkFile_)
                                ].html#[@replace(_DeleteFromLinkAnchor_,""),@stackRead("",_LinkAnchor_)]">
[<I1>]         [@attribute(PartName)]
[<D1>]        </a>
[<D1>]       </TD>
[<N0>]       <TD align="left" valign="top">
[<I1>]        [@useForSnipet(__block__,__block__describe),@snipet(__block__)]
[<D1>]       </TD>
[<D1>]      </TR>[@stackClear(_LinkAnchor_,_DeleteFromLinkAnchor_)]|


__block__describe:[@useForSnipet(Comment,mrtz_describe_line),@snipet(Comment)]|


mrtz_describe_line:<font color="#000000">[@replace("#",""),@text(__SELF__)]</font>|

mrtz_describe_LinkAnchor:[@stackRead("",_FunctionName_)]/[@replace(" ",""),@attribute(PartName)]|

mrtz_describe_DeleteFromLinkAnchor:/[@stackRead("",_FunctionName_)]|





/*pre replacements of under-scores into @ wich have to be replaced into 2 
underscores for doxygen-links*/
mrtz_describe_LinkFile:[@replace("_","@"),@stackRead("",__SOURCENAME__)]|


mrtz_showSource:[@useForSnipet(mrtz_showSource,mrtz_showSource_AttributeLineNumber), 
                 @stackPush(ShowSource_AttributeLineNumber,__SELF__)
               ][@xmlCode(_ContentSource_,__SELF__),@xmlSave(_ContentSource_,nsd/SourceContent.xml)
               ][@useForSnipet(_ContentSource_,mrtz_showSource_Content), 
                 @xmlSnipet(_ContentSource_)
               ][@xmlDelete(_ContentSource_)]|             

mrtz_showSource_Content:
[<N0>]    <TR align="left">
[<I1>]     <TD>
[<I1>]      <TABLE border="0" cellspacing="0" cellpadding="0">
[<I1>]        [@useForSnipet(CODE,mrtz_showSource_Code),@snipet(CODE),]
[<D1>]      </TABLE>
[<D1>]     </TD>
[<D1>]    </TR>
 [@stackClear(ShowSource_AttributeLineNumber)]
|





mrtz_showSource_AttributeLineNumber:[@attribute(lineNumber)]|




mrtz_showSource_Code:[@useForSnipet(LINE,mrtz_showSource_Line),@snipet(LINE)]|

mrtz_showSource_LineNumber:<TD align="right"><font color="#00A0A0"><NOBR><TT><b><i>[@ifStackEqual("LineNumber",ShowSource_AttributeLineNumber),@attribute(L)]</i></b></TT></NOBR></font></TD><TD><TT>&nbsp;</TT></TD>|

mrtz_showSource_Line: <TR>[@useForSnipet(LINE,mrtz_showSource_LineNumber),@snipet(__SELF__)]
                      <TD><NOBR><TT>
                          [@useForSnipet(Comment,Comment_source),
                           @snipet(comp_op,
                                   Keyword,
                                   KeyChr,
                                   ID,
                                   shortstring,
                                   longstring,
                                   testlist1,
                                   floatnumber,
                                   octinteger,
                                   hexinteger,
                                   decimalinteger,
                                   longinteger,
                                   imagnumber,
                                   Comment,
                                   SP),]</TT></NOBR></TD>
                      </TR>|

SP:&nbsp;|
shortstring:<font color="#007F00"><b>[@text(__SELF__)]</b></font>|
longstring:<font color="#007F00"><b>[@text(__SELF__)]</b></font>|

floatnumber:<font color="#7F007F"><b>[@text(__SELF__)]</b></font>|
integer:<font color="#7F007F"><b>[@text(__SELF__)]</b></font>|
longinteger:<font color="#7F007F"><b>[@text(__SELF__)]</b></font>|
imagnumber:<font color="#7F007F"><b>[@text(__SELF__)]</b></font>|
octinteger:<font color="#7F007F"><b>[@text(__SELF__)]</b></font>|
hexinteger:<font color="#7F007F"><b>[@text(__SELF__)]</b></font>|
decimalinteger:<font color="#7F007F"><b>[@text(__SELF__)]</b></font>|
Comment_source:<font color="#7FAF7F"><b>[@text(__SELF__)]</b></font>|



mrtz_ifElseChain:[@useForSnipet(__block__,__block__mrtz_ifElseChain),@snipet(__block__)]|
__block__mrtz_ifElseChain:[@snipet(if_stmt)]|



/*dumies*/
mrtz_automaticLink:[@snipet(__block__)]|
mrtz_insertLink:|











